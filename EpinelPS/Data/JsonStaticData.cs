// This file was automatically generated by a tool. Please do not modify.
namespace EpinelPS.Data;
using MemoryPack;
[MemoryPackable]
public partial class ScenarioDialogRecord
{
    public String? Id;
    public String? GroupId;
    public String? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public String? Highlight;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Boolean PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public String? SetBackground;
    public String? SetLight;
    public String? ConversationId;
    public String? SetImage;
    public String? SetObject;
    public String? SetObjectPosition;
    public String? SetStartCamera;
    public String? SetEndCamera;
    public Double SetCameraDuration;
    public String? PlayMovie;
    public String? PlaySound;
    public String? PlayAmbient;
    public Int32 AmbientVolume;
    public String? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public String? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public String? JumpTarget;
    public ScenarioFadeType Fade;
    public Boolean IsExitScenario;
}

[MemoryPackable]
public partial class AttractiveScenarioDialogRecord
{
    public String? Id;
    public String? GroupId;
    public String? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public String? Highlight;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Boolean PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public String? SetBackground;
    public String? SetLight;
    public String? ConversationId;
    public String? SetImage;
    public String? SetObject;
    public String? SetObjectPosition;
    public String? SetStartCamera;
    public String? SetEndCamera;
    public Double SetCameraDuration;
    public String? PlaySound;
    public String? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public String? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public String? JumpTarget;
    public ScenarioFadeType Fade;
    public Boolean IsExitScenario;
}

[MemoryPackable]
public partial class AttractiveCounselDialogRecord
{
    public String? Id;
    public String? GroupId;
    public String? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public Int32 AttractivePoint;
    public String? Highlight;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Boolean PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public String? SetBackground;
    public String? SetLight;
    public String? ConversationId;
    public String? SetImage;
    public String? SetObject;
    public String? SetObjectPosition;
    public String? SetStartCamera;
    public String? SetEndCamera;
    public Double SetCameraDuration;
    public String? PlaySound;
    public String? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public String? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public String? JumpTarget;
}

[MemoryPackable]
public partial class EventScenarioDialogRecord
{
    public String? Id;
    public Int32 EventId;
    public String? GroupId;
    public String? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public String? Highlight;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Boolean PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public String? SetBackground;
    public String? SetLight;
    public String? ConversationId;
    public String? SetImage;
    public String? SetObject;
    public String? SetObjectPosition;
    public String? SetStartCamera;
    public String? SetEndCamera;
    public Double SetCameraDuration;
    public String? PlayMovie;
    public String? PlaySound;
    public String? PlayAmbient;
    public Int32 AmbientVolume;
    public String? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public String? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public String? JumpTarget;
    public ScenarioFadeType Fade;
    public Boolean IsExitScenario;
}

[MemoryPackable]
public partial class SideStorySpotDialogRecord
{
    public String? Id;
    public String? GroupId;
    public String? PortraitId;
    public String? NameLocalkey;
    public String? ScenarioLocalkey;
    public String? PlayVoice;
    public DialogPositionType SetDialogPosition;
    public PortraitPositionType SetPortraitPosition;
    public CameraFocusType SetCameraFocus;
    public String? SetCameraShake;
}

[MemoryPackable]
public partial class SideStoryScenarioDialogRecord
{
    public String? Id;
    public String? GroupId;
    public String? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public String? Highlight;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Boolean PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public String? SetBackground;
    public String? SetLight;
    public String? ConversationId;
    public String? SetImage;
    public String? SetObject;
    public String? SetObjectPosition;
    public String? SetStartCamera;
    public String? SetEndCamera;
    public Double SetCameraDuration;
    public String? PlayMovie;
    public String? PlaySound;
    public String? PlayAmbient;
    public Int32 AmbientVolume;
    public String? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public String? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public String? JumpTarget;
    public ScenarioFadeType Fade;
    public Boolean IsExitScenario;
}

[MemoryPackable]
public partial class MainQuestRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Category Category;
    public Int32 ConditionId;
    public String? ConditionUiLocalkey;
    public String? ShortcutType;
    public Int32 ShortcutValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 NextMainQuestId;
    public Int32 RewardId;
    public ScenarioType ScenarioType;
    public String? EpisodeId;
    public Int32 TargetChapterId;
    public String? HeaderBgResourceId;
}

[MemoryPackable]
public partial class RewardRecord
{
    public Int32 Id;
    public Int32 UserExp;
    public Int32 CharacterExp;
    public List<RewardEntry>? Rewards;
}

[MemoryPackable]
public partial class ConfigBattleRecord
{
    public String? Id;
    public String? Value;
}

[MemoryPackable]
public partial class MailSenderRecord
{
    public Int32 Id;
    public String? NameLocaltable;
    public String? NameLocalkey;
    public Int32 ResourceId;
}

[MemoryPackable]
public partial class LanguageRecord
{
    public String? Key;
    public Int32 Order;
    public String? NameLocalkey;
}

[MemoryPackable]
public partial class ContentsTutorialRecord
{
    public Int32 Id;
    public Int32 VersionGroup;
    public Int32 GroupId;
    public ContentsTutorialSubGroup SubGroupId;
    public Boolean IsShow;
    public Int32 ClearedStageId;
    public Int32 CloseStageId;
    public ContentsTutorialTriggerValue TriggerValue;
    public String? TriggerValueExtraKey;
    public ContentsTutorialTriggerValue CloseValue;
    public String? CloseValueExtraKey;
    public String? CharResourceId;
    public String? TitleTextLocale;
    public String? TextLocale;
    public ContentsTutorialTextLocation TextLocation;
    public Int32 Background;
    public List<String>? AddonResource;
    public Boolean FieldMovingRouteControl;
    public List<String>? MarkHiddenItemId;
    public String? HiddenItemMarkResource;
    public Boolean UnmaskControl;
    public List<String>? UnmaskKeyList;
    public String? UnmaskTextLocale;
    public Boolean UnmaskInputControl;
    public Int32 NextId;
    public Boolean SaveTutorial;
    public Int32 ReconnectionTutorialId;
    public ContentsTutorialTriggerValue ReconnectionTriggerValue;
    public Boolean SkipButtonControl;
}

[MemoryPackable]
public partial class ContentsOpenRecord
{
    public ContentsOpen Id;
    public ContentsOpenCondition ViewConditionType;
    public Int32 ViewConditionValue;
    public List<OpenConditionData>? OpenCondition;
    public String? ConditionLocalkey;
    public Boolean EnableUnlockPlayPopup;
    public Boolean EnableUnlockPlayButton;
}

[MemoryPackable]
public partial class NpcRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? NpcPrefab;
    public Int32 InteractionDistance;
    public ChapterMod ChapterMod;
    public Int32 ShortCut;
    public StageType QuestType;
    public Int32 InteractionQuestId;
    public Int32 ShowConditionQuestId;
    public Int32 HideConditionQuestId;
    public ScenarioType ScenarioType;
    public String? ScenarioId;
    public ScenarioPlayType ScenarioPlayType;
    public ScenarioType FixedScenarioType;
    public String? FixedScenarioId;
    public String? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public Int32 BalloonAlwaysCycle;
    public BalloonEndType BalloonAlwaysEndCondition;
}

[MemoryPackable]
public partial class InteractionObjectRecord
{
    public Int32 Id;
    public String? InteractionobjectPrefab;
    public Int32 InteractionDistance;
    public FieldInteractionObjectState ChangeState;
    public Boolean IsPassable;
    public Boolean IsUseTrigger;
    public Int32 MemberCount;
    public InteractionObjectIsDestroyable IsDestroyable;
    public Boolean IsPickupable;
    public Boolean IsExplosive;
    public Int32 ExplosiveRange;
    public Int32 ExplosiveDelay;
    public Boolean IsHackable;
    public Boolean IsHackingOnLoad;
    public Int32 HackedTime;
    public Boolean IsHackingTrigger;
    public Boolean IsRespawnObject;
    public Int32 RespawnTime;
}

[MemoryPackable]
public partial class QuestObjectRecord
{
    public Int32 Id;
    public String? QuestobjectPrefab;
    public Int32 InteractionDistance;
    public Single InteractionTime;
    public ChapterMod ChapterMod;
    public Int32 ShortCut;
    public StageType QuestType;
    public Int32 InteractionQuestId;
    public Int32 ShowConditionQuestId;
}

[MemoryPackable]
public partial class LiveWallpaperRecord
{
    public Int32 Id;
    public Livewallpaper_type LivewallpaperType;
    public Sub_type SubType;
    public Int32 Order;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? LiveWallpaperResourceId;
    public String? ThumbnailResourceId;
    public String? SiResourceId;
    public String? BgmResourceId;
    public Boolean IsSecret;
    public Condition_type ConditionType;
    public Int32 ConditionResourceId;
    public Int32 ConditionId;
}

[MemoryPackable]
public partial class BaseDefenseRecord
{
    public String? PresetName;
    public Int32 UserGainPoint;
    public Int32 EnemyGainPointStep1;
    public Int32 EnemyGainPointStep2;
    public Int32 ThrashPoint;
    public Int32 MinionPoint;
    public Int32 ElitePoint;
    public Int32 CenturionPoint;
}

[MemoryPackable]
public partial class ShakeDataRecord
{
    public Int32 Id;
    public Single Duration;
    public Int32 FrequencyX;
    public Single AmplitudeX;
    public Int32 FrequencyY;
    public Single AmplitudeY;
    public Int32 FrequencyZ;
    public Single AmplitudeZ;
    public Int32 RenewalPercent;
    public Single SizeCorrectionMedium;
    public Single SizeCorrectionLarge;
    public Single SizeCorrectionHuge;
}

[MemoryPackable]
public partial class LoadingTipRecord
{
    public Int32 Id;
    public Int32 Group;
    public String? Tip;
}

[MemoryPackable]
public partial class BuffRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public StatType StatType;
    public FunctionValueType FunctionValueType;
    public Int32 StatValue;
    public String? BuffIcon;
}

[MemoryPackable]
public partial class StageStatIncreaseRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 BattlePowerRatioMin;
    public Int32 BattlePowerRatioMax;
    public Int32 StatIncrease;
    public String? Textcolor;
}

[MemoryPackable]
public partial class QTEColPresetTableRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ColIndex;
    public Int32 TimeLimit;
    public ColType ColType;
    public Int32 Order;
    public List<Int32>? Chain;
    public Int32 DelayTime;
    public Boolean FirstCol;
    public List<Double>? ColPosition;
    public Int32 HpRatio;
    public Int32 DefRatio;
}

[MemoryPackable]
public partial class QuickTimeEventRecord
{
    public Int32 Id;
    public List<Int64>? MonsterId;
    public String? QtePrefab;
    public List<Int32>? GroupId;
    public Boolean RandomPreset;
    public Int32 TimeLimit;
    public Int32 FirstColAnimTime;
    public Int32 ElementId;
}

[MemoryPackable]
public partial class TransformationRecord
{
    public Int32 Id;
    public Int32 ResourceId;
    public Int32 NumberOfStep;
}

[MemoryPackable]
public partial class TowerInfoRecord
{
    public CorporationTowerType Id;
    public String? Name;
    public String? NameEnglish;
    public Int32 Order;
    public TeamType TeamType;
    public List<Int32>? DayOfWeek;
    public Int32 ClearLimit;
    public String? CoreResource;
    public String? CorpIcon;
}

[MemoryPackable]
public partial class MonsterStatEnhanceRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Lv;
    public Int64 LevelHp;
    public Int32 LevelAttack;
    public Int32 LevelDefence;
    public Int32 LevelStatdamageratio;
    public Int32 LevelEnergyResist;
    public Int32 LevelMetalResist;
    public Int32 LevelBioResist;
    public Int32 LevelProjectileHp;
    public Int64 LevelBrokenHp;
}

[MemoryPackable]
public partial class ObjectStatEnhanceRecord
{
    public Int32 Id;
    public SpotObjectRank Grade;
    public Int32 Lv;
    public Int64 LevelHp;
    public Int32 LevelDefence;
}

[MemoryPackable]
public partial class CoverStatEnhanceRecord
{
    public Int32 Id;
    public Int32 Lv;
    public Int64 LevelHp;
    public Int32 LevelDefence;
}

[MemoryPackable]
public partial class GuildEmblemRecord
{
    public Int32 Id;
    public Int32 Grade;
    public Int32 ResourceId;
}

[MemoryPackable]
public partial class MessengerRoomRecord
{
    public String? Id;
    public MessengerRoom Type;
    public Squad UnlockConditionSquad;
    public Int32 UnlockConditionCharacter;
    public String? NameLocale;
    public String? ThumbnailImage;
    public List<String>? Members;
}

[MemoryPackable]
public partial class MessengerMemberRecord
{
    public String? Id;
    public MessengerMember Type;
    public String? NameLocale;
    public String? StatusMessageLocale;
    public String? ProfileImage;
    public String? BackgroundImage;
}

[MemoryPackable]
public partial class TriggerRecord
{
    public Int32 Id;
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public Int32 BeforeTriggerId;
    public HandlerType HandlerType;
    public Boolean PrintValue;
    public String? ShortcutType;
    public Int32 ShortcutValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 PointValue;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class JukeboxThemeRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 Order;
    public String? ThemeResource;
    public String? BgColor;
}

[MemoryPackable]
public partial class SpotTutorialRecord
{
    public Int32 Id;
    public Int32 WaveNum;
    public Boolean SpotTimeControl;
    public Boolean NoinputControl;
    public SpotTutorialTriggerType TriggerType;
    public Int32 TriggerTimeValue;
    public SpotTutorialTriggerValue TriggerEnumValue;
    public Int64 TriggerEnumValueId;
    public SpotTutorialCloseType CloseType;
    public Int32 CloseTimeValue;
    public SpotTutorialCloseValue CloseValue;
    public TutorialFunctionType TutorialFunctionType;
    public String? CharResourceId;
    public String? TitleTextLocale;
    public String? TextLocale;
    public SpootTutorialTextLocation TextLocation;
    public Int32 Background;
    public String? AddonResource;
    public List<String>? UnmaskKeyList;
    public List<String>? UnmaskKeyListNoinput;
    public Int64 MarkMonsterId;
    public String? MonsterMarkResource;
    public String? EffectList;
    public Boolean SkipButtonControl;
    public SpotKeyBoardInputTrigger KeyBoardInputTrigger;
    public Int32 NextId;
}

[MemoryPackable]
public partial class FieldTutorialRecord
{
    public Int32 Id;
    public Int32 ClearedStageId;
    public Int32 CloseStageId;
    public String? CharResourceId;
    public String? TitleTextLocale;
    public String? TextLocale;
    public Int32 Background;
    public List<String>? AddonResource;
    public Boolean FieldMovingRouteControl;
    public List<String>? MarkHiddenItemId;
    public String? HiddenItemMarkResource;
    public Boolean UnmaskControl;
    public List<String>? UnmaskKeyList;
    public Boolean UnmaskInputControl;
    public Int32 NextId;
    public Int32 ReconnectionTutorialId;
}

[MemoryPackable]
public partial class AutoChargeRecord
{
    public Int32 Id;
    public RewardType ItemType;
    public Int32 ItemId;
    public Int32 AutoChargePlus;
    public Int32 AutoChargeMax;
}

[MemoryPackable]
public partial class ItemExchangeRecord
{
    public Int32 Id;
    public RewardType FrequencyItemType;
    public Int32 FrequencyItemId;
    public Int32 FrequencyItemCount;
    public RewardType ExchangeItemType;
    public Int32 ExchangeItemId;
    public Int32 ExchangeItemCount;
    public String? MailKey;
}

[MemoryPackable]
public partial class PassManagerRecord
{
    public Int32 Id;
    public PassType PassType;
    public Int32 EventId;
    public PassCategory PassCategory;
    public Int32 PassPointId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public DateTime SeasonStartDate;
    public DateTime SeasonEndDate;
    public Int32 NextSeasonId;
    public Int32 MidasProductId;
    public Int32 InfracorePoint;
    public String? PassPremiumNameLocalkey;
    public String? PassPremiumDescriptionLocalkey;
    public Int32 RankSkipId;
    public String? PassLogoResourceId;
    public String? PassLobbyButtonResourceId;
    public Int32 ShopNpcResourceId;
    public Int32 NpcCostumeId;
}

[MemoryPackable]
public partial class LobbyPrivateBannerRecord
{
    public Int32 Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public String? PrivateBannerResource;
    public Int32 PrivateBannerOrder;
    public Int32 PrivateBannerShowDuration;
    public Int32 EventId;
}

[MemoryPackable]
public partial class UserExpRecord
{
    public Int32 Level;
    public Int32 Exp;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class UserFrameRecord
{
    public Int32 Id;
    public String? ResourceId;
    public String? SubResourceId;
    public TabType TabType;
    public UserProfileType UserProfileType;
    public UserFrameFilterType FilterType;
    public Int32 Order;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Boolean IsSubResourcePrism;
}

[MemoryPackable]
public partial class ScenarioRewardsRecord
{
    public Int32 Id;
    public Condition ConditionType;
    public String? ConditionId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class ContentsFirstScenarioRecord
{
    public Int32 Id;
    public String? ViewType;
    public Int32 ViewValue;
    public String? EnterScenario;
}

[MemoryPackable]
public partial class MonsterSkillRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? SkillIcon;
    public SkillAniNumberType SkillAniNumber;
    public WeaponType WeaponType;
    public AttackType AttackType;
    public FireType FireType;
    public Int32 ShotCount;
    public ShotTimingType ShotTiming;
    public Int32 Penetration;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileHpRatio;
    public Int32 ProjectileDefRatio;
    public Int32 ProjectileRadiusObject;
    public Int32 ProjectileRadius;
    public Int32 SpotExplosionRange;
    public Boolean IsDestroyableProjectile;
    public Boolean RelateAnim;
    public Int32 DecelerationRate;
    public Int32 CastingTime;
    public List<String>? BreakObject;
    public Int32 BreakObjectHpRaito;
    public List<String>? MoveObject;
    public Int32 DelayTime;
    public MonsterSkillValueType SkillValueType01;
    public Int64 SkillValue01;
    public MonsterSkillValueType SkillValueType02;
    public Int64 SkillValue02;
    public Int32 TargetCharacterRatio;
    public Int32 TargetCoverRatio;
    public Int32 TargetNothingRatio;
    public WeaponObjectEnum WeaponObjectEnum;
    public Int32 CallingGroupId;
    public PreferTargetType PreferTarget;
    public Boolean ShowLockOn;
    public Int32 TargetCount;
    public List<String>? ObjectResource;
    public ObjectPositionType ObjectPositionType;
    public List<Double>? ObjectPosition;
    public Boolean IsUsingTimeline;
    public Int32 ControlGauge;
    public List<PartsType>? ControlParts;
    public CancelType CancelType;
    public PartsType LinkedParts;
}

[MemoryPackable]
public partial class ItemConsumeRecord
{
    public Int32 Id;
    public UseCondition UseConditionType;
    public Int32 UseConditionValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public ItemUseType UseType;
    public Int32 UseId;
    public PercentDisplayType PercentDisplayType;
    public Int32 UseValue;
    public Int32 UseFragCost;
    public Boolean UseLimitCount;
    public Int32 UseLimitCountValue;
    public Int32 StackMax;
}

[MemoryPackable]
public partial class ItemHarmonyCubeRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 LocationId;
    public String? LocationLocalkey;
    public Int32 Order;
    public Int32 ResourceId;
    public String? Bg;
    public String? BgColor;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public CharacterClassType Class;
    public Int32 LevelEnhanceId;
    public List<HarmonyCubeSkillGroupData>? HarmonycubeSkillGroup;
}

[MemoryPackable]
public partial class ItemHarmonyCubeLevelRecord
{
    public Int32 Id;
    public Int32 LevelEnhanceId;
    public Int32 Level;
    public List<SkillLevelData>? SkillLevels;
    public Int32 MaterialId;
    public Int32 MaterialValue;
    public Int32 GoldValue;
    public Int32 Slot;
    public List<HarmonyCubeStatData>? HarmonycubeStats;
}

[MemoryPackable]
public partial class BundleBoxRecord
{
    public Int32 Id;
    public Int32 UserExp;
    public Int32 CharacterExp;
    public Boolean IsMail;
    public List<RewardEntry>? Rewards;
}

[MemoryPackable]
public partial class CashShopRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
    public Int32 ProductOrder;
    public Int32 ProductDisplayStep;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public CashShopProductType ProductType;
    public Int32 ProductId;
    public Int32 ProductValue;
    public Int32 MidasProductId;
    public Int32 InfracorePoint;
    public Boolean IsActive;
}

[MemoryPackable]
public partial class CostumeShopRecord
{
    public Int32 Id;
    public Int32 ShopGroupId;
    public Int32 PackageGroupId;
    public DateTime StartDate;
    public DateTime EndDate;
    public CostumePriceType DiscountControl;
    public Int32 CostumeThemeGroupId;
    public Int32 ProductGrade;
    public Int32 CostumeId;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public Int32 MidasProductId;
    public Boolean IsActive;
}

[MemoryPackable]
public partial class MonthlyAmountRecord
{
    public Int32 Id;
    public Int32 OrderGroupId;
    public Int32 ProductEfficiency;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? DailyRewardInfo;
    public String? ProductResourceId;
    public Int32 BuyPackageGroupId;
    public Int32 DailyPackageGroupId;
    public Int32 Period;
    public Int32 PeriodWarningNoticeDay;
    public Int32 InfracorePoint;
    public Int32 MidasProductId;
}

[MemoryPackable]
public partial class CampaignPackageShopRecord
{
    public Int32 Id;
    public Int32 OrderGroupId;
    public Int32 PackageOrder;
    public Int32 PackageGroupId;
    public Int32 ProductEfficiency;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
    public Int32 InfracorePoint;
    public Int32 MidasProductId;
    public String? ShopDescriptionLocalkey01;
    public String? ShopDescriptionLocalkey02;
}

[MemoryPackable]
public partial class CharacterCostumeThemeRecord
{
    public Int32 Id;
    public String? CostumeThemeNameLocale;
    public String? CostumeThemeDescriptionLocale;
}

[MemoryPackable]
public partial class CharacterStatEnhanceRecord
{
    public Int32 Id;
    public Int32 GradeRatio;
    public Int64 GradeHp;
    public Int32 GradeAttack;
    public Int32 GradeDefence;
    public Int32 GradeEnergyResist;
    public Int32 GradeMetalResist;
    public Int32 GradeBioResist;
    public Int64 CoreHp;
    public Int32 CoreAttack;
    public Int32 CoreDefence;
    public Int32 CoreEnergyResist;
    public Int32 CoreMetalResist;
    public Int32 CoreBioResist;
}

[MemoryPackable]
public partial class CharacterShotRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? CameraWork;
    public WeaponType WeaponType;
    public FireType FireType;
    public AttackType AttackType;
    public CounterEnermy CounterEnermy;
    public InputType InputType;
    public Boolean IsTargeting;
    public PreferTargetType PreferTarget;
    public PreferTargetconditionType PreferTargetCondition;
    public Int32 Damage;
    public Int32 ShotCount;
    public Int32 MuzzleCount;
    public Int32 MultiTargetCount;
    public Int32 CenterShotCount;
    public ShotTimingType ShotTiming;
    public Int32 MaxAmmo;
    public Int32 MaintainFireStance;
    public Int32 UptypeFireTiming;
    public Int32 ReloadTime;
    public Int32 ReloadBullet;
    public Int32 ReloadStartAmmo;
    public Int32 RateOfFireResetTime;
    public Int32 RateOfFire;
    public Int32 EndRateOfFire;
    public Int32 RateOfFireChangePershot;
    public Int32 BurstEnergyPershot;
    public Int32 TargetBurstEnergyPershot;
    public Int32 Penetration;
    public Int32 SpotFirstDelay;
    public Int32 SpotLastDelay;
    public Int32 StartAccuracyCircleScale;
    public Int32 EndAccuracyCircleScale;
    public Int32 AccuracyChangePershot;
    public Int32 AccuracyChangeSpeed;
    public Int32 AutoStartAccuracyCircleScale;
    public Int32 AutoEndAccuracyCircleScale;
    public Int32 AutoAccuracyChangePershot;
    public Int32 AutoAccuracyChangeSpeed;
    public Int32 ZoomRate;
    public Int32 MultiAimRange;
    public Int32 SpotProjectileSpeed;
    public Int32 ChargeTime;
    public Int32 FullChargeDamage;
    public Int32 FullChargeBurstEnergy;
    public Int32 SpotRadiusObject;
    public Int32 SpotRadius;
    public Int32 SpotExplosionRange;
    public String? HomingScript;
    public Int32 CoreDamageRate;
    public List<Int32>? UseFunctionIdList;
    public List<Int32>? HurtFunctionIdList;
    public Int32 ShakeId;
    public CameraShakeType ShakeType;
    public Int32 ShakeWeight;
    public String? AimPrefab;
}

[MemoryPackable]
public partial class GachaGradeProbRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public OriginalRareType Rare;
    public Int32 Prob;
    public Int32 ProbMaxCount;
    public Int32 GachaListId;
    public Int32 CustomizeListId;
}

[MemoryPackable]
public partial class MultiRaidRecord
{
    public Int32 Id;
    public String? Name;
    public Int32 PlayerCount;
    public Int32 CharacterSelectTimeLimit;
    public Int32 CharacterLv;
    public Int32 StageLevel;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public Int32 SpotId;
    public Int32 MonsterStageLvChangeGroupEasy;
    public Int32 SpotIdEasy;
    public Int32 ConditionRewardGroup;
    public Int32 RewardLimitCount;
    public Int32 RankConditionRewardGroup;
}

[MemoryPackable]
public partial class InterceptSpecialRecord
{
    public Int32 Id;
    public Int32 Group;
    public String? Name;
    public String? ShortName;
    public String? Description;
    public String? Thumbnail;
    public String? MonsterSpine;
    public Int32 MonsterSpineScale;
    public Int32 Order;
    public Int32 CharacterLv;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public Int32 SpotId;
    public Int32 DummySpotId;
    public Int32 AutoChargeId;
    public Int32 TicketCount;
    public Int32 ConditionRewardGroup;
    public Int32 PercentConditionRewardGroup;
    public Boolean UseRewardPriority;
    public Int32 PriorityGrade;
    public Boolean UseFixedResult;
    public Int32 FixedDamage;
    public Int32 ResultCharacterResourceId;
}

[MemoryPackable]
public partial class ArenaRewardRecord
{
    public Int32 MinRank;
    public Int32 MaxRank;
    public Int32 DailyRewardId;
    public Int32 SeasonRewardId;
    public Int32 WinRewardValue;
}

[MemoryPackable]
public partial class ArenaRecord
{
    public Int32 Id;
    public ArenaType ArenaType;
    public String? Name;
    public Int32 Order;
    public String? Thumbnail;
    public Int32 FreePlayCount;
    public Int32 TicketId;
    public Int32 TicketValue;
    public Int32 TicketBuyCurrencyType;
    public Int32 TicketBuyCurrencyValue;
    public Int32 RecordMaxCount;
    public Int32 Round;
    public Int32 TimeLimit;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
    public Int32 ConditionRewardGroup;
    public Int32 VerificationTimeServer;
    public Int32 VerificationTimeClient;
}

[MemoryPackable]
public partial class ArenaChampionRecord
{
    public Int32 Id;
    public Int32 CharacterLv;
    public Int32 BettingRewardId;
    public String? BettingRewardMailKey;
    public Int32 TeamCount;
}

[MemoryPackable]
public partial class FieldTalkRecord
{
    public String? Id;
    public String? FieldPosition;
    public String? Position1;
    public String? Position2;
    public String? Position3;
    public String? Position4;
    public String? Position5;
    public String? Position6;
    public String? FieldTalkDialogGroupId;
}

[MemoryPackable]
public partial class AssistSquadRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public AssistSquadType AssistsquadType;
    public Int32 AssistsquadDistance;
    public Int32 AssistsquadMembercount;
    public String? AssistsquadPrefab;
    public AssistSquadMoveType AssistsquadMovetype;
    public AssistSquadControlType AssistsquadControltype;
    public Int32 AssistsquadSpeedRatio;
    public Int32 MarkerPosition;
}

[MemoryPackable]
public partial class OutpostBuildingSlotRecord
{
    public Int32 Id;
    public List<BuildingCategory>? BanBuildingCategory;
}

[MemoryPackable]
public partial class OutpostBattleRecord
{
    public Int32 Id;
    public Int32 BattleBoxLevel;
    public Int32 MainStageClearCount;
    public Int32 RewardId;
    public Int32 Credit;
    public Int32 TimeCredit;
    public Int32 CharacterExp1;
    public Int32 TimeCharexp1;
    public Int32 UserExp;
    public Int32 TimeUserExp;
    public Int32 CharacterExp2;
    public Int32 TimeCharexp2;
    public List<OutpostBattle_Data>? OutpostRewardList;
}

[MemoryPackable]
public partial class OutpostBattleBoxSettingRecord
{
    public Int32 Id;
    public Int32 RewardStepTime;
    public String? BuildingResourceId;
}

[MemoryPackable]
public partial class TacticAcademyFunctionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? NameLocalkey;
    public String? FunctionLocalkey;
    public LessonType LessonType;
    public List<LessonRewardData>? LessonReward;
    public Int32 CharacterConditionValue1;
    public Int32 CharacterConditionValue2;
    public Int32 CharacterConditionValue3;
    public List<LessonConditionData>? LessonCondition;
    public Int32 CurrencyId;
    public Int32 CurrencyValue;
}

[MemoryPackable]
public partial class TacticAcademyClassRecord
{
    public Int32 Id;
    public String? NameLocalkey;
}

[MemoryPackable]
public partial class LiberateTypeRecord
{
    public Int32 Id;
    public String? Name;
    public TypeOpenCondition TypeOpenCondition;
    public Int32 TypeOpenConditionId;
    public Int32 TypeOpenConditionValue;
    public String? ScenarioId;
    public Boolean IsHidden;
}

[MemoryPackable]
public partial class AlbumInfoRecord
{
    public Int32 Id;
    public Int32 CategoryGroupId;
    public Int32 SubCategoryId;
    public String? SubCategoryNameLocaltable;
    public String? SubCategoryNameLocalkey;
    public String? SubCategoryThumbnail;
    public String? AlbumListThumbnail;
    public Boolean IsHidden;
    public Boolean IsPlayNextScenario;
}

[MemoryPackable]
public partial class OutpostConditionTriggerRecord
{
    public Int32 Id;
    public List<TriggerData>? TriggerList;
    public EventType EventType;
    public Int32 Tid;
    public Int32 ResourceId;
    public String? NameLocalkey;
    public String? EnterScenarioId;
    public String? ExitScenarioId;
    public Int32 StaminaValue;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class ArenaFieldResourceRecord
{
    public Int32 Id;
    public ArenaType ArenaType;
    public Int32 TimeLimit;
    public String? FieldResource;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
}

[MemoryPackable]
public partial class CooperationEventDailyRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Day;
    public List<buff_data>? BuffData;
}

[MemoryPackable]
public partial class CooperationEventReportRecord
{
    public Int32 Id;
    public CooperationEventReportType ReportType;
    public Int32 ReportCheckTime;
    public Int32 ReportTotalTime;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDatingSimDialogConditionRecord
{
    public String? Id;
    public Int32 ManagerId;
    public String? EventPortraitResource;
    public List<DialogAppearDialogConditionListData>? DialogAppearDialogConditionList;
    public List<DialogAppearSelectionConditionListData>? DialogAppearSelectionConditionList;
    public String? DialogEventId;
    public Boolean IsShowStaminaConsumeIcon;
    public Boolean IsTurnOffOtherEvents;
}

[MemoryPackable]
public partial class EventDatingSimSelectionEventRecord
{
    public String? Id;
    public Int32 ManagerId;
    public String? DialogEventId;
    public String? SelectionDialogGroupId;
    public String? SelectionDialogId;
    public Boolean IsConsumeStamina;
    public Boolean IsUseSelectCondition;
    public List<SelectConditionListData>? SelectConditionList;
    public List<SelectDialogConditionListData>? SelectDialogConditionList;
    public EventDatingSimSelectionEventType SelectionEventType;
    public List<SelectionEventValueListData>? SelectionEventValueList;
}

[MemoryPackable]
public partial class ArchiveProgressEventRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 EventId;
    public FieldProgressEventTarget EventTarget;
    public Int32 ConditionMissionclear;
    public Int32 ConditionStageclear;
    public DateTime ConditionTime;
    public FieldProgressEventType EventType;
    public String? EventValue;
    public FieldProgressEventCheckCondition EventCheckCondition;
}

[MemoryPackable]
public partial class EventFieldNPCRecord
{
    public Int32 Id;
    public Int32 ListButtonIndex;
    public Int32 EventFieldId;
    public String? NpcLocalkeyName;
    public String? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public String? ForcedNameTagResource;
    public List<EventFieldNPCEventData>? EventFieldNpcEventDataList;
    public EventFieldNPCInteractionType InteractionType;
    public Int32 InteractionDistance;
    public String? ForcedInteractionMarker;
    public Boolean IsInteractionAfterEnd;
    public Int32 ProgressEventGroupId;
    public Boolean IsUseBalloonTalk;
    public String? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public Int32 BalloonAlwaysCycle;
}

[MemoryPackable]
public partial class ProgressEventRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 EventId;
    public FieldProgressEventTarget EventTarget;
    public Int32 ConditionMissionclear;
    public Int32 ConditionStageclear;
    public DateTime ConditionTime;
    public FieldProgressEventType EventType;
    public String? EventValue;
    public FieldProgressEventCheckCondition EventCheckCondition;
}

[MemoryPackable]
public partial class AlbumCategoryRecord
{
    public Int32 Id;
    public Int32 Group;
    public Boolean IsOutpost;
    public String? CategoryNameLocalkey;
    public String? CategoryDescriptionLocalkey;
    public String? NameTagLocalkey;
    public Boolean IsShowTotalCount;
}

[MemoryPackable]
public partial class AlbumResourceRecord
{
    public Int32 Id;
    public Int32 SubCategoryId;
    public String? ScenarioNameLocaltable;
    public ScenarioDialogTableType OverwriteScenarioDialogTableType;
    public String? ScenarioNameLocalkey;
    public String? ScenarioGroupId;
    public Int32 TargetChapter;
    public Boolean IsHidden;
    public DialogType Dialogtype;
}

[MemoryPackable]
public partial class ArcadeConfigRecord_Raw
{
    public String? Id;
    public String? Value;
}

[MemoryPackable]
public partial class ArcadeManagerRecord_Raw
{
    public Int32 Id;
    public Int32 TimeReferenceIdForActivate;
    public Int32 Order;
    public Boolean HasUnionRanking;
    public String? GameButtonResourceId;
    public String? GameImageResourceId;
    public String? GameUnionBannerResourceId;
    public String? GameTitleLocale;
    public ArcadeGameType GameType;
    public Int32 GameManagerId;
}

[MemoryPackable]
public partial class ArchiveEventDungeonDifficultRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public String? Name;
    public EventDungeonOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public Int32 StageGroup;
}

[MemoryPackable]
public partial class ArchiveEventDungeonSpotBattleRecord
{
    public Int32 Id;
    public List<EventDungeonOpenConditionObject>? OpenConditionList;
    public String? ShortName;
    public RewardType TicketItemType;
    public Int32 TicketItemId;
    public Int32 TicketItemCount;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Boolean SpotAutocontrol;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Int32 SpotId;
    public Int32 FirstClearRewardId;
    public Int32 ClearRewardId;
    public String? EnterScenario;
    public String? ExitScenario;
    public Int32 FixedPlayCharacterId;
    public Int32 CharacterLv;
    public QuickBattleType QuickBattleType;
    public Int32 QuickBattleTryMaxCount;
}

[MemoryPackable]
public partial class ArchiveEventDungeonStageRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Step;
    public String? StageName;
    public EventDungeonContentsType StageContentsType;
    public Int32 StageId;
    public Boolean IsRepeatClear;
    public Boolean IsGuideFieldChange;
    public String? MapChangeGuideLocalkey;
    public String? NpcChangeGuideLocalkey;
}

[MemoryPackable]
public partial class ArchiveEventDungeonRecord
{
    public Int32 Id;
    public String? PartName;
    public Int32 DifficultGroup;
}

[MemoryPackable]
public partial class ArchiveEventFieldCharCustomRecord
{
    public Int32 Id;
    public String? VoiceFieldGoSoundCue;
    public String? VoiceFieldTouchSoundCue;
}

[MemoryPackable]
public partial class ArchiveEventFieldCooperationRecord
{
    public Int32 Id;
    public String? MonsterNameLocalkey;
    public String? MonsterImage;
    public Int32 ElementId;
}

[MemoryPackable]
public partial class ArchiveEventFieldFixedSDCharRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventFieldSDCharacterUsageType UsageType;
    public Int32 Slot;
    public FieldFixedSDCharacterReferenceType TableReferenceType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public String? ScenarioCharacterId;
    public Int32 CharacterCustomId;
}

[MemoryPackable]
public partial class ArchiveEventFieldNPCRecord
{
    public Int32 Id;
    public Int32 ListButtonIndex;
    public Int32 EventFieldId;
    public String? NpcLocalkeyName;
    public String? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public String? ForcedNameTagResource;
    public List<ArchiveEventFieldNPCEventData>? EventFieldNpcEventDataList;
    public EventFieldNPCInteractionType InteractionType;
    public Int32 InteractionDistance;
    public String? ForcedInteractionMarker;
    public Boolean IsInteractionAfterEnd;
    public Boolean IsNotUsedInArchive;
    public Int32 ProgressEventGroupId;
    public Boolean IsUseBalloonTalk;
    public String? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public Int32 BalloonAlwaysCycle;
}

[MemoryPackable]
public partial class ArchiveEventFieldRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? FieldDesignMap;
    public String? FieldArtMapStandard;
    public String? FieldHud;
    public String? FieldFirstEntryResource;
    public Int32 LinkEventPassId;
    public Int32 ProgressEventGroupId;
    public Boolean IsUseRoamingNpc;
    public Int32 RoamingNpcLimit;
    public EventFieldRoamingNPCType RoamingNpcType;
    public Int32 RoamingNpcFixedSdCharacterGroupId;
    public Int32 RoamingNpcSpeedMinimum;
    public Int32 RoamingNpcSpeedMaximum;
    public FieldPlayerSquadType PlayerSquadType;
    public Int32 PlayerSquadValue;
    public Int32 PlayerSquadSpeed;
    public Int32 SdCharacterSize;
    public Int32 EventMissionGroup;
    public Int32 RecollectionHubGroupId;
    public String? FieldEnterScenario;
    public Int32 FieldEnterScenarioStoryArchiveId;
    public List<EventFieldCurrencyData>? EventFieldCurrencyList;
}

[MemoryPackable]
public partial class ArchiveEventManagerRecord
{
    public Int32 Id;
    public EventSystemType EventSystemType;
    public Boolean HasArcadeShortcutWithoutField;
    public Int32 ArcadeManagerId;
    public String? EventShortcutId;
    public Int32 ArchiveMatchEventId;
    public Int32 ArchiveStoryProgressGroupOrder;
    public String? ArchiveStoryProgressLocale;
    public DateTime EventStartDate;
    public DateTime EventEndDate;
    public Int32 ParentsEventId;
}

[MemoryPackable]
public partial class ArchiveEventMapChangePresetRecord
{
    public Int32 Id;
    public String? ArtMapChangeValue;
    public String? HudChangeValue;
    public String? InteractionMarkerChangeValue;
    public String? NameTagChangeValue;
    public String? SkyBoxChangeValue;
    public String? PpChangeValue;
}

[MemoryPackable]
public partial class ArchiveEventQuestManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EventNameLocalkey;
    public Int32 AlbumCategoryGroupId;
    public String? UiPrefab;
}

[MemoryPackable]
public partial class ArchiveEventQuestRecord_Raw
{
    public Int32 Id;
    public Int32 EventQuestManagerId;
    public Category ConditionType;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 NextQuestId;
    public String? EndScenarioId;
}

[MemoryPackable]
public partial class ArchiveEventStoryRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? PrologueScenario;
    public Int32 DungeonId;
    public Int32 AlbumCategoryGroup;
    public String? UiPrefab;
    public Int32 ArchiveTicketItemId;
    public Int32 ArchiveCurrencyItemId;
}

[MemoryPackable]
public partial class ArchiveIncludedContentsGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ContentTypeLocale;
    public Int32 Order;
    public Int32 TagInfoMinigameTutorialId;
    public String? TagResourceId;
    public String? UseRecommendedIconId;
}

[MemoryPackable]
public partial class ArchiveMessengerConditionRecord
{
    public Int32 Id;
    public Int32 ArchiveMessengerGroupId;
    public List<ArchiveMessengerConditionObject>? ArchiveMessengerConditionList;
    public String? Tid;
}

[MemoryPackable]
public partial class ArchiveRecommendedStoryListRecord
{
    public Int32 Id;
    public Int32 ListId;
    public String? RecommendedStoryTitleLocale;
    public ShortCutsInteractionType ShortcutsInteractionType;
    public Int32 StoryAlbumInfoId;
    public Int32 StoryArchiveRecordId;
}

[MemoryPackable]
public partial class ArchiveRecordManagerRecord
{
    public Int32 Id;
    public ArchiveRecordType RecordType;
    public String? RecordTitleLocale;
    public Int32 RecordMainArchiveEventId;
    public Int32 RecordListOrder;
    public Int32 UnlockTicketId;
    public Int32 UnlockTicketCount;
    public Int32 RewardInfoListId;
    public Int32 EventQuestClearRewardId;
    public Int32 RecommendedStoryListId;
    public Int32 MessengerGroupId;
    public Int32 IncludedContentsGroupId;
    public String? RecordSlotBgAddressable;
    public String? EventQuestBannerTable;
    public String? EventQuestBannerId;
    public String? RecordUnlockBgAddressable;
}

[MemoryPackable]
public partial class ArchiveRewardInfoListRecord
{
    public Int32 Id;
    public Int32 ListId;
    public String? RewardInfoTabLocale;
    public RewardDataLoadType RewardDataLoadType;
    public Int32 RewardDataLoadSubId;
}

[MemoryPackable]
public partial class ArenaChampionTotalRankRecord
{
    public Int32 Id;
    public Int32 Priority;
    public ArenaChampionTotalRankConditionType ConditionType;
    public Int32 ConditionValue;
    public String? Description;
    public Int32 RewardId;
    public String? MailKey;
}

[MemoryPackable]
public partial class ArenaChampionUnionRankRecord
{
    public Int32 Id;
    public Int32 Priority;
    public ArenaChampionUnionRankConditionType Condition;
    public String? Description;
    public Int32 RewardId;
    public String? MailKey;
}

[MemoryPackable]
public partial class AttractiveCounselCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 NameCode;
    public Int32 CollectRewardId;
    public String? CollectCharacterExpression;
}

[MemoryPackable]
public partial class AttractiveCounselRecord
{
    public Int32 Id;
    public Int32 NameCode;
    public Int32 AttractiveLevelMin;
    public Int32 AttractiveLevelMax;
    public String? CounselGroupId;
    public String? CounselNameLocalkey;
}

[MemoryPackable]
public partial class AttractiveLevelRewardRecord
{
    public Int32 Id;
    public Int32 NameCode;
    public Int32 AttractiveLevel;
    public String? ConditionScenarioGroupId;
    public String? ScenarioTitleLoacle;
    public String? AttractiveScenarioGroupId;
    public Int32 RewardId;
    public Int32 Costume;
}

[MemoryPackable]
public partial class AttractiveLevelRecord
{
    public Int32 Id;
    public Int32 AttractiveLevel;
    public Int32 AttractivePoint;
    public Int32 AttackerHpRate;
    public Int32 AttackerAttackRate;
    public Int32 AttackerDefenceRate;
    public Int32 AttackerEnergyResistRate;
    public Int32 AttackerMetalResistRate;
    public Int32 AttackerBioResistRate;
    public Int32 DefenderHpRate;
    public Int32 DefenderAttackRate;
    public Int32 DefenderDefenceRate;
    public Int32 DefenderEnergyResistRate;
    public Int32 DefenderMetalResistRate;
    public Int32 DefenderBioResistRate;
    public Int32 SupporterHpRate;
    public Int32 SupporterAttackRate;
    public Int32 SupporterDefenceRate;
    public Int32 SupporterEnergyResistRate;
    public Int32 SupporterMetalResistRate;
    public Int32 SupporterBioResistRate;
}

[MemoryPackable]
public partial class BannerRecord
{
    public Int32 Id;
    public BannerSystemType BannerSystemType;
    public String? BannerSystemSubId;
    public DateTime BannerVisibleDate;
    public DateTime BannerStartDate;
    public DateTime BannerEndDate;
    public DateTime BannerDisableDate;
    public String? BannerThumbnailResourceTable;
    public String? BannerThumbnailResourceId;
    public String? BannerResourceTable;
    public String? BannerResourceId;
    public Int32 EventOrder;
    public BannerPrintType BannerPrintType;
    public String? BannerThumbnailColor;
}

[MemoryPackable]
public partial class EventBBQTycoonCartoonCutSceneRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? CartoonCutscene;
    public String? CartoonCutsceneDescription;
    public Boolean IsAppearInFRank;
    public Boolean IsAppearInDRank;
    public Boolean IsAppearInCRank;
    public Boolean IsAppearInBRank;
    public Boolean IsAppearInARank;
    public Boolean IsAppearInSRank;
}

[MemoryPackable]
public partial class EventBBQTycoonCustomerRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? CustomerNameLocalkey;
    public String? CustomerResourcePrefab;
    public Int32 CustomerDifficulty;
    public Int32 CustomerLimitTime;
    public EventBBQTycoonCustomerBonusType BonusType;
    public Int32 CustomerAppearanceRate;
    public Int32 ConditionStageEventId;
    public Int32 CustomerAppearanceStageCondition;
    public Int32 SkewerStuffId1;
    public Int32 SkewerStuffId2;
    public Int32 SkewerStuffId3;
    public Int32 SkewerStuffId4;
    public Int32 SkewerStuffId5;
}

[MemoryPackable]
public partial class EventBBQTycoonManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiPrefab;
    public Int32 CustomerGroupId;
    public Int32 SkewerStuffGroupId;
    public Int32 TimeLimit;
    public Int32 CustomerVisitRate;
    public Int32 CustomerVisitRateDifficulty1Ratio;
    public Int32 CustomerVisitRateDifficulty2Ratio;
    public Int32 CustomerVisitRateDifficulty3Ratio;
    public Int32 PointStandard;
    public Int32 PointGradeRatioGreat;
    public Int32 PointGradeRatioGood;
    public Int32 PointGradeRatioBad;
    public Int32 FeverTargetGauge;
    public Int32 FeverStandardIncrease;
    public Int32 FeverGradeRatioGreat;
    public Int32 FeverGradeRatioGood;
    public Int32 FeverGradeRatioBad;
    public Int32 FeverTime;
    public Int32 FeverSkewerRoastDelay;
    public Int32 FirepowerIncreasePerTouch;
    public Int32 FirepowerDecreasePerSecond;
    public Int32 MaxFirepower;
    public Int32 MaxFirepowerRoastSpeedRatio;
    public Int32 TimeToBurnSkewer;
    public Int32 GrillMaxOverheatingTime;
    public Int32 GameStartActionTimeControl;
    public Int32 FeverStartActionTimeControl;
    public Int32 EndImminentAlertStartTime;
    public Int32 DailyRewardTargetPoint;
    public Int32 DailyRewardId;
    public Int32 StepUpRewardGroupId;
    public Int32 Difficulty2StartPoint;
    public Int32 Difficulty3StartPoint;
    public Int32 DRankTargetPoint;
    public Int32 CRankTargetPoint;
    public Int32 BRankTargetPoint;
    public Int32 ARankTargetPoint;
    public Int32 SRankTargetPoint;
    public String? FirstEnterScenarioGroupId;
    public Int32 CartoonCutsceneGroupId;
    public Int32 AlbumCategoryId;
    public String? AlbumDescriptionLocalkey;
    public Int32 ScenarioGroupId;
    public Int32 CustomerLimitExpireAlertTime;
    public Int32 CustomerExitDelayTime;
    public Int32 CustomerExitTime;
    public Int32 TutorialGroupId;
}

[MemoryPackable]
public partial class EventBBQTycoonScenarioRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ScenarioDialogGroupId;
    public Int32 ScenarioOutputCondition;
}

[MemoryPackable]
public partial class EventBBQTycoonSkewerStuffRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 UiIndex;
    public String? StuffNameLocalkey;
    public String? UiPortraitImage;
    public String? StuffResourcePrefab;
}

[MemoryPackable]
public partial class EventBBQTycoonStepUpRewardRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Step;
    public Int32 TargetPoint;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventBBQTycoonTutorialRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? TutorialResource;
    public String? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class BGMShopRecord_Raw
{
    public Int32 Id;
    public BGMShopType Shop;
    public String? BgmLoop;
}

[MemoryPackable]
public partial class BGMSpotThemeRecord
{
    public Int32 Id;
    public ThemeType Theme;
    public String? BgmLoop;
}

[MemoryPackable]
public partial class BGMTriggerRecord
{
    public Int32 Id;
    public BGMType BgmType;
    public BGMSubType BgmSubType;
    public String? TypeValue;
    public Int32 EventId;
    public Boolean Default;
    public BGMTriggerEventType BgmTriggerEventType;
    public Int32 BgmTriggerEventValue;
    public String? BgmLoop;
}

[MemoryPackable]
public partial class BonusRewardCharacterRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public Int32 CharacterNameCode;
    public Int32 BonusPercent;
}

[MemoryPackable]
public partial class BotCharacterRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public BotCategory BotCategory;
    public Int32 Slot;
    public Int32 CharacterId;
    public Int32 CharacterLevel;
    public Int32 AttractiveLevel;
    public List<bot_equipment_data>? EquipmentArray;
    public Int32 HarmonycubeId;
    public Int32 HarmonycubeLevel;
    public Int32 SkillLevel1;
    public Int32 SkillLevel2;
    public Int32 SkillLevel3;
    public Int32 RecycleLevelPersonal;
    public Int32 RecycleLevelCorporation;
    public Int32 RecycleLevelClass;
    public Int32 UserLevel;
    public Int32 NormalStageInfo;
    public Int32 HardStageInfo;
    public Int32 TowerInfo;
}

[MemoryPackable]
public partial class CampaignChapterRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 World;
    public Int32 Chapter;
    public OpenType OpenType;
    public DateTime OpenTime;
    public ChapterGuideType ChapterGuide;
    public String? ChapterImage;
    public String? HardChapterImage;
    public String? FieldId;
    public String? HardFieldId;
}

[MemoryPackable]
public partial class CampaignPackageGroupRecord
{
    public Int32 Id;
    public Int32 PackageGroupId;
    public CampaignPackageRewardType RewardType;
    public Int32 RewardOrder;
    public Boolean IsGoal;
    public Trigger Trigger;
    public Int32 TriggerConditionId;
    public Int32 TriggerConditionValue;
    public RewardType ProductType;
    public Int32 ProductId;
    public Int32 ProductValue;
}

[MemoryPackable]
public partial class CampaignStageRecord
{
    public Int32 Id;
    public Int32 ChapterId;
    public ChapterMod ChapterMod;
    public Int32 ParentsId;
    public Int32 GroupId;
    public String? NameLocalkey;
    public StageCategory StageCategory;
    public StageType StageType;
    public Boolean SpotAutocontrol;
    public Int32 EnterCondition;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Int32 FieldMonsterId;
    public Int32 SpotId;
    public Int32 RewardId;
    public ScenarioType EnterScenarioType;
    public String? EnterScenario;
    public ScenarioType ExitScenarioType;
    public String? ExitScenario;
    public Int32 CurrentOutpostBattleId;
    public Int32 ClearedOutpostBattleId;
    public Int32 FixedPlayCharacterId;
    public Int32 CharacterLv;
}

[MemoryPackable]
public partial class CharacterCostumeRecord
{
    public Int32 Id;
    public Int32 CostumeThemeGroupId;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public List<String>? AdditionalSkins;
    public CostumeGrade CostumeGradeId;
    public String? CostumeNameLocale;
    public String? CostumeDescriptionLocale;
    public CostumeShopType CostumeShopType;
    public Int32 CostumeShopPriceId;
    public Boolean IsHidden;
}

[MemoryPackable]
public partial class CharacterLevelRecord
{
    public Int32 Level;
    public CharacterLevelType Type;
    public Int32 NeedSynchroLvMin;
    public Int32 Gold;
    public Int32 CharacterExp;
    public Int32 CharacterExp2;
}

[MemoryPackable]
public partial class CharacterReactionRecord
{
    public Int32 Id;
    public CharacterReactionType ReactionType;
    public Int32 SpecialLobbyChangeStep;
    public Int32 CameraShake;
    public Int32 AttractiveLevelMin;
    public Int32 AttractiveLevelMax;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public Int32 EventlobbyId;
    public String? AnimationClip;
    public String? SpeechLocalkey;
    public String? RectionVoice;
    public Double Probability;
}

[MemoryPackable]
public partial class CharacterShotTutorialRecord_Raw
{
    public Int32 Id;
    public WeaponType WeaponType;
    public String? WeaponNameLocalkey;
    public String? WeaponInfoLocalkey;
    public String? TutorialVideo;
    public String? MaxLoadInfoLocalkey;
    public String? ReloadTimeInfoLocalkey;
    public String? ShotSpeedInfoLocalkey;
    public String? EffectiveRangeInfoLocalkey;
    public String? OperationTypeInfoLocalkey;
}

[MemoryPackable]
public partial class CharacterSkillRecord
{
    public Int32 Id;
    public AttackType AttackType;
    public CounterType CounterType;
    public PreferTargetType PreferTarget;
    public PreferTargetconditionType PreferTargetCondition;
    public Int32 SkillCooltime;
    public CharacterSkillType SkillType;
    public List<SkillValueData>? SkillValueData;
    public DurationType DurationType;
    public Int32 DurationValue;
    public List<Int32>? BeforeUseFunctionIdList;
    public List<Int32>? BeforeHurtFunctionIdList;
    public List<Int32>? AfterUseFunctionIdList;
    public List<Int32>? AfterHurtFunctionIdList;
    public String? ResourceName;
    public Int32 ShakeId;
    public String? Icon;
}

[MemoryPackable]
public partial class CharacterStatRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Level;
    public Int64 LevelHp;
    public Int32 LevelAttack;
    public Int32 LevelDefence;
    public Int32 LevelEnergyResist;
    public Int32 LevelMetalResist;
    public Int32 LevelBioResist;
}

[MemoryPackable]
public partial class CharacterRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ResourceId;
    public List<String>? AdditionalSkins;
    public Int32 NameCode;
    public Int32 Order;
    public OriginalRareType OriginalRare;
    public Int32 GradeCoreId;
    public Int32 GrowGrade;
    public Int32 StatEnhanceId;
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public CharacterClassType Class;
    public Int32 SurfaceCategory;
    public List<Int32>? ElementId;
    public Int32 CriticalRatio;
    public Int32 CriticalDamage;
    public Int32 ShotId;
    public Int32 BonusrangeMin;
    public Int32 BonusrangeMax;
    public BurstStep UseBurstSkill;
    public BurstStep ChangeBurstStep;
    public Int32 BurstApplyDelay;
    public Int32 BurstDuration;
    public Int32 UltiSkillId;
    public Int32 Skill1Id;
    public TableType Skill1Table;
    public Int32 Skill2Id;
    public TableType Skill2Table;
    public CategoryType EffCategoryType;
    public Int32 EffCategoryValue;
    public CategoryType CategoryType1;
    public CategoryType CategoryType2;
    public CategoryType CategoryType3;
    public String? CvLocalkey;
    public Squad Squad;
    public Int32 PieceId;
    public Boolean IsVisible;
    public Boolean PrismIsActive;
    public Boolean IsDetailClose;
}

[MemoryPackable]
public partial class CharacterVoiceCategoryRecord
{
    public Int32 Id;
    public Int32 Order;
    public String? CategoryDescription;
}

[MemoryPackable]
public partial class CharacterVoiceGroupRecord
{
    public Int32 Id;
    public Int32 SpeechGroupId;
    public Int32 CategoryGroup;
    public Int32 Order;
    public Boolean IsTeaser;
    public String? VoiceDescription;
    public Int32 ConditionAttractiveLevel;
    public String? SpeechId;
    public String? SpeechLocalkey;
}

[MemoryPackable]
public partial class CharacterVoiceRecord
{
    public Int32 Id;
    public VoiceTargetType VoiceType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
}

[MemoryPackable]
public partial class ConditionRewardRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Priority;
    public RewardConditionType Type;
    public Int64 ValueMin;
    public Int64 ValueMax;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class ContentsShopCurrencyOrderRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public PriceType PriceType;
    public Int32 PriceId;
}

[MemoryPackable]
public partial class ContentsShopInfoRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public ContentsShopDescriptionType DescriptionType;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class ContentsShopProductRecord
{
    public Int32 Id;
    public Int32 BundleId;
    public Int32 ProductOrder;
    public Int32 ProductProb;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public RewardType GoodsType;
    public Int32 GoodsId;
    public Int32 GoodsValue;
    public PriceType PriceType;
    public Int32 PriceId;
    public Int32 PriceValue;
    public Int32 DiscountProbId;
    public add_mark AddMark;
}

[MemoryPackable]
public partial class ContentsShopRenewRecord
{
    public Int32 Id;
    public Int32 RenewGroupId;
    public Int32 RenewStep;
    public CurrencyType PriceId;
    public Int32 PriceValue;
}

[MemoryPackable]
public partial class ContentsShopRecord
{
    public Int32 Id;
    public ShopType ShopType;
    public ShopCategoryType ShopCategory;
    public Int32 ShopNpcResourceId;
    public String? PriceColorNormal;
    public Boolean CurrencyInfoDisplayControl;
    public ContentsOpen OpenContents;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public RenewType RenewType;
    public Int32 RenewValue;
    public Int32 RenewGroupId;
    public Boolean IsRenewTimeDisplay;
    public Int32 StageId;
    public Int32 BundleId;
    public Int32 ShopInfoGroupId;
    public String? LogoResourceId;
    public String? BgResourceId;
    public Boolean IsBatchPurchase;
    public Int32 CurrencyOrderGroupId;
}

[MemoryPackable]
public partial class CooperationEventRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? Thumbnail;
    public CooperationEventContentsType ContentsType;
    public Int32 ContentsValue;
    public Int32 CooperationDailyGroup;
    public List<Int32>? CurrencyId;
    public String? UiPrefab;
}

[MemoryPackable]
public partial class CorporationInfoRecord
{
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public String? CorporationName;
    public String? CorporationDescription;
    public String? ResourceId;
}

[MemoryPackable]
public partial class CostRecord
{
    public Int32 Id;
    public List<CostData>? Costs;
}

[MemoryPackable]
public partial class CurrencyRecord
{
    public CurrencyType Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ResourceId;
    public Boolean IsVisibleToInventory;
    public Int64 MaxValue;
}

[MemoryPackable]
public partial class CustomPackageGroupRecord
{
    public Int32 Id;
    public Int32 CustomGroupId;
    public Int32 SlotNumber;
    public RewardType ProductType;
    public Int32 ProductId;
    public Int32 ProductValue;
}

[MemoryPackable]
public partial class CustomPackageShopRecord
{
    public Int32 Id;
    public Int32 CustomShopId;
    public Int32 CustomOrder;
    public Int32 PackageGroupId;
    public Int32 CustomGroupId;
    public Int32 CustomGroupCount;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public Boolean IsFree;
    public Int32 MidasProductId;
}

[MemoryPackable]
public partial class DailyEventRecord
{
    public Int32 Id;
    public Int32 EventId;
    public EventPhaseType EventPhaseType;
    public Int32 EventPhaseGroupId;
    public EventTargetType TargetType;
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public Boolean IgnoreEventPeriod;
    public Boolean IsStack;
    public EventSystemType ShortcutType;
    public Int32 ShortcutId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 PointValue;
    public Int32 RewardId;
    public Boolean IsMain;
}

[MemoryPackable]
public partial class DailyMissionEventSettingRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 OpenConditionDailyEventId;
    public String? LocaleButtonText;
    public String? ViewPrefabId;
}

[MemoryPackable]
public partial class DispatchBoardRecord
{
    public Int32 Id;
    public DispatchType DispatchType;
    public Int32 DispatchBoardLv;
    public String? DispatchBoardDescription;
    public Int32 DispatchMax;
    public List<DispatchBoardData>? DispatchList;
}

[MemoryPackable]
public partial class DispatchRecord
{
    public Int32 Id;
    public DispatchType DispatchType;
    public Int32 DispatchGroup;
    public SelectType SelectType;
    public Int32 SelectOrder;
    public Int32 DispatchGradeId;
    public String? DispatchName;
    public String? DispatchDescription;
    public Int32 SlotMax;
    public List<DispatchGrade_Data>? DispatchSlotArray;
    public Int32 RewardId;
    public Int32 TimeMin;
}

[MemoryPackable]
public partial class DrawRewardPoolRecord_Raw
{
    public Int32 Id;
    public Int32 PoolId;
    public RewardType RewardType;
    public Int32 RewardId;
    public Int32 RewardCnt;
    public Int32 Weight;
    public Int32 MaxCnt;
    public Int32 MaxDrawCnt;
}

[MemoryPackable]
public partial class EchoDialogFieldTriggerRecord_Raw
{
    public Int32 Id;
    public EchoDialogFieldType FieldType;
    public EchoDialogFieldDifficultyType FieldDifficulty;
    public Int32 FieldId;
    public Boolean IsArchiveData;
    public EchoDialogTriggerType TriggerType;
    public Boolean IsShowApproachSignal;
    public String? MarkerResource;
    public String? DialogFilterResource;
    public Int32 DialogGroupId;
    public Int32 DialogGroupStartDelay;
    public Int32 DialogGroupEndDelay;
    public Boolean IsAwakeLoad;
    public Int32 SpawnConditionStage;
    public Int32 ConditionCheckStageEventId;
    public DateTime SpawnConditionTime;
    public Int32 SpawnConditionEchoTrigger;
    public Boolean IsChangeJukebox;
    public Int32 JukeboxId;
    public Int32 JukeboxStartPosition;
    public Int32 EnvironmentalSoundDecrease;
}

[MemoryPackable]
public partial class EchoDialogNPCRecord_Raw
{
    public String? Id;
    public String? NpcPrefab;
    public String? NpcName;
    public Boolean IsAlwaysSpawn;
    public String? NpcSpawnEffect;
    public String? NpcDespawnEffect;
}

[MemoryPackable]
public partial class EchoDialogRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? EchoDialogNpcId;
    public String? NameTagColor;
    public String? DialogLocalkey;
    public Int32 DialogPrintTiming;
    public String? BalloonResource;
    public String? Voice;
    public String? PlaySfx;
}

[MemoryPackable]
public partial class ElementRecord
{
    public Int32 Id;
    public AttackType Element;
    public Int32 GroupId;
    public Int32 WeakElementId;
    public String? ElementNameLocalekey;
    public String? ElementCodeNameLocalekey;
    public String? ElementDescLocalekey;
    public String? ElementIcon;
    public String? ElementDescSurfaceLocalekey;
}

[MemoryPackable]
public partial class EquipmentOptionCostRecord
{
    public Int32 Id;
    public Int32 CostGroupId;
    public Int32 CostLevel;
    public Int32 DisposableFixCostLevel;
    public Int32 CostId;
    public Int32 DisposableFixCostId;
}

[MemoryPackable]
public partial class EquipmentOptionRecord
{
    public Int32 Id;
    public String? DescriptionLocalkey;
    public Int32 EquipmentOptionGroupId;
    public Int32 OptionGroupRatio;
    public Int32 StateEffectGroupId;
    public List<StateEffectList>? StateEffectList;
    public Int32 OptionRatio;
}

[MemoryPackable]
public partial class EventBBQTycoonArcadeManagerRecord_Raw
{
    public Int32 Id;
    public Int32 ArcadeEventId;
    public Int32 ExistManagerId;
    public Int32 StepUpRewardGroupId;
    public Int32 HelpTipViewSubId;
}

[MemoryPackable]
public partial class EventBBQTycoonArchiveManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 ExistManagerId;
    public Int32 HelpTipViewSubId;
}

[MemoryPackable]
public partial class EventBHBackGroundRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? BackgroundResource;
    public List<String>? UseFog;
    public String? BarricadeResource;
    public Int32 ChangeBackgroundWaveId;
}

[MemoryPackable]
public partial class EventBHCharacterLevelRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Lv;
    public Boolean MinLv;
    public Boolean MaxLv;
    public Int32 Exp;
    public Int32 LevelUpSelectPassiveId;
}

[MemoryPackable]
public partial class EventBHCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? UiCharacterResource;
    public String? CharacterResource;
    public String? CharacterWeaponResource;
    public String? NameLocale;
    public String? SkillNameLocale;
    public String? SkillDescriptionLocale;
    public String? SkillIcon;
    public Int32 OpenDate;
    public String? OpenConditionLocale;
    public Int32 StartHp;
    public Int32 CharacterExpGroup;
    public BHCharacterSkillType SkillType;
    public List<BHSkillValueData_Raw>? SkillValue;
    public List<SkillResourceData_Raw>? SkillResource;
    public Boolean SkillInfinity;
    public Int32 SkillUseCount;
    public Int32 SkillCooltime;
    public Int32 DefaultWeapon;
    public Int32 InventoryGroupId;
}

[MemoryPackable]
public partial class EventBHCollectionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 WeaponId;
    public Int32 Order;
}

[MemoryPackable]
public partial class EventBHInGamePassiveRecord_Raw
{
    public Int32 Id;
    public List<Int32>? FirstSlotUsePassiveGroupId;
    public List<Int32>? SecondSlotUsePassiveGroupId;
    public List<Int32>? ThirdSlotUsePassiveGroupId;
    public List<Int32>? FourthSlotUsePassiveGroupId;
}

[MemoryPackable]
public partial class EventBHInventoryRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 RowNumber;
    public List<InventorySlotData_Raw>? Slot;
}

[MemoryPackable]
public partial class EventBHManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EnterScenario;
    public Boolean IsArchive;
    public Int32 CharacterGroupId;
    public Int32 UseWaveGroupId;
    public Int32 BackgroundGroupId;
    public String? BarricadeResource;
    public String? BackgroundFogResource;
    public Int32 CharacterMonsterMinDistance;
    public Int32 DefaultExpRatio;
    public Int32 MinionExp;
    public Int32 EliteExp;
    public Int32 BossExp;
    public Int32 MinionPoint;
    public Int32 ElitePoint;
    public Int32 BossPoint;
    public Int32 MinionDropGold;
    public Int32 EliteDropGold;
    public Int32 BossDropGold;
    public Int32 CriticalProbability;
    public Int32 CriticalDamageRatio;
    public Int32 SameWeaponGroupShootDelay;
    public Int32 DefaultShopItemCount;
    public Int32 MaximumKeepWeaponCount;
    public Int32 DefaultRerollCount;
    public Int32 GoldRerollUseGold;
    public Int32 DefaultBanWeaponCount;
    public Int32 MinReloadCooltime;
    public Int32 EnhanceGroupId;
    public Int32 CollectionGroupId;
    public Int32 IngamePassiveSelectRow;
    public Int32 IngamePassiveAddRow;
    public String? StartBackgroundResource;
    public Int32 MinionKnockBackCooltime;
    public Int32 EliteKnockBackCooltime;
    public Int32 BossKnockBackCooltime;
    public Int32 DailyMissionPoint;
    public Int32 DailyMissionReward;
    public Int32 ScoreLimitPerGame;
}

[MemoryPackable]
public partial class EventBHMissionRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public EventBHConditionType ConditionType;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 Order;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventBHMonsterRecord_Raw
{
    public Int32 Id;
    public String? MonsterResource;
    public Int32 MonsterSize;
    public BHMonsterType MonsterType;
    public BHMonsterAttackType MonsterAtkType;
    public BHMonsterSkillType MonsterSkillType;
    public List<MonsterSkillValueData_Raw>? MonsterSkillValue;
    public String? ProjectileResource;
    public Int32 ProjectileSpeed;
    public Int32 MonsterMoveSpeed;
    public Int32 MonsterHp;
    public Boolean ShowHp;
    public Int32 MonsterAtk;
    public Int32 MonsterDef;
    public Int32 MonsterAtkCooltime;
    public Int32 MonsterAtkRange;
    public String? DeadFxResource;
}

[MemoryPackable]
public partial class EventBHOutGamePassiveRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 UsePassiveGroupId;
}

[MemoryPackable]
public partial class EventBHPassiveRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public BHPassiveType PassiveType;
    public String? PassiveIcon;
    public String? NameLocale;
    public BHPassiveSkillType SkillType;
    public List<PassiveSkillValueData_Raw>? PassiveSkillValue;
    public String? SkillLocale;
    public List<Int32>? LinkWeaponGroupId;
    public Int32 PassiveLevel;
    public Boolean MaxLevel;
    public Int32 LevelUpCost;
    public Boolean RepeatedAcquisition;
    public Int32 AppearanceAbleCharacterLevel;
    public Int32 AppearanceValue;
    public Int32 AddAppearanceValue;
}

[MemoryPackable]
public partial class EventBHShopRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 UseWeaponId;
    public Int32 WeaponAppearanceValue;
    public Int32 Level1AppearanceValue;
    public Int32 Level2AppearanceValue;
    public Int32 Level3AppearanceValue;
    public Int32 Level4AppearanceValue;
    public Int32 AddWeaponAppearanceValue;
}

[MemoryPackable]
public partial class EventBHTutorialRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 TutorialPageId;
    public BHTutorialOutputType TutorialOutputType;
    public Int32 TutorialOutputValue;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class EventBHWavePresetRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SpawnMonsterId;
    public Boolean RandomSpawn;
    public Int32 SpawnPoint;
    public Boolean BossSpawn;
    public Int32 MonsterSpawnTime;
    public Int32 MonsterHpRatio;
    public Int32 MonsterAtkRatio;
    public Int32 MonsterDefRatio;
    public Int32 MonsterMoveSpeedRatio;
}

[MemoryPackable]
public partial class EventBHWaveRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Boolean IsSettingStep;
    public Boolean IsFinalWave;
    public Int32 WaveOrder;
    public Int32 WavePresetGroupId;
    public Boolean WaveRepeat;
    public Int32 WaveRepeatCount;
    public Boolean IsInventoryUpgrade;
    public Int32 InventoryUpgradePoint;
    public Boolean IsOpenShop;
    public Int32 ShopGroupId;
    public Int32 PointAndGoldRatio;
}

[MemoryPackable]
public partial class EventBHWeaponShapeRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 RowNumber;
    public List<SlotData_Raw>? Slot;
}

[MemoryPackable]
public partial class EventBHWeaponRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? NameLocale;
    public String? DescriptionLocale;
    public String? WeaponResource;
    public String? WeaponIcon;
    public Int32 WeaponSize;
    public Int32 WeaponOpenDate;
    public Int32 WeaponLevel;
    public Boolean MaxLevel;
    public EventBHWeaponType WeaponType;
    public EventBHFocusTargetType FocusTargetType;
    public EventBHWeaponAtkType WeaponAtkType;
    public EventBHWeaponTagType WeaponTag;
    public String? ProjResource;
    public String? ProjHitResource;
    public Int32 ProjLifeTime;
    public Int32 ProjSpeed;
    public Int32 ProjSize;
    public Int32 OneShotProjAmount;
    public Int32 TotalProjAmount;
    public Int32 ProjAtkTerm;
    public Boolean ProjPierce;
    public Int32 ProjKnockbackValue;
    public Boolean ContactExplosion;
    public Int32 ExplosionRange;
    public String? ExplosionResource;
    public String? RangeAtkResource;
    public Int32 RangeAtkRange;
    public Int32 RangeAtkDuration;
    public Int32 RangeAtkTerm;
    public Int32 RangeAtkAngle;
    public Int32 WeaponAtk;
    public Int32 WeaponReloadTime;
    public Int32 AtkStartRange;
    public List<SkillData01_Raw>? SkillData01;
    public List<SkillData02_Raw>? SkillData02;
}

[MemoryPackable]
public partial class EventBoxGachaPriceRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Count;
    public RewardType ItemType;
    public Int32 ItemId;
    public Int32 ItemCount;
}

[MemoryPackable]
public partial class EventBoxGachaProbRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Count;
    public Int32 Order;
    public Int32 Rate;
}

[MemoryPackable]
public partial class EventBoxGachaRewardRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public Int32 Tier;
    public RewardType ItemType;
    public Int32 ItemId;
    public Int32 ItemCount;
}

[MemoryPackable]
public partial class EventBoxGachaRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? Name;
    public String? Description;
    public Boolean OnInfo;
    public String? InfoDescription;
    public RewardType EventItemType;
    public Int32 FreeTicketItemId;
    public Int32 EventItemId;
    public Int32 PriceGroup;
    public Int32 ProbGroup;
    public Int32 GachaRewardGroup;
    public Int32 ShopId;
    public String? UiPrefab;
    public String? GachaMovie;
    public String? RemainPeriodTextColor;
}

[MemoryPackable]
public partial class EventBTGBgRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Order;
    public String? BgConditionMapId;
    public String? BgMiResourceId;
    public String? BgResourceId;
    public String? BgNameLocalkey;
    public String? BgDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventBTGConfigRecord_Raw
{
    public String? Id;
    public String? Value;
}

[MemoryPackable]
public partial class EventBTGCutSceneRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Order;
    public CutSceneConditionType CutsceneConditionType;
    public String? CutsceneResourceId;
    public String? CutsceneNameLocalkey;
    public String? CutsceneDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventBTGManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EnterScenario;
    public Int32 DailyRewardPoint;
    public Int32 DailyRewardId;
    public Int32 TutorialId;
    public Int32 CGradeMin;
    public Int32 BGradeMin;
    public Int32 AGradeMin;
    public Int32 SGradeMin;
    public Int32 BtgScoreLimitPerGame;
    public String? UiPrefab;
}

[MemoryPackable]
public partial class EventBTGMapRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 ConditionValue;
    public Int32 Order;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public String? SiResourceId;
    public Int32 Size;
}

[MemoryPackable]
public partial class EventBTGMissionRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public EventBTGMissionConditionType ConditionType;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 Order;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventBTGMuzzleSetRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 SetScore;
    public List<ObjectId_Raw>? ObjectIdList;
}

[MemoryPackable]
public partial class EventBTGObjectInfoRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 ChangeTo;
    public Int32 MergePoint;
    public Int32 Size;
    public Int32 WeightLevel;
    public Int32 SkillBTargetLevel;
    public String? ResourceId;
    public Int32 Bounciness;
    public Boolean IsStratched;
}

[MemoryPackable]
public partial class EventBTGSkillRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public BTGSkillType SkillType;
    public Int32 SkillUseValue;
}

[MemoryPackable]
public partial class EventBubbleMarchAdvantageDamageRecord_Raw
{
    public Int32 Id;
    public Int32 AdvantageCharacterGroup;
    public Int32 AdvantageMonsterGroup;
    public Int32 AdvantageDamageValue;
}

[MemoryPackable]
public partial class EventBubbleMarchBuffRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? BuffDescriptionLocalkey;
    public String? ResourceId;
    public Int32 SlotOrder;
    public Int32 BuffLevel;
    public EBMBuffType BuffType;
    public Int32 BuffValue;
    public Int32 UpgradeCostCurrencyId;
    public Int32 UpgradeCostCurrencyValue;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterLevelRecord_Raw
{
    public Int32 Id;
    public Int32 LevelGroup;
    public Int32 LevelMin;
    public Int32 LevelMax;
    public Int32 SummonCost;
    public Int32 NeedCost;
    public Int32 IncreaseAttack;
    public Int32 IncreaseHp;
    public Int32 BubbleCount;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterSkillRecord_Raw
{
    public Int32 Id;
    public Int32 SkillGroup;
    public String? DescriptionLocalkey;
    public Int32 BattleRadius;
    public EBMCharacterSkillTargetType Target;
    public EBMCharacterSkillTargetPositionType TargetPosition;
    public Int32 TargetPositionValue1;
    public Int32 TargetPositionValue2;
    public EBMCharacterSkillType SkillType;
    public Int32 SkillValue;
    public Int32 SkillHitCount;
    public Int32 KnockBackDamage;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileParabolaHeight;
    public Int32 RemainTime;
    public Int32 CoolTime;
    public String? AnimationSkill;
    public Int32 AnimationSkillSpeed;
    public String? EffectMuzzle;
    public String? EffectProjectile;
    public String? EffectSkill;
    public String? EffectImpact;
    public Int32 EffectImpactScale;
    public String? EffectHit;
    public String? EffectHitDefault;
    public EBMCharacterSkillAreaType AreaType;
    public Int32 AreaRemainTime;
    public Int32 AreaActionTime;
    public EBMCharacterSkillType AreaSkillType;
    public Int32 AreaSkillValue;
    public String? EffectArea;
    public Int32 EffectAreaScale;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 CharacterGroup;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public EBMCharacterType CharacterType;
    public EBMCharacterGradeType Grade;
    public Int32 TeamSetOrder;
    public String? ResourceId;
    public String? CharacterPrefab;
    public Int32 LevelGroup;
    public Int32 SkillGroup;
    public Int32 AdvantageGroup;
    public Int32 Attack;
    public Int32 Hp;
    public Int32 KnockBackMax;
    public Int32 MoveSpeed;
    public Int32 SummonCooltime;
    public Int32 SummonStack;
    public Int32 Scale;
    public Int32 ShadowScale;
    public Int32 PrefabHeightPosition;
    public EBMSearchTargetType SearchTargetType;
    public Int32 SearchRadius;
    public EBMCharacterDiscoverType DiscoverType;
    public Int32 DiscoverValue;
    public String? AnimationSummon;
    public String? AnimationStand;
    public String? AnimationMove;
    public Int32 AnimationMoveSpeed;
    public String? AnimationKnockBack;
    public Int32 AnimationKnockBackDistance;
    public String? AnimationDeath;
    public String? EffectSummon;
    public String? EffectDeath;
    public String? EffectEdge;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterUnlockRecord_Raw
{
    public Int32 Id;
    public Int32 CategoryGroupId;
    public String? CategoryLocalkey;
    public Int32 SlotOrder;
    public Boolean UseUnlockCondition;
    public Int32 UnlockCharacterId;
    public Int32 UnlockConditionCharacter;
    public Int32 UnlockConditionDay;
    public Int32 UnlockCurrencyId;
    public Int32 UnlockCurrencyValue;
}

[MemoryPackable]
public partial class EventBubbleMarchCurrencyLevelRecord_Raw
{
    public Int32 Id;
    public Int32 LevelGroup;
    public Int32 LevelMin;
    public Int32 LevelMax;
    public Int32 NeedCost;
    public Int32 IncreaseCurrencyCount;
}

[MemoryPackable]
public partial class EventBubbleMarchCurrencyRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public Boolean IsServer;
}

[MemoryPackable]
public partial class EventBubbleMarchLoadingRecord_Raw
{
    public Int32 Id;
    public String? LoadingTipLocalkey;
    public Int32 Order;
}

[MemoryPackable]
public partial class EventBubbleMarchManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public MiniGameSystemType MinigameType;
    public String? UiPrefab;
    public String? EnterScenario;
    public Int32 HelptipHubGroup;
    public Int32 SummonCurrencyId;
    public Int32 SummonCurrencyLevelGroup;
    public Int32 SummonCurrencyCount;
    public Int32 TimeScale;
    public Int32 ZoomInValue;
    public Int32 SingleTargetMissRange;
    public Int32 StageManagerGroup;
    public Int32 CharacterGroup;
    public Int32 MissionGroup;
    public Int32 ChallengeLastWaveOrder;
    public Int32 ChallengeRepeatWaveOrder;
    public Int32 ChallengeWaveMax;
    public Int32 ChallengeRepeatSummonTimeStartWave;
    public Int32 ChallengeRepeatSummonTimeGroup;
    public Int32 ChallengeRepeatSummonTimeValue;
    public Boolean IsStackMinion;
}

[MemoryPackable]
public partial class EventBubbleMarchMissionRecord_Raw
{
    public Int32 Id;
    public Int32 MissionGroup;
    public EventBubbleMarchMissionType MissionType;
    public EventBubbleMarchMissionConditionType ConditionType;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 PointValue;
    public Int32 Order;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterLevelRecord_Raw
{
    public Int32 Id;
    public Int32 LevelGroup;
    public Int32 LevelMin;
    public Int32 LevelMax;
    public Int32 SummonCurrencyReward;
    public Int32 IncreaseAttack;
    public Int32 IncreaseHp;
    public Int32 BubbleCount;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterSkillRecord_Raw
{
    public Int32 Id;
    public Int32 SkillGroup;
    public Int32 BattleRadius;
    public EBMCharacterSkillTargetType Target;
    public EBMCharacterSkillTargetPositionType TargetPosition;
    public Int32 TargetPositionValue1;
    public Int32 TargetPositionValue2;
    public EBMCharacterSkillType SkillType;
    public Int32 SkillValue;
    public Int32 SkillHitCount;
    public Int32 KnockBackDamage;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileParabolaHeight;
    public Int32 RemainTime;
    public Int32 CoolTime;
    public String? AnimationSkill;
    public Int32 AnimationSkillSpeed;
    public String? EffectMuzzle;
    public String? EffectProjectile;
    public String? EffectSkill;
    public String? EffectImpact;
    public Int32 EffectImpactScale;
    public String? EffectHit;
    public String? EffectHitDefault;
    public EBMCharacterSkillAreaType AreaType;
    public Int32 AreaRemainTime;
    public Int32 AreaActionTime;
    public EBMCharacterSkillType AreaSkillType;
    public Int32 AreaSkillValue;
    public String? EffectArea;
    public Int32 EffectAreaScale;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public EBMMonsterType MonsterType;
    public EBMMonsterPositionType MonsterPosition;
    public Int32 HeightPosition;
    public EBMMonsterAttackType MonsterAttackType;
    public String? ResourceId;
    public String? MonsterPrefab;
    public Int32 LevelGroup;
    public Int32 SkillGroup;
    public Int32 AdvantageGroup;
    public Int32 Attack;
    public Int32 Hp;
    public Int32 KnockBackMax;
    public Int32 MoveSpeed;
    public Int32 Scale;
    public Int32 ShadowScale;
    public Int32 PrefabHeightPosition;
    public EBMSearchTargetType SearchTargetType;
    public Int32 SearchRadius;
    public EBMCharacterDiscoverType DiscoverType;
    public Int32 DiscoverValue;
    public String? AnimationSummon;
    public String? AnimationStand;
    public String? AnimationMove;
    public Int32 AnimationMoveSpeed;
    public String? AnimationKnockBack;
    public Int32 AnimationKnockBackDistance;
    public String? AnimationDeath;
    public String? EffectSummon;
    public String? EffectDeath;
}

[MemoryPackable]
public partial class EventBubbleMarchSpawnPositionRecord_Raw
{
    public Int32 Id;
    public Int32 XPosition;
    public Int32 YPosition;
}

[MemoryPackable]
public partial class EventBubbleMarchStageManagerRecord_Raw
{
    public Int32 Id;
    public Int32 StageManagerGroup;
    public EBMDifficultyType DifficultyType;
    public Int32 DifficultyGroupId;
    public String? NameLocalkey;
    public Int32 OpenConditionStage;
    public Int32 OpenConditionDay;
}

[MemoryPackable]
public partial class EventBubbleMarchStageSummonSeedRecord_Raw
{
    public Int32 Id;
    public Int32 SeedGroup;
    public List<EBMSummonGroupData_Raw>? EbmSummonGroupData;
}

[MemoryPackable]
public partial class EventBubbleMarchStageSummonTimeRecord_Raw
{
    public Int32 Id;
    public Int32 SummonTimeGroup;
    public EBMSummonTimeRepeatType RepeatType;
    public Int32 TimeCondition;
    public Int32 SeedGroup;
    public EBMSummonSeedType SummonSeedType;
}

[MemoryPackable]
public partial class EventBubbleMarchStageRecord_Raw
{
    public Int32 Id;
    public Int32 DifficultyGroupId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 StageOrder;
    public Int32 WaveGroup;
    public Int32 MonsterLevelBase;
    public Int32 CharacterMaxLevel;
    public Int32 SummonCurrencyMaxLevel;
    public Int32 SummonCurrencyGetSecond;
    public Int32 TimeLimit;
    public Int32 FriendlyTowerId;
    public Int32 FriendlyTowerLevel;
    public Int32 OpenConditionStage;
    public Int32 OpenConditionDay;
    public Int32 FirstRewardCurrencyId;
    public Int32 FirstRewardCurrencyValue;
    public Int32 RepeatRewardCurrencyId;
    public Int32 RepeatRewardCurrencyValue;
    public Int32 TutorialId;
}

[MemoryPackable]
public partial class EventBubbleMarchStageWaveRecord_Raw
{
    public Int32 Id;
    public Int32 WaveGroup;
    public Int32 WaveOrder;
    public String? WaveResourcePrefab;
    public String? WaveFrontResource;
    public Int32 WaveResourceLength;
    public Int32 SummonCurrencyGetValue;
    public Int32 WaveSkipConditionStage;
    public Int32 WaveSkipGiveCurrency;
    public Int32 SummonTimeGroup;
    public Int32 SummonMaxCount;
    public EBMEnemyTargetType EnemyTargetType;
    public Int32 EnemyTargetId;
    public Int32 EnemyTargetLevelAdd;
    public Int32 MonsterLevelAdd;
    public Int32 FriendlyTowerLevelAdd;
}

[MemoryPackable]
public partial class EventBubbleMarchTutorialRecord_Raw
{
    public Int32 Id;
    public Int32 HelptipId;
    public EventBubbleMarchTutorialCondition HelptipActiveCondition;
}

[MemoryPackable]
public partial class EventCanCollectListRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 FieldItemId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? IconResource;
    public Int32 Order;
    public Int32 CollectRank;
    public Int32 PlayAnim1;
    public Int32 PlayAnim1Ratio;
    public Int32 PlayAnim2;
    public Int32 PlayAnim2Ratio;
    public Int32 PlayAnim3;
    public Int32 PlayAnim3Ratio;
    public Int32 PlayAnim4;
    public Int32 PlayAnim4Ratio;
    public Int32 PlayAnim5;
    public Int32 PlayAnim5Ratio;
    public Int32 CamBlendTime;
    public Int32 CamEndDelay;
    public String? CollectSpawnHint;
}

[MemoryPackable]
public partial class EventCanCollectProgressRewardRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Order;
    public Int32 GoalValue;
    public Int32 RewardId;
    public String? RewardDescription;
}

[MemoryPackable]
public partial class EventCatchCoinChallengeStageRecord
{
    public Int32 Id;
    public Int32 CharacterId;
    public Int32 TimeDifficultGroup;
    public Int32 Life;
    public String? Resource;
    public Int32 PointLimit;
}

[MemoryPackable]
public partial class EventCatchCoinCharacterRecord
{
    public Int32 Id;
    public String? Resource;
    public Int32 MoveSpeed;
    public Int32 DashRange;
    public Int32 DashSpeed;
}

[MemoryPackable]
public partial class EventCatchCoinObjectGroupRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 ObjectId;
    public Int32 SpawnRate;
}

[MemoryPackable]
public partial class EventCatchCoinObjectRecord
{
    public Int32 Id;
    public String? Resource;
    public EventCatchCoinObjectType Type;
    public Int32 TypeValue;
    public Int32 BaseFallSpeed;
}

[MemoryPackable]
public partial class EventCatchCoinStoryStageRecord
{
    public Int32 Id;
    public Int32 CharacterId;
    public Int32 ClearPoint;
    public String? ClearConditionDesc;
    public Int32 TimeDifficultGroup;
    public Int32 Life;
    public String? Resource;
}

[MemoryPackable]
public partial class EventCatchCoinTimeDifficultRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Lv;
    public Int32 PlayTimeMin;
    public Int32 PlayTimeMax;
    public Int32 SpawnTick;
    public Int32 SpawnGroup;
    public Int32 SpawnCountMin;
    public Int32 SpawnCountMax;
    public Int32 ObjectFallSpeedRate;
}

[MemoryPackable]
public partial class EventCE002MiniGameArchiveRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ArchiveName;
    public String? ArchiveDescription;
    public String? ArchiveImageResource;
}

[MemoryPackable]
public partial class EventCE002MiniGameDataRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public List<EventCE002MiniGameDataOpenConditionObject>? OpenConditionList;
    public String? Ce002MinigameDataName;
    public Int32 FieldNpcId;
    public String? FieldNpcLocationName;
    public String? FieldNpcHintResource;
    public Int32 IndicatorDelayTime;
    public Int32 StageId;
    public Int32 EndArchive;
}

[MemoryPackable]
public partial class EventCE002MiniGameManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiPrefab;
    public String? EnterScenario;
    public Int32 Ce002MinigameDataGroup;
    public Int32 EndAlertStartTime;
    public String? PlayerFullResource;
    public String? PlayerHit1Resource;
    public String? PlayerHit2Resource;
    public Int32 PlayerHp;
    public Int32 PlayerSizeRatio;
    public Int32 PlayerMoveSpeed;
    public Int32 PlayerAngleRotationalPerSec;
    public Int32 EnermySearchDistance;
    public Int32 HitDamageImmuneTime;
    public Int32 PlayerProjectileDamage;
    public Int32 PlayerProjectilePerSec;
    public Int32 PlayerProjectileSpeed;
    public Int32 PlayerProjectileDuration;
    public Boolean EnermyProjectileAutotarget;
    public Int32 TutorialGroupId;
}

[MemoryPackable]
public partial class EventCE002MiniGameMonsterRecord
{
    public Int32 Id;
    public String? MonsterResource;
    public CE002MiniGameMonsterType Ce002MinigameMonsterType;
    public Int32 MonsterSizeRatio;
    public Int32 MonsterHp;
    public Int32 MoveSpeed;
    public Int32 AngleRotationalPerSec;
    public Boolean FocusMuzzleTarget;
    public Int32 EnermySearchDistance;
    public Int32 EnermyShotDistance;
    public Boolean AutoTarget;
    public String? HitEffect;
    public String? DeadEffect;
    public CE002MiniGameProjectileType ProjectileType;
    public Int32 ProjectileDamage;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileHp;
    public Int32 ProjectileDuration;
    public ShotTimingType ShotTiming;
    public Int32 Cooltime;
    public Int32 ShotDelay;
}

[MemoryPackable]
public partial class EventCE002MiniGameNPCRecord
{
    public Int32 Id;
    public Int32 EventFieldId;
    public String? ResourceId;
    public Int32 InteractionDistance;
    public String? InteractionMarker;
    public Int32 StageId;
    public Int32 ConditionQuestId;
    public Int32 MinimapHintRadius;
    public Int32 MoveXCoordinate;
    public Int32 MoveZCoordinate;
}

[MemoryPackable]
public partial class EventCE002MiniGameStageRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 StageIndex;
    public String? StagePrefab;
    public Int32 TimeLimit;
    public Int32 WaveDataId;
    public Int32 ClearRewardId;
}

[MemoryPackable]
public partial class EventCE002MiniGameTutorialRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? TutorialResource;
    public String? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventCE002MiniGameWaveDataRecord
{
    public Int32 Id;
    public Int32 WaveId;
    public Int32 SpawnerIndex;
    public Int32 MonsterGroup;
    public Int32 MonsterId;
    public Boolean TargetMonster;
    public Int32 SpawnMonsterGroupDead;
    public Int32 SpawnAreaCondition;
    public Int32 DespawnMonsterGroupDead;
    public Int32 DelayTime;
}

[MemoryPackable]
public partial class EventCE003MiniGameCharacterRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ResourceId;
    public String? SiResourceId;
    public Int32 MoveSpeed;
    public Int32 ServingMoveSpeed;
    public Int32 Hp;
    public Int32 HpAutoRecoverConditionTime;
    public Int32 HpAutoRecoverValue;
    public Int32 HpZeroStunTime;
    public Int32 HpZeroStunRecoverConditionTime;
    public Int32 HpZeroStunRecoverValue;
    public Int32 CharacterReturnTime;
    public Int32 CharacterLocationIndex;
}

[MemoryPackable]
public partial class EventCE003MiniGameEventGameNoteRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 GoodNoteStart;
    public Int32 GreatNoteStart;
    public Int32 PerfectNoteStart;
    public Int32 PerfectNoteEnd;
    public Int32 GreatNoteEnd;
    public Int32 GoodNoteEnd;
}

[MemoryPackable]
public partial class EventCE003MiniGameEventGameRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 NoteSet1;
    public Int32 NoteSet2;
    public Int32 NoteSet3;
    public Int32 PerfectConditionPoint;
    public Int32 GreatConditionPoint;
    public Int32 GoodConditionPoint;
    public Int32 AdditionalPoint;
    public Int32 PerfectGetPoint;
    public Int32 PerfectGetHp;
    public Int32 GreatGetPoint;
    public Int32 GreatGetHp;
    public Int32 GoodGetPoint;
    public Int32 GoodGetHp;
    public Int32 StartIdleCount;
    public Int32 TimingBarMoveTime;
    public Int32 EndIdleCount;
    public Int32 Ratio;
}

[MemoryPackable]
public partial class EventCE003MiniGameHelpTipRecord
{
    public Int32 Id;
    public String? ViewId;
    public String? PrefabId;
    public Int32 GroupId;
    public Int32 PageNumber;
    public String? HelpTipTitle;
    public String? HelpTipImage;
    public String? HelpTipDescription;
}

[MemoryPackable]
public partial class EventCE003MiniGameManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiPrefab;
    public Int32 DailyRewardConditionValue;
    public Int32 DailyRewardId;
    public String? FirstEnterScenarioGroupId;
    public Int32 HelpTipGroupId;
    public Int32 CookSpeedSet;
    public Int32 EventGamePerfectPoint;
    public Int32 EventGameGreatPoint;
    public Int32 EventGameGoodPoint;
    public Int32 StartCutSceneStartTime;
    public Int32 EventGameStartCutSceneTime;
    public Int32 EventGameEndCutSceneTime;
    public Int32 GameEndAlertStartTime;
    public Int32 DefaultCookSlotCount;
    public Int32 MaidCallRatioValue;
}

[MemoryPackable]
public partial class EventCE003MiniGameMenuGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 MenuId;
    public Boolean IsEventGameActive;
    public Int32 OrderRatio;
}

[MemoryPackable]
public partial class EventCE003MiniGameMenuRecord
{
    public Int32 Id;
    public String? ResourceId;
    public Int32 CookTime;
}

[MemoryPackable]
public partial class EventCE003MiniGameMissionRecord
{
    public Int32 Id;
    public EventCe003MiniGameMissionType MissionType;
    public EventCE003MiniGameConditionsType ConditionType;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 Order;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventCE003MiniGameNpcSpawnGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 CoolTimeSetStartTime;
    public Int32 VisitCoolTimeMin;
    public Int32 VisitCoolTimeMax;
    public Int32 EventNpcActiveProb;
    public Int32 EventNpcForceVisitLimitTime;
    public Int32 EventNpcForceVisitProb;
    public Int32 CoolTimeSetEndTime;
    public Int32 CallNpcGroupId;
    public Int32 CallEventNpcGroupId;
}

[MemoryPackable]
public partial class EventCE003MiniGameNpcRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public NpcType NpcType;
    public String? ResourceId;
    public Int32 OrderMenuGroup;
    public Int32 MoveSpeed;
    public Int32 WaitTimeServing;
    public Int32 WaitTimeEating;
    public Int32 ServingReduceHpValue;
    public Int32 ServingGreatReactionGetPoint;
    public Int32 ServingGoodReactionGetPoint;
    public Int32 ServingBadReactionGetPoint;
}

[MemoryPackable]
public partial class EventCE003MiniGameSkillRecord
{
    public Int32 Id;
    public Int32 SkillRank;
    public Int32 ActiveConditionValue;
    public EventCE003MiniGameSkillType SkillType;
    public Int32 SkillValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventCE003MiniGameStageRecord
{
    public Int32 Id;
    public Int32 StageLevel;
    public Int32 EnterConditionValue;
    public String? StageLevelName;
    public String? StageLevelDesc;
    public String? StageLevelImg;
    public Int32 TimeLimit;
    public Int32 UseMaidGroup;
    public Int32 NpcVisitSetGroupId;
    public Int32 EventNpcVisitUpgradeSetGroupId;
    public Int32 EventGameGroupId;
    public Int32 CleanRatio;
    public Int32 CleanReduceHpValue;
    public Int32 CleanGetPoint;
    public Int32 CleanTime;
}

[MemoryPackable]
public partial class EventCE004MiniGameBuffRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public CE004BuffCategory Category;
    public Int32 Slot;
    public Int32 BuffGroup;
    public Int32 BuffLevel;
    public CE004BuffType BuffType;
    public Int32 BuffValue;
    public Int32 NeedUpgradeCurrency;
    public Int32 ConditionSkillId;
}

[MemoryPackable]
public partial class EventCE004MiniGameCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? NameShortLocalkey;
    public String? ResourceId;
    public String? CharacterPrefab;
    public String? FailSpeechBubble;
    public Int32 Attack;
    public Int32 Hp;
    public Int32 SkillGroup;
    public Int32 EventDay;
    public Int32 MiniGameStageClear;
}

[MemoryPackable]
public partial class EventCE004MiniGameChaSkillRecord_Raw
{
    public Int32 Id;
    public Int32 SkillGroup;
    public CE004SkillType SkillType;
    public Int32 SkillDamage;
    public String? MuzzleEffect;
    public String? SkillEffect;
    public String? HitEffect;
    public Int32 HitCount;
    public HitTiming HitTiming;
    public CE004MonsterPosition TargetPosition;
    public String? CutscenePrefab;
}

[MemoryPackable]
public partial class EventCE004MiniGameHelpTipListRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 HelpTipGroupId;
    public String? HelpTipTitleLocalkey;
}

[MemoryPackable]
public partial class EventCE004MiniGameManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiPrefab;
    public String? EnterScenario;
    public Int32 HelpTipId;
    public Int32 DailyRewardPoint;
    public Int32 DailyRewardId;
    public String? UpgradeCurrencyResource;
    public String? UpgradeCurrencyName;
    public String? UpgradeCurrencyDescription;
    public String? CharacterSpawnPosition;
    public Int32 BurstMax;
    public Int32 BurstChargeMin;
    public Int32 BurstChargeMax;
    public Int32 BurstPushTime;
    public Int32 ChargingIncreaseAttack;
    public Int32 ChallengeLastStageLevel;
    public Int32 ChallengeRepeatStageLevel;
    public Int32 ChallengeIncreaseMonsterAttack;
    public Int32 ChallengeIncreaseMonsterHp;
    public Int32 ChallengeWaveInterval;
    public Int32 SkillMixCondition;
    public Int32 SkillMixValue;
    public Int32 SkillMixTime;
    public Int32 SpeedControlStage;
    public Int32 MaxPoint;
    public Int32 HintBetweenTime;
    public Boolean IsArchive;
}

[MemoryPackable]
public partial class EventCE004MiniGameMissionRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? MissionLocalkey;
    public CE004MissionCategory MissionCategory;
    public CE004MissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public CE004MissionRewardType RewardType;
    public Int32 RewardValue;
}

[MemoryPackable]
public partial class EventCE004MiniGameMonSkillRecord_Raw
{
    public Int32 Id;
    public Int32 SkillGroup;
    public CE004SkillType SkillType;
    public Int32 SkillDamage;
    public String? SkillEffect;
    public String? HitEffect;
    public String? HintEffect;
    public CE004MonsterPosition HintPosition;
}

[MemoryPackable]
public partial class EventCE004MiniGameMonsterRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? MonsterPrefab;
    public Int32 Attack;
    public Int32 Hp;
    public Int32 SkillGroup;
    public String? DeadEffect;
}

[MemoryPackable]
public partial class EventCE004MiniGameSkillPositionRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public String? PositionLocalkey;
    public List<CE004SkillPositionGroupData_Raw>? Ce004SkillPositionGroupData;
}

[MemoryPackable]
public partial class EventCE004MiniGameSkillTypeRecord_Raw
{
    public Int32 Id;
    public CE004SkillCategory Category;
    public CE004SkillType SkillType;
    public String? NameLocalkey;
    public String? ResourceId;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageSeedRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 HintCount;
    public List<CE004SeedSkillTypeGroupData_Raw>? Ce004SeedSkillTypeGroupData;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public CE004StageDifficulty StageDifficulty;
    public Int32 StageLevel;
    public String? ButtonLocalkey;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public String? StagePrefab;
    public String? MainCamera;
    public String? EnemyCamera;
    public Int32 BattleActionZoomInFov;
    public Int32 OutQuadTime;
    public List<CE004OpenConditionTypeGroupData_Raw>? Ce004OpenConditionTypeGroupData;
    public String? MonsterSpawnPosition;
    public Int32 SpawnMonsterId;
    public Int32 SpawnMonsterScale;
    public Int32 ClearRewardCount;
    public Int32 DelayTime;
    public Int32 HintTime;
    public Int32 BattleTime;
    public Int32 BurstTime;
    public Int32 TimeGroup;
    public CE004StageSeedType SeedType;
    public Int32 SeedGroup;
    public Int32 HelpTipId;
    public Int32 SkillPositionGroup;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageTimeRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public CE004StageSeedRepeatType RepeatType;
    public Int32 BattleCountCondition;
    public Int32 HintTimeValue;
    public Int32 BattleTimeValue;
    public Int32 BurstTimeValue;
}

[MemoryPackable]
public partial class EventClimbingChallengeStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Single DefaultObjectSpeed;
    public Int32 DefaultObtainPoint;
    public Int32 Life;
    public Int32 HitImmuneTimeMs;
    public Int32 JumpMotionLengthMs;
    public Single JumpHeight;
    public Int32 AutoIncreaseDifficultySecond;
    public Int32 FirstObjectGenerateDistance;
}

[MemoryPackable]
public partial class EventClimbingStoryStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Int32 ClearTimeSecond;
    public Single DefaultObjectSpeed;
    public Int32 DefaultObtainPoint;
    public Int32 Life;
    public Int32 HitImmuneTimeMs;
    public Int32 JumpMotionLengthMs;
    public Single JumpHeight;
    public Int32 AutoIncreaseDifficultySecond;
    public Int32 FirstObjectGenerateDistance;
    public String? ClearConditionDesc;
}

[MemoryPackable]
public partial class EventClimbingTimeDifficultRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 DifficultyStep;
    public Int32 PlayTimeMin;
    public Int32 PlayTimeMax;
    public Int32 SpawnDistanceMin;
    public Int32 SpawnDistanceMax;
    public Int32 SpawnLine0Ratio;
    public Int32 SpawnLine1Ratio;
    public Int32 SpawnLine2Ratio;
    public Single DifficultyPlaySpeed;
    public Single AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventCollectManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public FieldCollectContentsType ContentsType;
    public String? UiPrefab;
}

[MemoryPackable]
public partial class EventDatingSimAlbumRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Order;
    public EventDatingSimAlbumCategory Category;
    public Int32 CategoryValue;
    public String? AlbumName;
    public String? AlbumDescription;
}

[MemoryPackable]
public partial class EventDatingSimArchiveManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 ExistManagerId;
}

[MemoryPackable]
public partial class EventDatingSimDialogEventRecord
{
    public String? Id;
    public Int32 ManagerId;
    public Int32 Order;
    public EventDatingSimDialogEventType DialogEventType;
    public EventDatingSimDialogSceneType DialogType;
    public String? ScenarioTitleLocalkey;
    public String? ScenarioDialogId;
    public String? CutsceneImageForUi;
    public Int32 SpawnLostItemId;
    public Int32 HeroineAlbumId;
}

[MemoryPackable]
public partial class EventDatingSimDialogScheduleRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Day;
    public String? Location;
    public String? DialogEventAppearDaytime;
    public String? DialogEventAppearEvening;
    public String? DialogEventAppearNight;
}

[MemoryPackable]
public partial class EventDatingSimHelpMessageRecord
{
    public String? Id;
    public Int32 ManagerId;
    public EventDatingSimHelpMessagePageType PageType;
    public EventDatingSimHelpMessageType HelpMessageType;
    public String? HelpMessageIconResource;
    public String? HelpMessageLocale;
}

[MemoryPackable]
public partial class EventDatingSimHeroineAlbumRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ManagerId;
    public Int32 Order;
    public Boolean IsHeroineGroup;
    public String? TargetHeroineId;
    public Int32 CompleteReward;
}

[MemoryPackable]
public partial class EventDatingSimHeroineConditionRecord
{
    public String? Id;
    public Int32 ManagerId;
    public Boolean IsHeroineGroup;
    public String? TargetHeroineId;
    public Int32 EventConditionDay;
    public EventDatingSimTime EventConditionTime;
    public String? EventConditionLocation;
    public Int32 EventConditionRelationLvMin;
    public Int32 EventConditionRelationLvMax;
    public String? EventConditionDialogEvent;
    public String? EventConditionSelectionEvent;
    public String? DialogEventId;
}

[MemoryPackable]
public partial class EventDatingSimHeroineGroupRecord
{
    public String? Id;
    public Int32 ManagerId;
    public String? HeroineGroupName;
    public String? HeroineGroupPortraitResource;
    public String? HeroineGroupPortraitSmallResource;
    public String? GroupIcon;
    public List<HeroineIdListData>? HeroineIdList;
    public List<IsGroupEventRelationLVListData>? IsGroupEventRelationLvList;
    public Boolean IsGroupEventHiddenEnding;
}

[MemoryPackable]
public partial class EventDatingSimHeroineLVRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 RelationLevel;
    public Int32 TargetRelationPoint;
}

[MemoryPackable]
public partial class EventDatingSimHeroineScheduleRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Day;
    public String? Location;
    public Boolean IsHeroineGroupDaytime;
    public String? HeroineAppearDaytime;
    public Boolean IsHeroineGroupEvening;
    public String? HeroineAppearEvening;
    public Boolean IsHeroineGroupNight;
    public String? HeroineAppearNight;
}

[MemoryPackable]
public partial class EventDatingSimHeroineRecord
{
    public String? Id;
    public Int32 ManagerId;
    public Int32 Order;
    public String? PortraitResource;
    public String? SmallPortraitResource;
    public String? HeroineName;
    public Int32 MaxRelationLv;
    public Int32 RelationOverflowTargetPoint;
    public Boolean IsContainInGroup;
    public String? RelationSubtitleLv0;
    public List<RelationSubtitleLVListData>? RelationSubtitleLvList;
    public String? RelationSubtitleLvMax;
}

[MemoryPackable]
public partial class EventDatingSimLocationRecord
{
    public String? Id;
    public Int32 ManagerId;
    public Int32 Index;
    public String? LocationName;
    public String? LocationResource;
    public String? LocationOpenDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimLostItemRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? LostItemName;
    public String? LostItemDescription;
    public String? LostItemHint;
    public String? LostItemResource;
    public String? LostItemFieldResource;
    public Int32 InteractionDistance;
    public String? InteractionMarker;
    public Int32 MinimapGuideRadius;
    public Int32 MinimapGuideTransformXCoordinate;
    public Int32 MinimapGuideTransformYCoordinate;
}

[MemoryPackable]
public partial class EventDatingSimManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiPrefabKeyword;
    public String? EventTransition;
    public Int32 TotalDay;
    public DateTime StartDateForUi;
    public Int32 StaminaAutoChargeId;
    public DateTime InfinityModActiveRealtime;
    public Int32 DailyRewardRequireStamina;
    public Int32 DailyRewardId;
    public String? SpecialCutscenePrefab;
    public Int32 SpecialCutsceneCompleteRewardWallpaperId;
    public String? FirstEnterScenario;
    public String? DefaultDialogEvent;
    public String? ForcedMyroomReturnDialogEvent;
    public String? DefaultMyroomHomecomingDialogEvent;
    public String? EpilogueDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimMyroomScheduleRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Day;
    public String? MyroomEventAwake;
    public String? MyroomEventOuting;
    public String? MyroomEventHomecoming;
}

[MemoryPackable]
public partial class EventDatingSimPhotoAlbumRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ManagerId;
    public Int32 Order;
    public String? CutsceneResource;
    public String? CutsceneTitleLocalkey;
    public String? UnlockConditionDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimRelationConditionRecord
{
    public String? Id;
    public Int32 ManagerId;
    public Boolean IsConsumeStamina;
    public Boolean IsHeroineGroup;
    public String? TargetHeroineId;
    public List<RelationAppearHeroineConditionListData>? RelationAppearHeroineConditionList;
    public List<RelationAppearDialogConditionListData>? RelationAppearDialogConditionList;
    public List<RelationAppearSelectionConditionListData>? RelationAppearSelectionConditionList;
    public Int32 ForcedAppearStartDay;
    public String? ForcedAppearLocation;
    public EventDatingSimTime ForcedAppearTime;
    public String? DialogEventId;
    public Boolean IsUseLostItem;
    public Int32 LostItemId;
    public String? LostItemOccurDialogEventId;
    public String? LostItemRequireDialogEventId;
    public EventDatingSimRelationResultEventType RelationResultEventType;
}

[MemoryPackable]
public partial class EventDatingSimSpecialCutSceneRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 Index;
    public String? HeroineResourceStep2ChangeCondition;
    public String? HeroineResourceStep3ChangeCondition;
}

[MemoryPackable]
public partial class EventDatingSimTutorialPageRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ManagerId;
    public Int32 ArchiveManagerId;
    public Int32 PageOrder;
    public String? ImageResource;
    public String? PageTitleLocalkey;
    public String? TutorialLocalkey;
}

[MemoryPackable]
public partial class EventDatingSimTutorialRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 ArchiveManagerId;
    public Int32 TutorialPageGroupId;
    public EventDatingSimTutorialType TutorialType;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class EventDessertRushManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchiveEvent;
    public Int32 OpenCondition;
    public String? EnterScenario;
    public Int32 DailyRewardPoint;
    public Int32 DailyRewardId;
    public Int32 StepUpRewardGroupId;
    public Int32 TutorialGroupId;
    public Int32 TimeLimit;
    public Int32 GainPoint;
    public Int32 GainPointX2Combo;
    public Int32 GainPointX3Combo;
    public Int32 GainPointX4Combo;
    public Int32 GainPointX5Combo;
    public Int32 GainFeverGauge;
    public Int32 MaxFeverGauge;
    public Int32 DecreaseFeverGauge;
    public Int32 NextFeverNeedCount;
    public Int32 FeverLv1Ratio;
    public Int32 FeverLv2Ratio;
    public Int32 FeverLv3Ratio;
    public Int32 FeverLv4Ratio;
    public Int32 PenaltyTime;
    public Int32 SpecialSpawnCount;
    public Int32 SpecialSpawnPrepare;
    public Int32 SpawnSpecialId;
    public Int32 SpecialChangeDessertCount;
    public Int32 EndImminentAlertStartTime;
    public Int32 Level01StartComboCount;
    public Int32 Level01WaveId;
    public Int32 Level02StartComboCount;
    public Int32 Level02WaveId;
    public Int32 Level03StartComboCount;
    public Int32 Level03WaveId;
    public Int32 Level04StartComboCount;
    public Int32 Level04WaveId;
    public Int32 Level05StartComboCount;
    public Int32 Level05WaveId;
    public Int32 DRankTargetPoint;
    public Int32 CRankTargetPoint;
    public Int32 BRankTargetPoint;
    public Int32 ARankTargetPoint;
    public Int32 SRankTargetPoint;
}

[MemoryPackable]
public partial class EventDessertRushObject
{
    public Int32 Id;
    public Int32 Group;
    public String? ResourceId01;
    public String? ResourceId02;
}

[MemoryPackable]
public partial class EventDessertRushStepUpRewardRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Step;
    public Int32 TargetPoint;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventDessertRushTutorialRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? TutorialResource;
    public String? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDessertRushWaveRecord
{
    public Int32 Id;
    public Int32 Object01Id;
    public Int32 Object01AppearanceProbability;
    public Int32 Object02Id;
    public Int32 Object02AppearanceProbability;
    public Int32 Object03Id;
    public Int32 Object03AppearanceProbability;
    public Int32 Object04Id;
    public Int32 Object04AppearanceProbability;
    public Int32 Object05Id;
    public Int32 Object05AppearanceProbability;
    public Int32 Object06Id;
    public Int32 Object06AppearanceProbability;
    public Int32 Object07Id;
    public Int32 Object07AppearanceProbability;
    public Int32 Object08Id;
    public Int32 Object08AppearanceProbability;
    public Int32 Object09Id;
    public Int32 Object09AppearanceProbability;
}

[MemoryPackable]
public partial class EventDiceBoardRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SlotId;
    public DiceEventRotationType MoveRotation;
    public DiceEventRotationType MoveRotationReverse;
    public DiceEventEventType EventType;
    public Int32 GoTo;
    public Int32 RewardId;
    public Int32 GetHeropower1;
    public Int32 GetHeropower2;
    public Int32 GetHeropower3;
    public Int32 GetHeropower1Rate;
    public Int32 GetHeropower2Rate;
    public Int32 GetHeropower3Rate;
}

[MemoryPackable]
public partial class EventDiceResourceRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? SlotType;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? AniResource;
    public String? ImageResource;
}

[MemoryPackable]
public partial class EventDiceRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? AlbumName;
    public String? AlbumDescription;
    public Boolean IsArchive;
    public Int32 BoardId;
    public Int32 ResourceId;
    public Int32 EventId;
    public String? UiPrefab;
    public String? FirstEnterScenarioGroupId;
    public Int32 EventItemId;
    public Int32 AlbumCategoryGroup;
    public Int32 HelpTipViewSubId;
    public Int32 MaxGauge;
    public Int32 MaxClear;
    public Int32 DiceConsume;
    public Int32 PlayerMoveTime;
    public Int32 BoardFinishGauge;
    public List<DiceClearRewardData>? DiceClearRewardList;
    public Int32 ClearRewardIdRepeat;
    public List<DiceClearScenarioGroupData>? DiceClearScenarioGroupList;
    public String? MaxgaugeStepLocalkey;
    public String? MaxgaugeStepRepeatLocalkey;
}

[MemoryPackable]
public partial class EventDiceTileLocaleRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? SlotType;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDragonDungeonRunCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? NameLocale;
    public String? OutgameCharacterResource;
    public String? CharacterResource;
    public String? SkillNameLocale;
    public String? SkillDescriptionLocale;
    public String? CharacterIcon;
    public String? SkillIcon;
    public Int32 OpenDate;
    public EventDragonDungeonRunCharacterUnlockType OpenCondition;
    public Int32 OpenConditionValue;
    public String? OpenConditionLocale;
    public Int32 StartHp;
    public EventDragonDungeonRunCharacterSkillType SkillType;
    public Int32 SkillUseCount;
    public Int32 SkillFadeInTime;
    public Int32 SkillDuration;
    public Int32 SkillFadeOutTime;
    public Int32 SkillCooltime;
    public String? SkillFxResource;
    public String? ProjectileResource;
    public Int32 ProjectileSpeed;
}

[MemoryPackable]
public partial class EventDragonDungeonRunCutSceneRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? CutsceneResource;
    public String? CutsceneName;
    public String? CutsceneDescription;
    public EventDragonDungeonRunCutScenePrintTiming CutscenePrintTiming;
    public EventDragonDungeonRunDeadCutScenePrintType CutscenePrintType;
    public Boolean IsAppearInFRank;
    public Boolean IsAppearInDRank;
    public Boolean IsAppearInCRank;
    public Boolean IsAppearInBRank;
    public Boolean IsAppearInARank;
    public Boolean IsAppearInSRank;
}

[MemoryPackable]
public partial class EventDragonDungeonRunManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EnterScenario;
    public Int32 DailyRewardPoint;
    public Int32 DailyRewardId;
    public Int32 MissionGroupId;
    public Int32 TutorialId;
    public Int32 CutsceneGroupId;
    public Int32 ScenarioGroupId;
    public Int32 UseCharacterGroupId;
    public Int32 UseWaveGroupId;
    public Int32 SkipEarlyPhase01OpenDate;
    public Int32 SkipEarlyPhase01OpenDistance;
    public Int32 SkipEarlyPhase01AdjustDistance;
    public Int32 SkipEarlyPhase01AdjustGold;
    public Int32 SkipEarlyPhase01StartWave;
    public Int32 SkipEarlyPhase02OpenDate;
    public Int32 SkipEarlyPhase02OpenDistance;
    public Int32 SkipEarlyPhase02AdjustDistance;
    public Int32 SkipEarlyPhase02AdjustGold;
    public Int32 SkipEarlyPhase02StartWave;
    public Int32 CharacterSpeedTilePerSecond;
    public Int32 KnockBackDelayTime;
    public Int32 SkillDelayTime;
    public Int32 InvincibleTime;
    public Int32 ChaseMonsterDeadDistance;
    public Int32 DragonSpawnDistance;
    public Int32 WaitingDragonBreathObjectId;
    public Int32 DragonSpawnTime;
    public Int32 PresetPreWarmTime;
    public Int32 MoveMimicSpeedTilePerSecond;
    public Int32 TrackMonsterDeadTime;
    public Int32 DeadCutscenePrintTime;
    public Int32 DeadCutsceneSkipAbleTime;
    public Int32 DRankTargetPoint;
    public Int32 CRankTargetPoint;
    public Int32 BRankTargetPoint;
    public Int32 ARankTargetPoint;
    public Int32 SRankTargetPoint;
}

[MemoryPackable]
public partial class EventDragonDungeonRunMissionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? MissionLocalkey;
    public EventDragonDungeonRunMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventDragonDungeonRunObjectRecord_Raw
{
    public Int32 Id;
    public String? ObjectResource;
    public EventDragonDungeonRunObjectType ObjectType;
    public Int32 ObjectColliderLeftSize;
    public Int32 ObjectColliderRightSize;
    public Int32 ObjectColliderUpSize;
    public Int32 ObjectColliderDownSize;
    public Int32 MovestepstoneSize;
    public Int32 SpawnObjectId;
    public Int32 PreactionTime;
    public Int32 DragonFireTime;
    public Int32 ObjectDamage;
    public EventDragonDungeonRunKnockBackDirection KnockBackDirection;
    public Int32 NeedleUpTime;
    public Int32 NeedleUpToDownTime;
    public Int32 NeedleDownTime;
    public Int32 NeedleDownToUpTime;
    public Int32 GuardRange;
    public Int32 ChaseDelayTime;
    public Int32 GiveGoldAmount;
    public Int32 AppearancePercent;
}

[MemoryPackable]
public partial class EventDragonDungeonRunPresetRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 RawOrder;
    public List<String>? TileResource;
    public Boolean FallableTile;
    public Int32 TileO1UseSpawnerGroupId;
    public Int32 Tile01UseObjectId;
    public Int32 Tile02UseObjectId;
    public Int32 Tile03UseObjectId;
    public Int32 Tile04UseObjectId;
    public Int32 Tile05UseObjectId;
    public Int32 Tile06UseObjectId;
    public Int32 Tile07UseObjectId;
    public Int32 TileO2UseSpawnerGroupId;
}

[MemoryPackable]
public partial class EventDragonDungeonRunScenarioRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ScenarioDialogGroupId;
    public Int32 ScenarioUnlockDay;
}

[MemoryPackable]
public partial class EventDragonDungeonRunSpawnerRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 UseObjectId01;
    public Int32 UseObjectId02;
    public Int32 UseObjectId03;
    public Int32 ObjectSpeedTilePerSecond;
    public Boolean UseWarningSign;
    public Int32 WarningSignTime;
    public Int32 ObjectRepeatIntervalMin;
    public Int32 ObjectRepeatIntervalMax;
}

[MemoryPackable]
public partial class EventDragonDungeonRunWaveRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Boolean IsInfinity;
    public Boolean IsRepeat;
    public Int32 RepeatCount;
    public String? LevelUpLocale;
    public List<PresetGroupData_Raw>? PresetGroupData;
}

[MemoryPackable]
public partial class EventDungeonDifficultRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public String? Name;
    public EventDungeonOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public Int32 StageGroup;
}

[MemoryPackable]
public partial class EventDungeonSpotBattleRecord
{
    public Int32 Id;
    public List<EventDungeonOpenConditionObject>? OpenConditionList;
    public String? ShortName;
    public RewardType TicketItemType;
    public Int32 TicketItemId;
    public Int32 TicketItemCount;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Boolean SpotAutocontrol;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Int32 SpotId;
    public Int32 FirstClearRewardId;
    public Int32 ClearRewardId;
    public String? EnterScenario;
    public String? ExitScenario;
    public Int32 FixedPlayCharacterId;
    public Int32 CharacterLv;
    public QuickBattleType QuickBattleType;
    public Int32 QuickBattleTryMaxCount;
}

[MemoryPackable]
public partial class EventDungeonStageRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Step;
    public String? StageName;
    public EventDungeonContentsType StageContentsType;
    public Int32 StageId;
    public Boolean IsRepeatClear;
    public Boolean IsGuideFieldChange;
    public String? MapChangeGuideLocalkey;
    public String? NpcChangeGuideLocalkey;
}

[MemoryPackable]
public partial class EventDungeonRecord
{
    public Int32 Id;
    public String? PartName;
    public Int32 BonusRewardCharacterGroup;
    public Int32 BonusRewardId;
    public Int32 DifficultGroup;
}

[MemoryPackable]
public partial class EventEvaMiniGameActivityConfigRecord_Raw
{
    public Int32 EventId;
    public Int32 ChgLobbyBgWhenPassStoryId;
    public Int32 DefaultMecha;
    public Int32 DefaultWingman;
    public String? FirstEnterScenarioGroupId;
}

[MemoryPackable]
public partial class EventEvaMiniGameBookProcessRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public EvaBookType BookType;
    public Int32 Num;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventEvaMiniGameBookRecord_Raw
{
    public Int32 BookId;
    public Int32 EventId;
    public EvaBookType BookType;
    public Int32 BookGroup;
    public Int32 StageId;
    public Int32 DetailinfoId;
}

[MemoryPackable]
public partial class EventEvaMiniGameCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? Name;
    public String? Description;
    public List<String>? IconAsset;
    public List<String>? CharacterAsset;
    public String? UnlockLevel;
    public String? UnlockDescription;
    public List<String>? WeaponSets;
    public String? CharacterSkill;
    public List<String>? SkillParams;
    public List<Int32>? SkillPower;
    public Double DamageCoefficient;
    public List<Double>? FluctuationCoefficient;
}

[MemoryPackable]
public partial class EventEvaMiniGameCollectionRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? Name;
    public String? LockName;
    public String? UiDescription;
    public String? UiLockDescription;
    public String? UiIcon;
}

[MemoryPackable]
public partial class EventEvaMiniGameEnemySkillRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? UiIcon;
    public String? UiVideo;
    public String? Description;
    public String? GunAsset;
}

[MemoryPackable]
public partial class EventEvaMiniGameEnemyRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? Name;
    public String? Description;
    public String? IconAsset;
    public String? CharacterAsset;
    public Int32 UnlockLevel;
    public String? UnlockDescription;
    public Boolean Boss;
    public String? UiDescription;
    public String? UiIcon;
    public List<Int32>? Skills;
    public Int32 Hp;
    public Int32 Score;
    public String? ScoreLoot;
    public String? BuffLoot;
    public String? BuffLootWeightAsset;
    public List<String>? PreviewSkillIcons;
    public List<String>? PreviewSkills;
    public List<String>? PreviewSkillNames;
}

[MemoryPackable]
public partial class EventEvaMiniGameItemRecord_Raw
{
    public Int32 ItemId;
    public Int32 EventId;
    public EvaItemType ItemType;
    public String? ItemResource;
    public String? ItemName;
    public String? ItemDescription;
    public String? ItemDescriptionPlay;
    public Int32 UnlockStage;
    public String? UiCode;
    public List<String>? PreviewSkillNames;
}

[MemoryPackable]
public partial class EventEvaMiniGameMissionRecord_Raw
{
    public Int32 MissionId;
    public Int32 EventId;
    public String? MissionLocalkey;
    public EvaMissionCategory MissionCategory;
    public EvaMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public EvaMissionRewardType RewardType;
    public Int32 RewardValue;
}

[MemoryPackable]
public partial class EventEvaMiniGameSkillEffectRecord_Raw
{
    public Int32 Id;
    public EvaSkillEffectType EffectType;
    public Int32 StrengthenSize;
}

[MemoryPackable]
public partial class EventEvaMiniGameSkillRecord_Raw
{
    public Int32 SkillId;
    public Int32 EventId;
    public Int32 SkillGroup;
    public List<need_skill_Raw>? NeedSkillArray;
    public Int32 CostId;
    public Int32 CostNum;
    public Int32 Lv;
    public List<Int32>? Effect;
    public String? UiName;
    public String? UiDes;
    public String? UiIcon;
}

[MemoryPackable]
public partial class EventEvaMiniGameStageRecord_Raw
{
    public Int32 StageId;
    public Int32 EventId;
    public DateTime StartDate;
    public DateTime EndDate;
    public EvaStageType StageType;
    public Int32 NeedStageId;
    public Int32 OpenConditionEventStoryStage;
    public Int32 OneStarScore;
    public Int32 TwoStarScore;
    public Int32 ThreeStarScore;
    public List<fix_reward_Raw>? FixRewardArray;
    public List<first_reward_Raw>? FirstRewardArray;
    public String? NameLocalkey;
    public String? BossIcon;
    public String? LevelAssetName;
    public String? EnterScenario;
    public String? ExitScenario;
}

[MemoryPackable]
public partial class EventEvaMiniGameTutorialRecord_Raw
{
    public Int32 Id;
    public String? Title;
    public String? Description;
    public String? ShowAsset;
    public Int32 MinUnlockedLevel;
}

[MemoryPackable]
public partial class EventEvaMiniGameWingmanRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? CharacterAsset;
    public List<Int32>? WeaponSets;
}

[MemoryPackable]
public partial class EventEvaMiniGameWingmanTeamRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? Name;
    public String? Description;
    public String? IconAsset;
    public String? UnlockLevel;
    public String? UnlockDescription;
    public String? Demonstration;
    public String? Group;
    public Double DamageCoefficient;
    public List<Double>? FluctuationCoefficient;
}

[MemoryPackable]
public partial class EventFieldCharacterCustomRecord
{
    public Int32 Id;
    public String? VoiceFieldGoSoundCue;
    public String? VoiceFieldTouchSoundCue;
}

[MemoryPackable]
public partial class EventFieldCooperationRecord
{
    public Int32 Id;
    public String? MonsterNameLocalkey;
    public String? MonsterImage;
    public Int32 ElementId;
}

[MemoryPackable]
public partial class EventFieldEventTargetRecord
{
    public Int32 Id;
    public Int32 EventFieldId;
    public String? NpcLocalkeyName;
    public String? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public String? ForcedNameTagResource;
    public EventTargetEventType ContentsType;
    public Int32 ContentsId;
    public Boolean DailyRespawn;
    public Int32 DespawnNpcRespawnTime;
    public Int32 InteractionDistance;
    public String? ForcedInteractionMarker;
}

[MemoryPackable]
public partial class EventFieldFixedSDCharacterRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventFieldSDCharacterUsageType UsageType;
    public Int32 Slot;
    public FieldFixedSDCharacterReferenceType TableReferenceType;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public String? ScenarioCharacterId;
    public Int32 CharacterCustomId;
}

[MemoryPackable]
public partial class EventFieldNoticePopupRecord_Raw
{
    public Int32 Id;
    public Int32 EventFieldId;
    public EventFieldNoticePopupPrintConditionType PrintConditionType;
    public Int32 PrintConditionValue;
    public String? PopupUiPrefab;
    public String? TitleLocalkey;
    public String? SubTitleLocalkey;
    public String? DescriptionLocalkey;
    public String? ImageResource;
}

[MemoryPackable]
public partial class EventFieldRecollectionHubRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventFieldRecollectionCategoryType RecollectionCategoryType;
    public EventFieldRecollectionScenarioContentsType ScenarioContentsType;
    public Int32 ScenarioEventId;
    public Int32 ArchiveEventId;
    public Int32 RecollectionValue;
    public String? RecollectionNameLocalkey;
    public String? RecollectionDescriptionLocalkey;
    public String? RecollectionResource;
    public String? AlbumPageResource;
}

[MemoryPackable]
public partial class EventFieldRecollectionMemorialRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 MemorialSeriesId;
    public MemorialSeriesCategory MemorialCategoryIconResource;
}

[MemoryPackable]
public partial class EventFieldRidingPresetRecord
{
    public Int32 Id;
    public Int32 EventFieldId;
    public Int32 ChangeProgressEvent;
    public Int32 ChangeRidingValue;
}

[MemoryPackable]
public partial class EventFieldRidingRecord
{
    public Int32 Id;
    public NaviType NaviType;
    public Boolean SquadRidingTogether;
    public String? SquadChangeRidingEffect;
    public String? RidingChangeSquadEffect;
    public FieldPlayerSquadType RidingPlayerSquadType;
    public Int32 RidingPlayerSquadValue;
    public Int32 RidingPlayerSquadSpeed;
    public Int32 RidingSdCharacterSize;
    public Int32 ChangeDelayTime;
    public String? RidingResource;
    public Int32 RidingResourceSize;
    public List<riding_contents_value>? ContentsValue;
}

[MemoryPackable]
public partial class EventFieldRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? FieldDesignMap;
    public String? FieldArtMapStandard;
    public String? FieldHud;
    public String? FieldFirstEntryResource;
    public Int32 LinkEventPassId;
    public Int32 ProgressEventGroupId;
    public Boolean IsUseRoamingNpc;
    public Int32 RoamingNpcLimit;
    public EventFieldRoamingNPCType RoamingNpcType;
    public Int32 RoamingNpcFixedSdCharacterGroupId;
    public Int32 RoamingNpcSpeedMinimum;
    public Int32 RoamingNpcSpeedMaximum;
    public FieldPlayerSquadType PlayerSquadType;
    public Int32 PlayerSquadValue;
    public Int32 PlayerSquadSpeed;
    public Int32 SdCharacterSize;
    public Int32 EventMissionGroup;
    public Int32 RecollectionHubGroupId;
    public String? FieldEnterScenario;
    public Int32 FieldEnterScenarioStoryEventId;
    public List<EventFieldCurrencyData>? EventFieldCurrencyList;
}

[MemoryPackable]
public partial class EventGachaBoardBoardRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 HorizontalSlotValue;
    public Int32 VerticalSlotValue;
    public Int32 Number;
    public Boolean IsRepeat;
    public Int32 SlotRewardGroupId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventGachaBoardfeverRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Number;
    public Int32 SlotOpenValue;
    public Int32 BonusValue;
}

[MemoryPackable]
public partial class EventGachaBoardManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 TicketItemId;
    public Int32 TicketItemCount;
    public Int32 BoardGroupId;
    public Int32 BoardChangeCount;
    public Int32 DailyRewardValue;
    public Int32 MissionGroupId;
    public Int32 MultiReceiveCount;
    public String? UiPrefab;
    public Int32 FeverGroupId;
}

[MemoryPackable]
public partial class EventGachaBoardMissionRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public EventGachaBoardMissionMissionCondition MissionCondition;
    public Int32 MissionConditionTarget;
    public Int32 MissionConditionValue;
    public String? DescriptionLocalkey;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventGachaBoardRewardRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Rank;
    public Int32 SlotCount;
    public Int32 Order;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventInAppShopProductRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public Int32 PackageGroupId;
    public ShopBuyLimitType BuyLimitType;
    public Int32 BuyLimitCount;
    public Boolean IsFree;
    public Int32 MidasProductId;
}

[MemoryPackable]
public partial class EventInAppShopRecord
{
    public Int32 Id;
    public String? Name;
    public String? Description;
    public RewardType ShopItemType;
    public Int32 ShopItemId;
    public Int32 ProductGroup;
    public String? BgResourceTable;
    public String? BgResourceId;
}

[MemoryPackable]
public partial class EventManagerRecord
{
    public Int32 Id;
    public EventSystemType EventSystemType;
    public String? EventShortcutId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public ScheduleType ScheduleType;
    public String? ScheduleValue;
    public String? EventDisableLocale;
    public String? EventResourceId;
    public String? EventThumbnailResourceTable;
    public String? EventThumbnailResourceId;
    public String? ThumbnailColor;
    public String? EventBannerResourceTable;
    public String? EventBannerResourceId;
    public Int32 EventOrder;
    public Boolean IsPopup;
    public EventActiveType ActiveType;
    public Boolean IsHidden;
    public Int32 ParentsEventId;
    public Int32 SetField;
    public BannerPrintType BannerPrintType;
}

[MemoryPackable]
public partial class EventMapChangePresetRecord
{
    public Int32 Id;
    public String? ArtMapChangeValue;
    public String? HudChangeValue;
    public String? InteractionMarkerChangeValue;
    public String? NameTagChangeValue;
    public String? SkyBoxChangeValue;
    public String? PpChangeValue;
}

[MemoryPackable]
public partial class EventMissionCategoryRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public String? Name;
    public String? Description;
    public Int32 MissionListGroup;
    public String? PointResource;
    public EventMissionInitType InitType;
}

[MemoryPackable]
public partial class EventMissionInfoRecord
{
    public Int32 Id;
    public String? UiPrefab;
}

[MemoryPackable]
public partial class EventMissionListRecord
{
    public Int32 Id;
    public Int32 Group;
    public Boolean IsMain;
    public Int32 Order;
    public Int32 Step;
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public Boolean PrintValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 RewardPointValue;
    public Int32 RewardId;
    public Boolean IsStack;
}

[MemoryPackable]
public partial class EventMVGBalloonRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public EventMVGBalloonTypeData BalloonType;
    public Int32 Order;
    public Boolean Randomize;
    public Int32 BalloonShowTime;
    public Int32 WaitTimeAfterEndBalloon;
    public String? LocaleName;
    public String? LocaleKey;
}

[MemoryPackable]
public partial class EventMVGChallengeLevelSettingRecord_Raw
{
    public Int32 Id;
    public Int32 ChallengeStep;
    public Int32 LevelId;
}

[MemoryPackable]
public partial class EventMVGChapterInfoRecord_Raw
{
    public Int32 Id;
    public Int32 ChapterId;
    public String? ChapterName;
    public String? ChapterImg;
}

[MemoryPackable]
public partial class EventMVGCharacterCustomActionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TimelineValue;
    public EventMVGCharacterCustomActionTypeData ActionType;
    public List<EventMVGCharacterCustomActionValueData_Raw>? ActionValue;
    public String? SetMuzzleFx;
    public EventMVGCharacterCustomActionMuzzleTypeData SetMuzzle;
    public String? ProjResourceId;
    public String? ProjResourceHitId;
    public EventMVGCharacterCustomActionProjectileTypeData ProjType;
    public List<EventMVGCharacterCustomActionProjTypeValueData_Raw>? ProjTypeValue;
    public Int32 ProjAmount;
    public Int32 ProjDuration;
    public String? AfterDurationFx;
    public Int32 ProjAfterCollide;
    public Int32 ProjDmgCount;
    public Int32 ProjDmgDelay;
    public Int32 ProjPierce;
    public Double ProjSize;
    public Double ProjSpd;
    public Int32 ProjAtk;
}

[MemoryPackable]
public partial class EventMVGCharacterCustomRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public EventMVGCustomTypeMainData CustomTypeMain;
    public EventMVGCharacterCustomSubTypeData CustomTypeSub;
    public EventMVGCharacterCustomLockTypeData SkillLockType;
    public Boolean AttackKeep;
    public Int32 Lv;
    public Int32 ActionGroupId;
    public Int32 CoolDownTime;
    public Int32 GlobalCoolDownTime;
    public Boolean IgnoreGlobalCoolDownTime;
    public List<EventMVGCharacterCustomCustomVariablesData_Raw>? CustomVariablesData;
}

[MemoryPackable]
public partial class EventMVGCharacterSettingRecord_Raw
{
    public Int32 Id;
    public Int32 StatHp;
    public Int32 StatAtk;
    public Int32 MaxAbsorbGauge;
    public Int32 MaxModuleSlot;
    public Int32 SkillCSetSearchPointLength;
    public Int32 DefaultSkillALv;
    public Int32 SkillAIdSet;
    public Int32 SkillBIdSet;
    public Int32 SkillCIdSet;
    public Int32 SkillDIdSet;
    public Int32 SkillBurstAIdSet;
    public Int32 SkillBurstBIdSet;
    public Int32 SkillBurstCIdSet;
    public Int32 SkillBurstDIdSet;
    public String? BurstAnim;
    public String? BurstCharacterFx;
}

[MemoryPackable]
public partial class EventMVGCollectableRecord_Raw
{
    public Int32 Id;
    public EventMVGCollectableCategoryData Category;
    public String? IconResource;
    public Int32 Order;
    public String? CollectableName;
    public String? CollectableDesc;
    public String? CollectableDescShort;
    public String? AdditionalGetInfo;
    public Boolean IsReset;
}

[MemoryPackable]
public partial class EventMVGCommonSettingsRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchive;
    public Int32 RoomChangeInvincibleTime;
    public Double CamMoveEaseTime;
    public Double CamZoonAdjustEaseTime;
    public Double CamShakeDecreaseTime;
    public Int32 GameStartChapterId;
    public String? GameStartRoomName;
    public Int32 GameStartSocketId;
    public Int32 LaserLimitLength;
    public Int32 TeleportTransitionIn;
    public Int32 TeleportTransitionOut;
    public Int32 DropItemDeleteTime;
    public String? DropObjectDisappearFx;
    public Int32 MapCount;
    public Int32 EndGameStartChapterId;
    public String? EndGameStartRoomName;
}

[MemoryPackable]
public partial class EventMVGCurrencyRecord_Raw
{
    public Int32 Id;
    public EventMVGCurrencyTypeData Category;
    public String? IconResource;
}

[MemoryPackable]
public partial class EventMVGDirectorRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public EventMVGDirectorTimeLineActionTypeData TimelineAction;
    public List<EventMVGDirectorTimelineValueData_Raw>? TimelineValue;
}

[MemoryPackable]
public partial class EventMVGLoadingRecord_Raw
{
    public Int32 Id;
    public String? LoadingTipLocalkey;
    public Int32 Order;
}

[MemoryPackable]
public partial class EventMVGMissionRecord_Raw
{
    public Int32 Id;
    public Int32 MvgId;
    public EventMVGMissionType MissionType;
    public EventMVGMIssionSubType MissionSubType;
    public EventMVGMissionConditionType ConditionType;
    public Boolean DisplayType;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public Int32 Order;
    public String? NameLocalkey;
    public Int32 PointValue;
    public Boolean IsReset;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventMVGModuleRecord_Raw
{
    public Int32 Id;
    public EventMVGModuleCategoryData Category;
    public String? IconResource;
    public Int32 Order;
    public String? ModuleName;
    public String? ModuleDesc;
    public String? ModuleDescShort;
    public Int32 ModuleUseValue;
    public Int32 SkillId;
}

[MemoryPackable]
public partial class EventMVGMonsterAttackTierRecord_Raw
{
    public Int32 Id;
    public EventMVGMonsterAttackTiertierTypeData Tier;
    public Int32 AttackPoint;
    public Int32 EnergyEductedTier;
}

[MemoryPackable]
public partial class EventMVGMonsterDropItemRecord_Raw
{
    public Int32 Id;
    public String? Desc;
    public EventMVGCurrencyType CurrencyType;
    public Int32 CurrencyValue;
    public String? CurrencyResource;
}

[MemoryPackable]
public partial class EventMVGMonsterDropListRecord_Raw
{
    public Int32 Id;
    public Int32 ChallengeStep;
    public String? Desc;
    public List<EventMVGMonsterDropListSettingData_Raw>? DropSetting;
}

[MemoryPackable]
public partial class EventMVGMonsterLevelRecord_Raw
{
    public Int32 Id;
    public Int32 StendardAttackTierId;
    public Single AttackSpeed;
    public Single ChaseSpeed;
    public Int32 Thrash;
    public Int32 Normal;
    public Int32 Elite;
    public Int32 Special;
    public Int32 Centurion;
    public Int32 Boss;
}

[MemoryPackable]
public partial class EventMVGMonsterSettingRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? MonsterModelId;
    public EventMVGMonsterSettinggradeTypeData Grade;
    public EventMVGMonsterSettingmonstertypeTypeData Type;
    public String? DeadEffect;
    public String? Reward;
    public Int32 DeathChargeBurstgauge;
    public Int32 RankPoint;
    public Int32 HpRatio;
    public Int32 EnergyEductedRatio;
    public Int32 AttackSpeedRatio;
    public Int32 FirstRecognitionRange;
    public Single RoamingSpeed;
    public Single RoamingAcceleration;
    public Int32 ChaseRange;
    public Int32 ChaseSpeedRatio;
    public Int32 ReturnRange;
    public Int32 BattleStartRange;
    public Int32 RespawnTime;
    public String? SpotBt;
    public Int32 SkillId01;
    public Int32 SkillId02;
    public Int32 SkillId03;
    public Int32 SkillId04;
    public Int32 SkillId05;
    public Int32 SkillId06;
    public Int32 SkillId07;
    public Int32 SkillId08;
    public Int32 SkillId09;
    public Int32 SkillId10;
    public Int32 SkillId11;
    public Int32 SkillId12;
    public Int32 SkillId13;
    public Int32 SkillId14;
    public Int32 SkillId15;
}

[MemoryPackable]
public partial class EventMVGMonsterSkillRecord_Raw
{
    public Int32 Id;
    public EventMVGMonsterSkillskilltypeTypeData SkillType;
    public Int32 AttackTierId;
    public Int32 CoolTime;
    public Single ProjectileSpeed;
    public Int32 ProjectileHitNum;
    public String? ProjectileModelResource;
    public String? ProjectileMuzResource;
    public String? ProjectileHitResource;
    public String? ProjectileCastingResource;
    public Boolean Absorbable;
    public Int32 ChargeBurstgauge;
    public Boolean ProjectileExtinction;
    public Int32 ProjectileHeight;
    public Int32 ProjectileWidth;
    public Int32 ChaseAngle;
    public Int32 ChaseTime;
    public Int32 ShotLineAngle;
    public Int32 LaserAttackDelay;
    public Int32 LaserAttackInterval;
    public Int32 LaserDuration;
    public Boolean ProjectileExplosive;
    public Int32 ExplosionHeight;
    public Int32 ExplosionWidth;
}

[MemoryPackable]
public partial class EventMVGQuestRecord_Raw
{
    public Int32 Id;
    public MVGQuestTargetType QuestTargetType;
    public MVGQuestType QuestType;
    public Int32 ParentsQuestId;
    public EventMVGQuestConditionType ConditionType;
    public Int32 ConditionId;
    public Int32 ConditionValue1;
    public String? ConditionValue2;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 TimeLineGroupId;
    public Int32 RewardId;
    public Int32 NextQuestId;
}

[MemoryPackable]
public partial class EventMVGResourceSettingRecord_Raw
{
    public Int32 Id;
    public String? ResourceCategory;
    public EventMVGResourceTypeData ResourceType;
    public String? ResourceValue;
    public String? ActiveFxResource;
    public String? AnimGoOn;
    public String? AnimOn;
    public String? AnimGoOff;
    public String? AnimOff;
}

[MemoryPackable]
public partial class EventMVGShopRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public String? Desc;
    public EventMVGShopTypeData ShopType;
    public String? ShopIcon;
    public String? ShopName;
    public String? ShopTxt;
    public Int32 ItemSlot;
    public EventMVGShopItemTypeData ItemType;
    public Int32 ItemId;
    public List<EventMVGShopRequireCurrencyTypeData_Raw>? RequireCurrency;
}

[MemoryPackable]
public partial class EventMVGTeleportRecord_Raw
{
    public Int32 Id;
    public String? RoomAddressableName;
    public Int32 SocketPointId;
    public String? LocaleName;
    public String? ResourceImage;
}

[MemoryPackable]
public partial class EventMVGTutorialConditionRecord_Raw
{
    public Int32 Id;
    public Int32 HelptipId;
    public MVGTutorialConditionType HelptipActiveCondition;
    public Int32 HelptipActiveConditionId;
    public Int32 HelptipActiveConditionValue;
}

[MemoryPackable]
public partial class EventMVGUnlockRecord_Raw
{
    public Int32 Id;
    public EventMVGUnlockFunctionTYpe TargetFunctionType;
    public EventMVGUnlockConditionType UnlockConditionType;
    public Int32 UnlockConditionId;
    public String? UnlockNameLocalkey;
    public String? UnlockDescriptionLocalkey;
    public String? UnlockResourceId;
    public Int32 DisplayHelptipGroupId;
}

[MemoryPackable]
public partial class EventMVGUpgradeShopRecord_Raw
{
    public Int32 Id;
    public EventMVGStatUpgradeType UpgradeType;
    public Int32 UpgradeCount;
    public Boolean IsMaxLevel;
    public Int32 UpgradeTargetGroupId;
    public Int32 ConditionCurrencyId1;
    public Int32 ConditionCurrencyValue1;
    public Int32 ConditionCurrencyId2;
    public Int32 ConditionCurrencyValue2;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventNewPlayerLotteryRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 DrawCnt;
    public Int32 DrawCntMax;
    public Int32 RewardPool;
}

[MemoryPackable]
public partial class EventNKSBalloonRecord
{
    public Int32 Id;
    public String? GroupId;
    public EventNKSDialogTypeData DialogType;
    public Int32 Priority;
    public EventNKSDialogPrintTypeData PrintType;
    public String? PortraitId;
    public String? NameLocalkey;
    public String? ScenarioLocalkey;
    public String? PlaySound;
    public Int32 Duration;
    public Int32 ExecuteDelayTime;
    public Int32 ExecuteRate;
    public Boolean FirstShowCheck;
    public List<BallonConditionData>? ConditionData;
}

[MemoryPackable]
public partial class EventNKSCharacterBurstRecord
{
    public Int32 Id;
    public Int32 CharacterId;
    public Int32 ItemsActionGroupId;
    public Int32 BurstActiveTime;
    public Int32 CooldownTime;
    public Int32 KillCooldownSubTime;
}

[MemoryPackable]
public partial class EventNKSCharacterLevelRecord
{
    public Int32 Id;
    public Int32 Lv;
    public Int32 Exp;
    public Boolean Loop;
}

[MemoryPackable]
public partial class EventNKSCharacterSkillTreeRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TreeLevel;
    public Int32 Line;
    public List<SlotItemData>? SlotData;
}

[MemoryPackable]
public partial class EventNKSCharacterRecord
{
    public Int32 Id;
    public Int32 CommonSettingsId;
    public String? NameLocalkey;
    public String? ResourceId;
    public String? UiResourceId;
    public String? UiLobbyCharacter;
    public Int32 CharacterSkillTreeGroupId;
    public Int32 ReqStgClear;
    public Int32 ReqItemCurrency;
    public Int32 ReqItemId;
    public Int32 StatMvSpd;
    public Int32 MinMvSpd;
    public Int32 StatHp;
    public Int32 MinHp;
    public Int32 StatAtk;
    public Int32 MinAtk;
    public Int32 StatAtkspd;
    public Int32 MinAtkspd;
    public Int32 StatProjSize;
    public Int32 MinProjSize;
    public Int32 StatProjSpd;
    public Int32 MinProjSpd;
    public Int32 StatDef;
    public Int32 MinDef;
    public Int32 StatMagnet;
    public Int32 MinMagnet;
    public List<WeaponDefaultData>? WeaponDefault;
    public List<ModuleDefaultData>? ModuleDefault;
}

[MemoryPackable]
public partial class EventNKSCoinSkillSlotRecord
{
    public Int32 Id;
    public Int32 SlotGroupId;
    public Int32 Grade;
    public Int32 GradeUigauge;
    public Int32 CoinAmount;
}

[MemoryPackable]
public partial class EventNKSCoinSkillStoreRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SecondGroupId;
    public Int32 Grade;
    public Int32 GroupRate;
    public EventNKSItemsStatType StatType1;
    public EventNKSItemsStatCalcType StatCalcType1;
    public Double StatValue1;
    public String? LocaleName;
    public String? IconResource;
}

[MemoryPackable]
public partial class EventNKSCoinStoreRecord
{
    public Int32 Id;
    public EventNKSCoinStoreType StoreType;
    public Int32 Count;
    public Int32 CoinAmount;
}

[MemoryPackable]
public partial class EventNKSCollectionRecord
{
    public Int32 Id;
    public EventNKSCollectionTypeData CollectionCategory;
    public EventNKSVersionType VersionType;
    public Int32 ItemId;
    public String? Particle;
    public String? CollectionHintLocale;
}

[MemoryPackable]
public partial class EventNKSCommonSettingsRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 EventId;
    public EventNKSVersionType VersionType;
    public Boolean IsSpecialMode;
    public Boolean IsArchiveEvent;
    public Int32 CheckBoss;
    public String? EnterScenario;
    public Int32 FieldItemAutoDisappearTime;
    public Int32 AutoSaveTimer;
    public Double ItemCalcWeight;
    public Int32 PcInvincibleTime;
    public Int32 MagnetMoveToPlayerCharacterSpd;
    public String? MonsterCommonAppearEffect;
    public String? MonsterCommonDeathEffectId;
    public Int32 SetBossDeathEffectTime;
    public Int32 MonsterCommonKnockbackDelay;
    public Int32 MonsterCommonWhiteBlinkDelay;
    public Int32 BounceDefaultWidth;
    public Int32 BounceDefaultHeight;
    public Int32 PlayableCharacterBurstFadeTime;
    public Double PlayableCharacterBurstInterval;
    public Int32 CoinSkillStoreReRollAmount;
    public Int32 CoinSkillStoreLockAddAmount;
    public Int32 CoinReviveMaxCount;
    public Int32 LevelupSlotMaxRerollCount;
    public Int32 MaxCombineWeapon;
    public Int32 MaxCombineModule;
}

[MemoryPackable]
public partial class EventNKSDialogRecord
{
    public Int32 Id;
    public Boolean IsDialogFirstPoint;
    public String? GroupId;
    public Int32 Priority;
    public EventNKSDialogPrintTypeData PrintType;
    public String? PortraitId;
    public String? NameLocalkey;
    public String? ScenarioLocalkey;
    public String? PlaySound;
    public String? PlayBgm;
    public Int32 Duration;
    public String? SetBackground;
    public String? HideBackground;
    public Int32 SetBackgroundCordX;
    public Int32 SetBackgroundCordY;
    public Double SetBackgroundScale;
    public List<SpineResourceData>? SpineData;
    public EventNKSDialogEffectTypeData ScenarioEffectType;
    public String? ScenarioEffectValue;
    public Int32 ExecuteDelayTime;
    public Int32 ExecuteRate;
    public Boolean FirstShowCheck;
    public List<DialogConditionData>? ConditionData;
}

[MemoryPackable]
public partial class EventNKSDropListRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ItemId;
}

[MemoryPackable]
public partial class EventNKSGachaBoxRecord
{
    public Int32 Id;
    public String? ResourceId;
    public Int32 Grade;
    public Int32 GachaListGroupId;
    public Int32 Rate;
    public Int32 MaxSlot;
    public List<EventNKSGachaBonusData>? BonusSlotData;
}

[MemoryPackable]
public partial class EventNKSGachaListRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ItemId;
    public Int32 Rate;
}

[MemoryPackable]
public partial class EventNKSGuideRecord
{
    public Int32 Id;
    public Int32 TutorialViewId;
    public Int32 GroupId;
    public String? GuideResourceId;
    public String? GuideTitleLocalkey;
    public String? GuideSubTitleLocalkey;
    public String? GuideDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventNKSItemsActionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Boolean TimelineLoop;
    public Int32 TimelineLoopDelay;
    public Int32 TimelineValue;
    public String? ProjResourceId;
    public String? ProjResourceHitId;
    public String? ProjType;
    public List<EventNKSProjectileTypeValueData>? ProjTypeValue;
    public String? ProjValueStack;
    public Int32 ProjAmount;
    public Int32 ProjDuration;
    public Int32 ProjAfterDuration;
    public Int32 ProjAfterCollide;
    public Int32 ProjAfterCollideStat;
    public Int32 ProjDmgCount;
    public Int32 ProjDmgDelay;
    public Int32 ProjPierce;
    public Double ProjSize;
    public Double ProjSpd;
    public List<EventNKSProjectileAtkRangeData>? ProjAtkRange;
    public Int32 ProjKnockbackValue;
}

[MemoryPackable]
public partial class EventNKSItemsStatRecord
{
    public Int32 Id;
    public Int32 StatTimeDuration;
    public String? StatMarkerResourceId;
    public Int32 ProjStatTimeDeath;
    public EventNKSBuffTypeData BuffType;
    public List<NKSStatData>? Stat;
}

[MemoryPackable]
public partial class EventNKSItemsRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Boolean IsCombine;
    public List<ItemConditionIdData>? ItemConditionId;
    public Int32 Lv;
    public List<Int32>? LockCharacterId;
    public List<Int32>? DisableCharacterId;
    public Int32 LvMax;
    public String? IconResourceId;
    public EventNKSItemCategoryType ItemCategory;
    public Double FieldItemScale;
    public EventNKSItemPassiveSpecialTypeData PassiveSpecial;
    public EventNKSFieldItemType FieldItemType;
    public String? ItemNameLocale;
    public String? ItemDescLocale;
    public Int32 ItemRating;
    public Int32 ItemRatio;
    public Int32 ItemStatId;
    public Int32 ItemActionId;
    public Int32 ItemValue;
    public Boolean LevelUpOnly;
    public Boolean CanMagnet;
    public Int32 ItemConditionTime;
    public Boolean IsBonus;
    public Int32 ItemUnlockConditionMissionId;
    public List<DescriptionValueData>? DescriptionValue;
}

[MemoryPackable]
public partial class EventNKSMissionRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public Int32 CommonSettingsId;
    public EventNKSMissionCategoryData MissionCategory;
    public EventNKSMissionTargetTypeData TargetType;
    public Int32 TargetId;
    public Int32 MissionCount;
    public List<NKSMissionValueData>? MissionValue;
    public EventNKSMissionRewardTypeData RewardType;
    public Int32 RewardValue;
}

[MemoryPackable]
public partial class EventNKSMonsterActionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Boolean TimelineLoop;
    public Int32 TimelineLoopDelay;
    public Int32 TimelineValue;
    public EventNKSMonsterActionType ActionType;
    public Boolean ActionKnockback;
    public List<ActionValueData>? ActionValue;
    public String? ProjResourceId;
    public String? ProjType;
    public List<EventNKSProjectileTypeValueData>? ProjTypeValue;
    public Int32 ProjAmount;
    public Int32 ProjDuration;
    public Int32 ProjAfterDuration;
    public Int32 ProjAfterCollide;
    public Int32 ProjAfterCollideStat;
    public Int32 ProjDmgCount;
    public Int32 ProjDmgDelay;
    public Double ProjSize;
    public Double ProjSpd;
    public List<EventNKSProjectileAtkRangeData>? ProjAtkRange;
}

[MemoryPackable]
public partial class EventNKSMonsterRecord
{
    public Int32 Id;
    public String? ResourceId;
    public Double MonsterScale;
    public Boolean IsCollide;
    public EventNKSMonsterColType ColType;
    public EventNKSMonsterGradeType Grade;
    public String? BehaviorTree;
    public Int32 MonsterActionGroupId;
    public Double StatMvSpd;
    public Int32 StatHp;
    public Int32 StatAtk;
    public Int32 StatDef;
    public Int32 StatProjSpd;
    public Int32 StatProjSize;
    public Int32 StatColDmg;
    public List<DropItemData>? DropItem;
    public Int32 RandomDropGroupId;
    public Int32 RandomDropAmount;
    public Int32 DropRadius;
    public Int32 DeathActionGroupId;
    public String? SpawnEffectResourceId;
    public String? HitEffectResourceId;
    public String? DeathEffectResourceId;
    public Boolean ResistanceAttract;
    public Boolean ResistanceKnockBack;
    public Boolean ResistanceParalysis;
}

[MemoryPackable]
public partial class EventNKSSpawnGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TimelineValue;
    public EventNKSStageTimelineActionType TimelineActionType;
    public List<EventNKSTimeLineActionTypeValue>? TimelineActionTypeValue;
}

[MemoryPackable]
public partial class EventNKSSpawnTimelineRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TimelineValue;
    public Boolean TimelineIsLoop;
    public Int32 TimelineSpawnGroup;
    public Int32 TimelineLoopCount;
    public Int32 TimelineLoopInterval;
    public EventNKSStageTimelineActionType TimelineActionType;
    public List<EventNKSTimeLineActionTypeValue>? TimelineActionTypeValue;
}

[MemoryPackable]
public partial class EventNKSStageRecord
{
    public Int32 Id;
    public Int32 CommonSettingsId;
    public Int32 StageGroup;
    public Int32 StageOpenCondition;
    public Boolean CanRepeat;
    public Boolean IsChallenge;
    public Int32 MapWidth;
    public Int32 MapHeight;
    public Int32 TileSetId;
    public Int32 StageTimelineGroupId;
    public Int32 ClearReward;
    public String? EnterScenario;
    public String? LoseScenario;
    public String? WinScenario;
    public String? StageNameLocale;
    public String? StageDescLocale;
    public List<String>? BgMset;
    public Int32 UiDifficult;
    public String? UiTheme;
    public String? UiThemeLocalKey;
    public Int32 DecoTileAmount;
    public Int32 DecoTileXoffset;
    public Int32 DecoTileYoffset;
}

[MemoryPackable]
public partial class EventNKSStageTileSetRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ResourceId;
    public EventNKSTileTypeData TileType;
    public Boolean BasicTile;
}

[MemoryPackable]
public partial class EventPassManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 PassPointId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 MidasProductId;
    public Int32 InfracorePoint;
    public String? PassPremiumNameLocalkey;
    public String? PassPremiumDescriptionLocalkey;
    public Int32 RankSkipId;
    public String? PassLogoResourceId;
    public String? PassLobbyButtonResourceId;
    public Boolean IsCharacterActive;
    public Int32 ShopNpcResourceId;
    public Int32 NpcCostumeId;
    public String? ProductInfoDescription;
    public Boolean UsePlaceholder;
    public String? PrefabId;
    public Boolean IsDisplayLobby;
}

[MemoryPackable]
public partial class EventPirateCafeCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public EventPirateCafeCharacterType CharacterType;
    public String? ResourceId;
    public String? SiResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeDialogGroupRecord_Raw
{
    public Int32 Id;
    public Int32 DialogGroupId;
    public Int32 DialogId;
}

[MemoryPackable]
public partial class EventPirateCafeDialogRecord_Raw
{
    public Int32 Id;
    public String? PortraitId;
    public String? Locale;
    public String? VoiceKey;
}

[MemoryPackable]
public partial class EventPirateCafeManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 OpenCondition;
    public Int32 DailyRewardConditionValue;
    public Int32 DailyRewardId;
    public String? FirstEnterScenarioGroupId;
    public Int32 MissionGroupId;
    public Int32 SkillGroupId;
    public Int32 HelpTipGroupId;
    public Int32 GameEndAlertStartTime;
    public Int32 FeverDirectionMaidMoveSpeed;
    public Int32 FeverDirectionNpcMoveSpeed;
    public Int32 FeverObjectInvisibleDirectionTime;
    public Int32 FeverDirectionNpcSpawnStartTime;
    public Int32 NpcSpawnCooltime;
    public Int32 SpecialIdleConditionTime;
    public Int32 AnticheatMaxPoint;
}

[MemoryPackable]
public partial class EventPirateCafeMenuRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? TableResourceId;
    public String? ButtonResourceId;
    public String? BubbleResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeMissionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public EventPirateCafeMissionType MissionType;
    public EventPirateCafeConditionsType ConditionType;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventPirateCafeNpcRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public EventPirateCafeNpcType NpcType;
    public String? ResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeSkillRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SkillRank;
    public Int32 ActiveConditionValue;
    public EventPirateCafeSkillType SkillType;
    public Int32 SkillValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventPirateCafeStageRecord_Raw
{
    public Int32 Id;
    public Int32 StageLevel;
    public Int32 EnterConditionValue;
    public String? StageLevelName;
    public String? StageLevelDesc;
    public String? StageLevelImg;
    public Int32 TimeLimit;
    public Int32 FeverGaugeMax;
    public Int32 FeverPlayTime;
    public Int32 UseMaidGroupId;
    public Int32 NormalMaidReturnTime;
    public Int32 FeverMaidReturnTime;
    public Int32 CleanTime;
    public Int32 CleanGetPoint;
    public Int32 NormalMaidServingFailTime;
    public Int32 NormalMaidMoveSpeed;
    public Int32 NormalMaidServingMoveSpeed;
    public Int32 FeverMaidServingFailTime;
    public Int32 FeverMaidMoveSpeed;
    public Int32 FeverMaidServingMoveSpeed;
    public Int32 NormalMenuGroupId;
    public Int32 FeverMenuId;
    public Int32 UseNpcGroupId;
    public Int32 NormalOrder1Weight;
    public Int32 NormalOrder2Weight;
    public Int32 NormalOrder3Weight;
    public Int32 NormalOrder1GetPoint;
    public Int32 NormalOrder2GetPoint;
    public Int32 NormalOrder3GetPoint;
    public Int32 NormalOrder1WaitTimeServing;
    public Int32 NormalOrder2WaitTimeServing;
    public Int32 NormalOrder3WaitTimeServing;
    public Int32 NormalWaitTimeEating;
    public Int32 NormalNpcMoveSpeed;
    public Int32 NormalNpcGetFeverGauge;
    public Boolean UseEventNpc;
    public Int32 EventNpcTurnCount;
    public Int32 EventOrderCount;
    public Int32 EventOrderGetPoint;
    public Int32 EventWaitTimeServing;
    public Int32 EventWaitTimeEating;
    public Int32 EventNpcMoveSpeed;
    public Int32 EventNpcGetFeverGauge;
    public Int32 FeverOrderGetPoint;
    public Int32 FeverWaitTimeEating;
    public Int32 FeverNpcMoveSpeed;
    public Int32 NormalNpcSpawnTime;
    public Int32 FeverNpcSpawnTime;
    public Int32 FeverEndNpcSpawnTime;
    public Int32 FeverEndNpcSpawnAmount;
    public Int32 FeverOrderCount;
    public Int32 DialogGroup1;
    public Int32 DialogGroup2;
    public Int32 DialogGroup3;
    public Int32 DialogGroup1MaxPoint;
    public Int32 DialogGroup2MaxPoint;
}

[MemoryPackable]
public partial class EventPlaySodaChallengeModeRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public EventDungeonOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public EventPlaySodaGameType GameType;
    public String? GameTitle;
    public String? GameTitleEn;
    public Int32 StageHelptipId;
    public String? StageImage;
    public String? GameModeResource;
    public Int32 StageDataId;
}

[MemoryPackable]
public partial class EventPlaySodaManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public MiniGameSystemType MinigameType;
    public Int32 StoryGroupId;
    public Int32 ChallengeGroupId;
    public Int32 PlayHelptipId;
    public Int32 DailyRewardId;
    public Int32 TotalPointRewardGroupId;
    public String? UiPrefabKeyword;
    public Int32 IngamePauseSecond;
}

[MemoryPackable]
public partial class EventPlaySodaPointRewardRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventPlaySodaGameType GameType;
    public Int32 Step;
    public Int32 PointValue;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventPlaySodaStoryModeRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public EventDungeonOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public EventPlaySodaGameType GameType;
    public String? ShortName;
    public String? GameTitle;
    public Int32 StageHelptipId;
    public String? StageImage;
    public Int32 StageDataId;
    public Int32 ClearRewardId;
    public String? EnterScenario;
    public String? ExitScenario;
}

[MemoryPackable]
public partial class EventQuestManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? EventNameLocalkey;
    public Int32 AlbumCategoryGroupId;
    public String? EventQuestAlbumDescription;
    public String? UiPrefab;
    public String? HeaderBgResourceId;
    public String? QuestActivateResourceId;
}

[MemoryPackable]
public partial class EventQuestStageRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventQuestStageModeType StageMode;
    public EventQuestMiniGameType MinigameType;
    public Int32 MinigameStageId;
    public Int32 ChapterId;
    public ChapterMod ChapterMod;
    public Int32 EventQuestManagerId;
    public Int32 ArchiveEventQuestManagerId;
    public Int32 SpawnConditionEventQuestId;
    public Int32 SpawnConditionArchiveEventQuestId;
    public Int32 SpawnConditionEventQuestStageId;
    public Int32 SpawnConditionCampaignStageId;
    public Int32 EnterConditionEventQuestId;
    public Int32 EnterConditionArchiveEventQuestId;
    public Int32 EnterConditionEventQuestStageId;
    public Int32 EnterConditionCampaignStageId;
    public String? NameLocalkey;
    public StageCategory StageCategory;
    public Boolean SpotAutocontrol;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Int32 FieldMonsterId;
    public Int32 SpotId;
    public Int32 RewardId;
    public ScenarioType EnterScenarioType;
    public String? EnterScenario;
    public ScenarioType ExitScenarioType;
    public String? ExitScenario;
    public Int32 FixedPlayCharacterId;
    public Int32 CharacterLv;
}

[MemoryPackable]
public partial class EventQuestRecord
{
    public Int32 Id;
    public Int32 EventQuestManagerId;
    public Category ConditionType;
    public Int32 ConditionValue;
    public String? ConditionUiLocalkey;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 NextQuestId;
    public String? EndScenarioId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventRopeRunningCutSceneRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? CutsceneResource;
    public String? CutsceneName;
    public String? CutsceneDescription;
    public Int32 SpecialAppearCount;
    public String? UnlockConditionDesc;
}

[MemoryPackable]
public partial class EventRopeRunningDifficultyRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Difficulty;
    public Int32 ScrollSpeed;
    public Int32 HpDecreasePerSec;
    public Int32 NextDifficulty;
    public Int32 NeedMeterToNextDifficulty;
    public List<Int32>? PresetGroupId;
    public Boolean IsRushMode;
}

[MemoryPackable]
public partial class EventRopeRunningManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EnterScenario;
    public Int32 OpenCondition;
    public Int32 DailyRewardDistance;
    public Int32 DailyRewardId;
    public Int32 MissionGroupId;
    public Int32 StatusPointGroupId;
    public Int32 StatusGroupId;
    public Int32 SpyItemGroupId;
    public Int32 TutorialId;
    public Int32 AlbumCategoryId;
    public Int32 CutSceneGroupId;
    public Int32 ScenarioGroupId;
    public Int32 DifficultyGroupId;
    public Int32 FallDeathDistance;
    public Int32 JumpYSpeed;
    public Int32 GravityValue;
    public Int32 RopeActionFallSpeed;
    public Int32 RopeActionGravityValue;
    public Int32 RopeActionPullForce;
    public Int32 MaxRopeAttachDistance;
    public Int32 MaxRopeAttachHeight;
    public Int32 SpinJumpYSpeed;
    public Int32 SpinJumpGravityValue;
    public Int32 InitialFallDeathSpeed;
    public Int32 FallDeathGravityValue;
    public Int32 RopeAngle;
    public Int32 RopeCooltime;
    public Int32 RopeSpeed;
    public Int32 RopeMaintainTime;
    public Int32 SpeedRatioAfterHit;
    public Int32 SpeedRatioAfterHitTime;
    public Int32 GetSpGoldCoinValue;
    public Int32 GetSpSilverCoinValue;
    public Int32 GetScoreGoldCoinValue;
    public Int32 GetScoreSilverCoinValue;
    public Int32 ShieldTime;
    public Int32 ItemMoveSpeedByMagnet;
    public Int32 DistanceScoreRatio;
    public Int32 RushTime;
    public Int32 RushCountValue;
    public Int32 InvincibleTime;
    public Int32 StartDifficulty;
    public Int32 DRankTargetScore;
    public Int32 CRankTargetScore;
    public Int32 BRankTargetScore;
    public Int32 ARankTargetScore;
    public Int32 SRankTargetScore;
}

[MemoryPackable]
public partial class EventRopeRunningMissionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? MissionLocaleKey;
    public EventRopeRunningMissionType MissionType;
    public Int32 MissionValue;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventRopeRunningObjectGroupRecord_Raw
{
    public Int32 Id;
    public List<EventRopeRunningObjectGroupRatio_Raw>? GroupRatio;
    public Boolean IsVisible;
}

[MemoryPackable]
public partial class EventRopeRunningObjectRecord_Raw
{
    public Int32 Id;
    public EventRopeRunningObjectType ObjectType;
    public Int32 ObjectColliderX;
    public Int32 ObjectColliderY;
}

[MemoryPackable]
public partial class EventRopeRunningPresetRecord_Raw
{
    public Int32 Id;
    public Int32 PresetGroupId;
    public Int32 Order;
    public Int32 Ceiling;
    public Int32 Object1;
    public Int32 Object2;
    public Int32 Object3;
    public Int32 Object4;
    public Int32 Object5;
    public Int32 Object6;
    public Int32 Object7;
    public Int32 Object8;
    public Int32 Object9;
    public Int32 Object10;
    public Int32 Obstacle;
    public Int32 Land;
}

[MemoryPackable]
public partial class EventRopeRunningScenarioRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ScenarioDialogGroupId;
    public Int32 ScenarioUnlockDay;
}

[MemoryPackable]
public partial class EventRopeRunningSpyItemRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? ResourceId;
    public String? NameLocaleKey;
    public String? DescLocaleKey;
    public EventRopeRunningSpyItemFunctionType FunctionType;
    public Int32 FunctionValue;
    public EventRopeRunningSpyItemUnlockConditionType UnlockConditionType;
    public Int32 UnlockConditionValue;
    public String? UnlockConditionLocaleKey;
    public Int32 UnlockTime;
}

[MemoryPackable]
public partial class EventRopeRunningStatusPointRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SpCount;
    public Int32 GetCoinPoint;
}

[MemoryPackable]
public partial class EventRopeRunningStatusRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Level;
    public Int32 Hp;
    public Int32 Defence;
    public Int32 Recovery;
}

[MemoryPackable]
public partial class EventRunningChallengeStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Single JumpYPower;
    public Single GravityValue;
    public Single DefaultObjectSpeed;
    public Int32 DefaultObtainPoint;
    public Int32 Life;
    public Int32 HitImmuneTimeMs;
    public Int32 AutoIncreaseDifficultySecond;
}

[MemoryPackable]
public partial class EventRunningObjectRecord
{
    public Int32 Id;
    public String? ObjectResourceId;
}

[MemoryPackable]
public partial class EventRunningSpawnGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SpawnObjectId;
    public Int32 SpawnRatio;
}

[MemoryPackable]
public partial class EventRunningStoryStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Int32 ClearTimeSecond;
    public Single JumpYPower;
    public Single GravityValue;
    public Single DefaultObjectSpeed;
    public Int32 DefaultObtainPoint;
    public Int32 Life;
    public Int32 HitImmuneTimeMs;
    public Int32 AutoIncreaseDifficultySecond;
    public String? ClearConditionDesc;
}

[MemoryPackable]
public partial class EventRunningTimeDifficultRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 DifficultyStep;
    public Int32 PlayTimeMin;
    public Int32 PlayTimeMax;
    public Int32 SpawnDistanceMin;
    public Int32 SpawnDistanceMax;
    public Int32 SpawnGroupId;
    public Single DifficultyPlaySpeed;
    public Single AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventSBCharacterAttackStateRecord_Raw
{
    public Int32 Id;
    public Int32 AnimatorId;
    public SBCharacterAttackType AttackType;
    public String? SkillIcon;
    public SBCharacterSkillUseEnergyType UseEnergyType;
    public Int32 UseEnergyValue;
    public Int32 AnimationSpeedRatio;
    public String? UseEffectResource;
    public Int32 AttackGroupId;
    public Boolean IsInvincible;
    public Int32 NextAttack;
    public Int32 NextAttackInputStartTime;
    public Int32 NextDefenseMotionMinimumTransitionTime;
    public Int32 NextAttackMinimumTransitionTime;
    public Int32 TimeToIdle;
}

[MemoryPackable]
public partial class EventSBCharacterAttackRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBCharacterSkillType SkillType;
    public List<SBCharacterSkillUseColliderType>? UseColliderType;
    public Int32 ColliderStartTime;
    public Int32 ColliderEndTime;
    public String? ProjectileResource;
    public String? ProjectileHitResource;
    public Int32 ProjectileStartTime;
    public Int32 ProjectileSize;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileLifeTime;
    public Int32 ProjectileRollAxis;
    public Int32 Damage;
    public Int32 DecreaseShieldGauge;
    public Int32 DecreaseBalanceGauge;
    public Int32 GainBetaGauge;
    public Int32 GainBurstGauge;
    public Int32 RecoveryHp;
    public Boolean IsDown;
}

[MemoryPackable]
public partial class EventSBCharacterEnhanceRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBCharacterEnhanceType EnhanceType;
    public Int32 EnhanceLevel;
    public Boolean IsMaximum;
    public Int32 EnhanceValue01;
    public Int32 EnhanceValue02;
    public String? EnhanceLevelLocale;
    public SBCurrencyType EnhanceMaterialItemType;
    public Int32 EnhanceMaterialItemValue;
    public String? EnhanceMaterialLocale;
}

[MemoryPackable]
public partial class EventSBCharacterSkillRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBCharacterSkillGroupType SkillGroup;
    public String? SkillIcon;
    public String? SkillNameLocale;
    public String? SkillDescriptionLocale;
    public Int32 SkillToActivation;
    public Boolean IsDefaultLearn;
    public Int32 PriorSkill;
    public Int32 NeedLearnSkillpoint;
    public List<AffectSkillData_Raw>? AffectSkillData;
}

[MemoryPackable]
public partial class EventSBCharacterRecord_Raw
{
    public Int32 Id;
    public String? CharacterResource;
    public Int32 EnhanceGroupId;
    public Int32 SkillGroupId;
    public Int32 DefaultShieldGauge;
    public Int32 DefaultBurstGauge;
    public Int32 DefaultAttackSkillId;
    public Int32 BetaSkill01StateId;
    public Int32 BetaSkill02StateId;
    public Int32 BetaSkill03StateId;
    public Int32 BetaSkill04StateId;
    public Int32 BurstSkill01StateId;
    public Int32 BurstSkill02StateId;
    public Int32 BurstSkill03StateId;
    public Int32 BurstSkill04StateId;
    public Int32 HaveShieldGaugeGuardDamageRatio;
    public Int32 NoneShieldGaugeGuardDamageRatio;
    public Int32 RecoveryShieldGaugeTime;
    public Int32 RecoveryShieldGaugeAmount;
    public Int32 GuardInputPreventionTime;
    public Int32 GuardMinimumTime;
    public Int32 PerfectGuardDecreaseBalanceGauge;
    public Int32 PerfectGuardGainBetaGauge;
    public Int32 DefaultPerfectGuardTime;
    public Int32 PerfectGuardBulletTime;
    public Int32 NormalParryMaintainTime;
    public Int32 PerfectParryMaintainTime;
    public Int32 DashToNextDefenseMotionMinimumTransitionTime;
    public Int32 DashToNextMotionMinimumTransitionTime;
    public Int32 DashTimeToIdle;
    public Int32 DefaultPerfectDodgeTime;
    public Int32 PerfectDodgeBulletTime;
    public Int32 PerfectDodgeFrontAndBackBulletTime;
    public Int32 PerfectDodgeGainBurstGauge;
    public Int32 PerfectDodgeInvincibleTime;
    public Int32 DodgeToNextDefenseMotionMinimumTransitionTime;
    public Int32 DodgeToNextMotionMinimumTransitionTime;
    public Int32 DodgeTimeToIdle;
    public Int32 DefaultCriticalProbability;
    public Int32 DefaultDamageRatio;
    public Int32 DefaultReviveCount;
    public Int32 CharacterDownHoldTime;
    public Int32 CharacterHitHoldingTime;
    public Int32 CharacterStandUpTime;
    public Int32 BlinkTeleportationTime;
}

[MemoryPackable]
public partial class EventSBCurrencyRecord_Raw
{
    public Int32 Id;
    public SBCurrencyType CurrencyType;
    public String? ItemResource;
    public String? ItemNameLocale;
    public String? ItemDescriptionLocale;
}

[MemoryPackable]
public partial class EventSBInGameGuideRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBInGameGuideOutputType IngameGuideOutputType;
    public Int32 IngameGuideOutputTime;
    public String? IngameGuideLocaleMobile;
    public String? IngameGuideLocalePc;
}

[MemoryPackable]
public partial class EventSBItemRecord_Raw
{
    public Int32 Id;
    public SBItemType ItemType;
    public String? ItemResource;
    public String? ItemNameLocale;
    public String? ItemDescriptionLocale;
    public Int32 ItemLevel;
    public List<SBItemOptionLocale_Raw>? SbItemOptionLocale;
    public List<SBItemOptionData_Raw>? SbItemOption;
}

[MemoryPackable]
public partial class EventSBManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public String? EnterScenario;
    public Int32 StageGroupId;
    public Int32 CharacterId;
    public Int32 CharacterSkillGroupId;
    public Int32 EnhanceGroupId;
    public Int32 ShopGroupId;
    public Int32 MissionGroupId;
    public Int32 TutorialListGroupId;
    public String? BattleFieldResource;
    public Int32 BattleFieldRadius;
    public Int32 HaveShieldGaugeHitDamageRatio;
    public String? RetributionIcon;
    public Int32 RepulseDecreaseShieldGaugeRatio;
    public Int32 SkillBulletTime;
    public Int32 GigasCameraChangeDistance;
    public Int32 AbaddonCameraChangeDistance;
    public Int32 StalkerCameraChangeDistance;
    public Int32 BehemothCameraChangeDistance;
    public Int32 BruteCameraChangeDistance;
    public Int32 DamageChangeScoreRatio;
    public Int32 ChangeLeftTimeToPoint;
    public Int32 BuffSkillAttackStateId;
    public Int32 BuffDuration;
    public Int32 BuffAtkUpValue;
    public Int32 BuffSpeedUpValue;
}

[MemoryPackable]
public partial class EventSBMissionRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public String? MissionLocalkey;
    public SBMissionCategory MissionCategory;
    public SBMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public SBMissionRewardType RewardType;
    public Int32 RewardValue;
    public Int32 RewardAmount;
}

[MemoryPackable]
public partial class EventSBMonsterAttackStateRecord_Raw
{
    public Int32 Id;
    public Int32 AnimatorId;
    public Int32 AnimationSpeedRatio;
    public String? UseEffectResource;
    public Int32 UseAttackGroupId;
    public Boolean IsInvincible;
    public Int32 TimeToIdle;
    public Boolean SkillTutorialUse;
    public Int32 SkillTutorialUseId;
    public Int32 SkillTutorialOutputTime;
}

[MemoryPackable]
public partial class EventSBMonsterAttackRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBMonsterSkillType SkillType;
    public List<SBMonsterSkillUseColliderType>? UseColliderType;
    public Int32 ColliderStartTime;
    public Int32 ColliderEndTime;
    public String? ProjectileResource;
    public String? ProjectileHitResource;
    public Int32 ProjectileStartTime;
    public Int32 ProjectileFireTime;
    public Int32 ProjectileMaximumHeight;
    public Int32 ProjectileSize;
    public Int32 ProjectileSpeed;
    public Int32 ProjectileDirection;
    public Int32 ProjectileLifeTime;
    public Int32 MoveStartTime;
    public Int32 MoveEndTime;
    public Int32 MaximumJumpHeight;
    public Int32 Damage;
    public Int32 DecreaseShieldGauge;
    public Boolean IsDown;
    public Boolean EveGuardAble;
    public SBMonsterSpecialSkillType SpecialSkillType;
    public Int32 SpecialSkillWarningTime;
    public Int32 SpecialSkillEveWarningTime;
    public Int32 DodgeSkillDelayTime;
    public Boolean CanBeCanceledByPerfectParry;
    public SBMonsterParryAniDirectionType ByPerfectParryAniDirection;
    public SBMonsterParryAniDirectionType AttackDirection;
    public Boolean StrongHit;
    public Boolean FocusEve;
    public Int32 FocusEveStartTime;
    public Int32 FocusEveEndTime;
}

[MemoryPackable]
public partial class EventSBMonsterRecord_Raw
{
    public Int32 Id;
    public SBMonsterType MonsterType;
    public String? MonsterResource;
    public String? MonsterNameLocale;
    public Int32 MonsterAtk;
    public Int32 MonsterHp;
    public Int32 MonsterShieldGauge;
    public Int32 BalanceGauge;
    public Int32 MonsterRecoveryShieldGaugeTime;
    public String? MonsterBt;
    public String? Phase01Bgm;
    public String? Phase02Bgm;
    public Int32 StartDistanceWithCharacter;
    public Int32 GroggyTime;
    public Int32 DownTime;
    public Int32 RetributionStartDistance;
    public Int32 RetributionResource;
    public Int32 RetributionResourceWithSkill;
    public Int32 RetributionDamage;
    public Int32 RetributionDecreaseShieldGauge;
    public Int32 RetributionDownTime;
    public Int32 FinishResource;
    public List<Double>? BlinkCharacterLocation;
    public List<UseSkillData_Raw>? UseSkillData;
}

[MemoryPackable]
public partial class EventSBShopRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBShopItemType ItemGroup;
    public Boolean IsOpened;
    public List<SBOpenConditionData_Raw>? SbOpenConditionData;
    public Int32 ItemOrder;
    public Int32 ItemPrice;
    public Int32 ItemId;
}

[MemoryPackable]
public partial class EventSBStageRewardRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBRewardType RewardType;
    public Int32 RewardId;
    public Int32 RewardAmount;
    public Int32 ScoreMin;
    public Int32 ScoreMax;
}

[MemoryPackable]
public partial class EventSBStageRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public SBBossType BossType;
    public SBStageType StageType;
    public String? StageNameLocale;
    public String? StageNameLocaleWithoutLevel;
    public Int32 MonsterId;
    public String? MonsterImage;
    public String? MonsterIcon;
    public Int32 LimitTime;
    public Int32 UnlockDate;
    public Int32 UnlockConditionStage;
    public List<UnlockConditionLocaleData_Raw>? UnlockConditionLocale;
    public Int32 StageFirstClearReward;
    public Int32 StageClearReward;
    public Int32 StageFailureReward;
    public Boolean IngameGuideUse;
    public Int32 IngameGuideGroupId;
}

[MemoryPackable]
public partial class EventSBTimeLineRecord_Raw
{
    public Int32 Id;
    public SBTimeLineType TimelineType;
    public String? UseEveTimeline;
    public Int32 UseEveAnimatorId;
    public String? UseMonsterTimeline;
    public Int32 UseMonsterAnimatorId;
    public List<Double>? TimelineStartCharacterLocation;
    public Int32 TimelinePlayTime;
    public Int32 EveMoveAbleTime;
}

[MemoryPackable]
public partial class EventSBTutorialListRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TutorialPageId;
    public SBTutorialOutputType TutorialOutputType;
    public Int32 TutorialOutputValue;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class EventScenarioControlRecord
{
    public Int32 Id;
    public Int32 EventId;
    public String? ScenarioGroupId;
    public String? ScenarioPlayType;
}

[MemoryPackable]
public partial class EventSmashChallengeStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public Int32 Life;
    public String? Resource;
    public Int32 SpawnSlotCount;
    public Int32 PointLimit;
    public Int32 AppearHitPoint;
    public Int32 IdleHitPoint;
    public Int32 ExitHitPoint;
    public Int32 NoneTargetPassPoint;
}

[MemoryPackable]
public partial class EventSmashCharacterGroupRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 CharacterId;
    public Int32 SpawnRate;
}

[MemoryPackable]
public partial class EventSmashCharacterRecord
{
    public Int32 Id;
    public String? Resource;
    public EventSmashCharacterType Type;
    public Int32 TypeValue;
}

[MemoryPackable]
public partial class EventSmashStoryStageRecord
{
    public Int32 Id;
    public Int32 ClearPoint;
    public String? ClearConditionDesc;
    public Int32 TimeDifficultGroup;
    public Int32 Life;
    public String? Resource;
    public Int32 SpawnSlotCount;
    public Int32 AppearHitPoint;
    public Int32 IdleHitPoint;
    public Int32 ExitHitPoint;
    public Int32 NoneTargetPassPoint;
}

[MemoryPackable]
public partial class EventSmashTimeDifficultRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Lv;
    public Int32 PlayTimeMin;
    public Int32 PlayTimeMax;
    public Int32 SpawnGroup;
    public Int32 SpawnCountMax;
    public Int32 SpawnDelayTime;
    public Int32 CharacterWaitTime;
}

[MemoryPackable]
public partial class EventSortOutBoxRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? BoxResource;
}

[MemoryPackable]
public partial class EventSortOutMissionRecord_Raw
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? MissionLocalkey;
    public EventSortOutMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class EventSortOutRecord
{
    public Int32 Id;
    public Int32 EventManagerId;
    public Boolean IsArchiveEvent;
    public String? EnterScenario;
    public String? NameLocalkey;
    public Int32 AutoChargeId;
    public Int32 CurrencyTicket;
    public Int32 Time;
    public Int32 Level1Wave;
    public Int32 Level2Wave;
    public Int32 Level3Wave;
    public Int32 Level2StartPoint;
    public Int32 Level3StartPoint;
    public Int32 GainFeverGauge;
    public Int32 MaxFeverGauge;
    public Int32 DecreaseFeverGauge;
    public Int32 CorrectCount;
    public Int32 PenaltyTime;
    public Int32 RankDMinPoint;
    public Int32 RankDMaxPoint;
    public Int32 RankDReward;
    public Int32 RankCMinPoint;
    public Int32 RankCMaxPoint;
    public Int32 RankCReward;
    public Int32 RankBMinPoint;
    public Int32 RankBMaxPoint;
    public Int32 RankBReward;
    public Int32 RankAMinPoint;
    public Int32 RankAMaxPoint;
    public Int32 RankAReward;
    public Int32 RankSMinPoint;
    public Int32 RankSMaxPoint;
    public Int32 RankSReward;
}

[MemoryPackable]
public partial class EventSortOutWaveRecord
{
    public Int32 Id;
    public Int32 Level;
    public Int32 GainPoint;
    public Int32 Box1Id;
    public Int32 Box2Id;
    public Int32 Box3Id;
    public Int32 Box4Id;
    public Int32 Box5Id;
    public Int32 Box6Id;
    public Int32 BoxSpecialId;
    public Int32 BoxFeverId;
}

[MemoryPackable]
public partial class EventStackUpChallengeStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Single CharacterDefaultSpeed;
    public Int32 DefaultObtainPoint;
    public Single PerfectActionPointRate;
    public Single PerfectActionLength;
    public Single ObjectSpawnDistance;
    public Int32 AutoIncreaseDifficultyFloor;
    public Single CameraDefaultSpeed;
    public Single ObjectDefaultLength;
}

[MemoryPackable]
public partial class EventStackUpStoryStageRecord
{
    public Int32 Id;
    public Int32 TimeDifficultGroup;
    public String? StageResourceId;
    public Int32 ClearNumberFloors;
    public Single CharacterDefaultSpeed;
    public Int32 DefaultObtainPoint;
    public Single PerfectActionPointRate;
    public Single PerfectActionLength;
    public Single ObjectSpawnDistance;
    public Int32 AutoIncreaseDifficultyFloor;
    public Single CameraDefaultSpeed;
    public Single ObjectDefaultLength;
}

[MemoryPackable]
public partial class EventStackUpTimeDifficultRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 DifficultyStep;
    public Int32 StackFloorMin;
    public Int32 StackFloorMax;
    public Single DifficultyPlaySpeed;
    public Single AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventStoryRecord
{
    public Int32 Id;
    public Int32 EventId;
    public StoryEventPartType PartType;
    public String? PrologueScenario;
    public Int32 AutoChargeId;
    public RewardType EventItemType;
    public Int32 EventItemId;
    public Int32 DungeonId1;
    public Int32 DungeonId2;
    public Int32 AlbumCategoryGroup;
    public Int32 MissionGroup;
    public Int32 ContentsShopId;
    public Int32 DiceId;
    public String? UiPrefab1;
    public String? UiPrefab2;
    public String? ChallengeMonsterResource;
}

[MemoryPackable]
public partial class EventTextAdventureEventPageRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 FirstSelectId;
    public String? ResourceName;
    public String? ScenarioLocalkey;
    public String? Effect;
    public Boolean IsBgmTenssionUp;
    public EventTextAdventurePageType PageType;
    public Int32 SelectOptionGroupId;
    public Int32 GetLootItemId;
    public Boolean IsGoToFirstSelectPage;
    public Int32 NextPageId;
    public String? ScenarioGroupId;
    public EventTextAdventureEndingType EndingType;
    public Int32 EndingNum;
    public String? EndingSubTitleLocalkey;
    public String? EndingHintLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureFirstSelectRecord
{
    public Int32 Id;
    public Int32 FirstSelectGroupId;
    public String? FirstSelectResource;
    public String? FirstSelectLocalkey;
    public String? FirstSelectDescriptionLocalkey;
    public Int32 NextPageId;
    public Boolean IsUseTimeCondition;
    public DateTime TimeCondition;
    public Boolean IsUseEndingCondition;
    public Int32 EndingCondition;
    public Boolean ShowEndingCondition;
    public String? Effect;
    public String? SoundEffect;
    public String? NavigationIcon;
}

[MemoryPackable]
public partial class EventTextAdventureLocaleRecord
{
    public Int32 Id;
    public String? FirstSelectDescriptionLocalkey;
    public String? LootitemNameLocalkey;
    public String? LootitemDescriptionLocalkey;
    public String? LootitemGainMessageLocalkey;
    public String? LootitemAlreadyGainLocalkey;
    public String? OpenConditionTimeLocalkey;
    public String? OpenConditionEndingLocalkey;
    public String? OpenConditionHiddenLocalkey;
    public String? AlbumLocalkey;
    public String? AlbumDescriptionLocalkey;
    public String? RewardDescriptionLocalkey;
    public String? RewardAlreadyReceivedLocalkey;
    public String? QuickEndLocalkey;
    public String? QuickEndStartButtonLocalkey;
    public String? QuickEndDescriptionLocalkey;
    public String? QuickEndAlertLocalkey;
    public String? LootitemButtonLocalkey;
    public String? AlbumButtonLocalkey;
    public String? GameStartButtonLocalkey;
    public String? RevertPageLocalkey;
    public String? DataSavingLocalkey;
    public String? PauseButtonLocalkey;
    public String? PauseLocalkey;
    public String? PauseDescriptionLocalkey;
    public String? EndingCollectAbleLocalkey;
    public String? EndingCollectDisableLocalkey;
    public String? EndingCollectInfinityModLocalkey;
    public String? TouchToGoRewardPageLocalkey;
    public String? TouchToEndLocalkey;
    public String? AdventureLocationLocalkey;
    public String? GameLoadLocalkey;
    public String? ToastCanNotSelectLocalkey;
    public String? ToastCurrencyTicketLackLocalkey;
    public String? ToastQuickEndOpenConditionLocalkey;
    public String? ToastRequireFirstSelectLocalkey;
    public String? ToastRequireEndingLocalkey;
    public String? ToastRequireLootItemLocalkey;
    public String? ToastEndingNotCollectedLocalkey;
    public String? EndingRecordSuccessLocalkey;
    public String? EndingRecordDeniedLocalkey;
    public String? RewardCountLeftLocalkey;
    public String? NoRewardInArchiveLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureLootItemRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? IconResource;
    public String? ItemNameLocalkey;
    public String? ItemDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchiveEvent;
    public String? UiPrefab;
    public Int32 FirstSelectGroupId;
    public Int32 TicketAutoChargeId;
    public Int32 RewardTicketAutoChargeId;
    public DateTime InfinityModActiveDate;
    public Int32 RewardId;
    public String? FirstEnterScenarioGroupId;
    public Int32 QuickEndEventPageId;
    public Int32 QuickEndOpenConditionValue;
    public Int32 HelpTipId;
    public Int32 LocaleId;
}

[MemoryPackable]
public partial class EventTextAdventureSelectOptionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ManagerId;
    public String? SelectionLocalkey;
    public EventTextAdventureSelectionOpenType OpenConditionType;
    public Int32 OpenConditionValue;
    public Boolean IsHidden;
    public Int32 PageId;
    public String? Voice;
    public String? SoundEffect;
}

[MemoryPackable]
public partial class EventTowerDefenseArcadeManagerRecord_Raw
{
    public Int32 Id;
    public Int32 ArcadeEventId;
    public Int32 ExistManagerId;
    public Int32 ArcadeMissionGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseArchiveManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 ExistManagerId;
}

[MemoryPackable]
public partial class EventTowerDefenseBuffRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 BuffPriority;
    public Boolean IsCanStack;
    public String? BuffName;
    public String? BuffDescription;
    public TowerDefenseBuffTargetType BuffTarget;
    public TowerDefenseBuffEffectType BuffEffectType;
    public Int32 BuffEffectValue;
    public String? BuffEffectResource;
    public String? BuffIconResource;
    public Boolean IsUseSpriteTint;
    public String? SetSpriteTint;
    public Int32 SetSpriteTintAlphaValue;
    public Int32 SetTransparent;
    public Boolean IsDefaultBuff;
}

[MemoryPackable]
public partial class EventTowerDefenseBurstDialogRecord
{
    public Int32 Id;
    public Int32 HeroGroupId;
    public String? Speaker;
    public String? ScenarioLocalkey;
    public Int32 NikkeResourceId;
    public Int32 NikkeCostumeIndex;
}

[MemoryPackable]
public partial class EventTowerDefenseCinematicRecord
{
    public Int32 Id;
    public Int32 StageId;
    public TowerDefenseCinematicStartConditionType StartConditionType;
    public Int32 StartConditionValue;
    public Int32 StartDelay;
    public TowerDefenseCinematicType CinematicType;
    public String? CinematicTypeValue;
    public Int32 TowerSpawnDelay;
    public Int32 TimelineActionStartFrame;
    public Int32 TimelineActionEndFrame;
    public Boolean IsLoopAction;
}

[MemoryPackable]
public partial class EventTowerDefenseDebuffRecord
{
    public Int32 Id;
    public Int32 DebuffPriority;
    public String? DebuffName;
    public String? DebuffDescription;
    public TowerDefenseDebuffEffectType DebuffEffectType;
    public Int32 DebuffEffectValue;
    public String? DebuffEffectResource;
    public Boolean IsUseSpriteTint;
    public String? SetSpriteTint;
    public Int32 SetSpriteTintAlphaValue;
}

[MemoryPackable]
public partial class EventTowerDefenseManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public EventTowerDefenseEventType EventType;
    public String? UiPrefabKeyword;
    public Int32 HeroSlotOpenCost;
    public Int32 HeroSlotOpenCostIncrease;
    public Int32 TowerRefundPercentage;
    public Int32 WaveQuickStartBurstSkillAcceleration;
    public Int32 MonsterLimit;
    public Int32 TowerBuildTime;
    public Int32 TowerDemolishTime;
    public Int32 AreaVerticalDiameter;
    public Int32 UiControlGameSpeedDeceleration;
    public Int32 ZoomMaxValue;
    public Int32 ZoomSpeed;
    public Int32 ResourceDefaultScale;
    public Int32 MonsterDefaultScale;
    public String? UpgradeCurrencyResource;
    public String? UpgradeCurrencyName;
    public String? UpgradeCurrencyDescription;
    public Int32 ToastMessagePrintTime;
    public String? DailyMissionToastMessageTitleLocale;
    public String? DailyMissionToastMessageLocale;
    public String? DailyMissionToastMessageIcon;
    public Int32 DailyMissionToastMessagePrintValue;
    public String? AchievementMissionToastMessageTitleLocale;
    public String? AchievementMissionToastMessageIcon;
    public Int32 IngameDialogPrintSpeed;
    public Int32 BurstDialogPrintTime;
    public Int32 BuffTerminationNoticeTime;
    public Int32 BuffTerminationNoticeBlinkRate;
    public Int32 StageClearDelay;
    public Int32 BurstGuideToastHoldTime;
    public Boolean IsUse3XSpeed;
    public Boolean IsUseWaveInfo;
    public String? FirstEntryMessageLocalkey;
}

[MemoryPackable]
public partial class EventTowerDefenseMissionRecord
{
    public Int32 Id;
    public Int32 MinigameManagerId;
    public Int32 ArcadeMissionGroupId;
    public String? MissionLocalkey;
    public EventTowerDefenseMissionCategory MissionCategory;
    public EventTowerDefenseMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public List<missionvaluedata>? MissionValue;
    public EventTowerDefenseMissionRewardType RewardType;
    public Int32 RewardValue;
}

[MemoryPackable]
public partial class EventTowerDefenseMonsterSkillRecord
{
    public Int32 Id;
    public Int32 MonsterSkillOrder;
    public String? MonsterSkillName;
    public String? MonsterSkillDescription;
    public TowerDefenseMonsterSkillActiveType MonsterSkillActiveType;
    public Int32 MonsterSkillActiveValue;
    public Int32 SkillCastTime;
    public TowerDefenseMonsterSkillType MonsterSkillType;
    public List<MonsterSkillTypeValueListData>? MonsterSkillTypeValueList;
    public String? MonsterSkillResourceEffect;
    public Int32 SkillEffectDelay;
    public String? MonsterSkillResourceEffect2;
    public Int32 SkillEffectDelay2;
    public String? MonsterSkillResourceAreaEffect;
}

[MemoryPackable]
public partial class EventTowerDefenseMonsterRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public TowerDefenseMonsterGradeType MonsterGrade;
    public String? MonsterName;
    public String? MonsterDescription;
    public String? MonsterIcon;
    public String? MonsterResource;
    public Int32 MonsterAnimSpeed;
    public Int32 MonsterScale;
    public Int32 MonsterHitDetectionRadius;
    public Int32 MonsterHp;
    public Int32 MonsterDef;
    public Int32 MonsterSpeed;
    public TowerDefenseMonsterMoveType MoveType;
    public List<MonsterSkillListData>? MonsterSkillList;
    public Boolean IsUseNextPhase;
    public Int32 NextPhaseMonsterId;
    public Int32 NextPhaseMonsterSpawnCount;
    public Int32 NextPhaseMonsterSpawnRadius;
    public Int32 DefensePointDecrease;
    public Int32 GoldReward;
    public Int32 SkillUnusableTime;
    public Int32 ChallengeScore;
}

[MemoryPackable]
public partial class EventTowerDefenseScenarioGroupRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 StageId;
    public TowerDefenseDialogOutputConditionType OutputConditionType;
    public Int32 OutputConditionValue;
    public Int32 DelayTime;
    public Int32 DialogListGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseScenarioListRecord
{
    public Int32 Id;
    public Int32 DialogListGroupId;
    public String? Speaker;
    public TowerDefenseDialogSpeakerPositionType SpeakerPosition;
    public TowerDefenseDialogSpeakerTeamType SpeakerTeam;
    public String? ScenarioLocalkey;
    public String? PrintCutscene;
    public Boolean IsEndCutscene;
}

[MemoryPackable]
public partial class EventTowerDefenseSpeakerRecord
{
    public String? Id;
    public String? SpeakerName;
    public String? SpeakerPortrait;
}

[MemoryPackable]
public partial class EventTowerDefenseStageRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 EventStoryId;
    public TowerDefenseStageType StageType;
    public Int32 StageOrder;
    public String? StageNameLocalkey;
    public String? StageShortNameLocalkey;
    public String? StageDescriptionLocalkey;
    public String? StageInfoImage;
    public Boolean IsEventStoryStage;
    public String? EventStoryStageLockedAlertMessage;
    public Int32 OpenConditionEventStoryStage;
    public Int32 OpenConditionArchiveEventStoryStage;
    public String? OpenConditionEventStoryStageLocale;
    public Int32 OpenConditionTdStage;
    public DateTime OpenConditionTime;
    public String? TowerDefenseStageMapPrefab;
    public Int32 WaveDataGroupId;
    public Int32 DefensePoint;
    public Int32 StartGold;
    public Int32 MaxHeroSlot;
    public Int32 HeroSlotOpenCount;
    public TowerDefenseClearConditionType StageClearConditionType;
    public Int32 StageClearConditionValue;
    public Int32 StageFirstClearReward;
    public Int32 StageFirstClearUpgradeCurrencyReward;
    public String? EnterScenario;
    public String? ExitScenario;
    public Int32 StageSelectTutorialId;
}

[MemoryPackable]
public partial class EventTowerDefenseTowerSkillRecord
{
    public Int32 Id;
    public Int32 SkillGroupId;
    public TowerDefenseSkillSystemType SkillSystemType;
    public String? SkillName;
    public String? SkillDescription;
    public String? SkillDescriptionShort;
    public String? SkillIcon;
    public String? SkillIconBackground;
    public String? SkillProjectile;
    public TowerDefenseTowerSkillProjectileMuzzleType SkillProjectileMuzzleType;
    public String? SkillFireEffect;
    public String? SkillHitEffect;
    public TowerDefenseSkillHitEffectType SkillHitEffectType;
    public String? SkillAuraEffect;
    public TowerDefenseSkillAuraEffectType SkillAuraEffectType;
    public TowerDefenseTowerSkillAuraEffectTargetType SkillAuraEffectTargetType;
    public Int32 SkillAuraEffectHoldTime;
    public String? SkillAreaEffect;
    public TowerDefenseSkillAreaEffectType SkillAreaEffectType;
    public Boolean SkillSpineResourceParameterOn;
    public Int32 SkillSpineResourceParameterHoldTime;
    public Boolean UseSkillSpineAnimation;
    public Int32 SkillLevel;
    public Int32 SkillCost;
    public TowerDefenseSkillUseType SkillUseType;
    public Int32 SkillCoolTime;
    public Int32 SkillUseAttackCount;
    public TowerDefenseSkillType SkillType;
    public TowerDefenseTowerAttackPriorityType SkillTargetSelectPriority;
    public Int32 SkillEffectRange;
    public Int32 SkillInstantEffectApplyDelay;
    public Int32 SkillMissileProjectileCount;
    public Int32 SkillMissileProjectileFireDelay;
    public Int32 SkillProjectileApproachTime;
    public Int32 SkillProjectileMaxHeight;
    public Int32 SkillProjectileMissilePropulsionStartTiming;
    public Int32 SkillAreaHoldTime;
    public Int32 SkillAreaEffectDuration;
    public Int32 SkillNormalAttackEnhanceTime;
    public List<SkillEffectListData>? SkillEffectList;
}

[MemoryPackable]
public partial class EventTowerDefenseTowerRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 TowerGroupId;
    public Int32 LinkedGroupId;
    public Boolean IsForCinematic;
    public TowerDefenseTowerType TowerType;
    public String? TowerName;
    public String? TowerDescription;
    public String? TowerResource;
    public String? TowerProjectile;
    public String? TowerHitEffect;
    public String? TowerIcon;
    public Int32 TowerLevel;
    public Int32 TowerCost;
    public Int32 TowerOpenConditionStageOrder;
    public Int32 TowerOpenConditionStageClear;
    public TowerDefenseTowerReinforceType TowerReinforceType;
    public Int32 TowerReinforceValue01;
    public Int32 TowerReinforceValue02;
    public Int32 AttackRange;
    public TowerDefenseTowerAttackPriorityType AttackPriority01;
    public TowerDefenseTowerAttackPriorityType AttackPriority02;
    public TowerDefenseTowerAttackType AttackType;
    public Int32 AttackEffectRange;
    public Int32 AttackTargetCount;
    public Int32 AttackProjectileApproachTime;
    public Int32 AttackProjectileMaxHeight;
    public Int32 AttackProjectileMissilePropulsionStartTiming;
    public TowerDefenseTowerAttackMovementType AttackMovementType;
    public Int32 TowerStatAtk;
    public Int32 TowerStatDefPenetration;
    public Int32 TowerStatRpm;
    public String? TowerRpmText;
    public Int32 TowerStatCastDelay;
    public Int32 ApplyDebuff;
    public Int32 ApplyChance;
    public Int32 ApplyDebuffHoldTime;
    public TowerDefenseHitEffectPrintType HitEffectPrintType;
    public List<TowerSkillListData>? TowerSkillList;
    public Int32 TowerBurstSkill;
    public Int32 TowerDefaultBuff;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialListRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 TutorialPageGroupId;
    public EventTowerDefenseTutorialType TutorialType;
    public EventTowerDefenseTutorialButtonType ButtonType;
    public String? ButtonValue;
    public EventTowerDefenseTutorialOutputType TutorialOutputType;
    public Int32 TutorialOutputValue;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialPageRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public EventTowerDefenseTutorialPageType PageType;
    public Int32 PageOrder;
    public Boolean IsAvailableInArcade;
    public String? ImageResource;
    public String? PageTitleLocalkey;
    public String? TutorialLocalkey;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialRecord
{
    public Int32 Id;
    public Int32 MinigameManagerId;
    public Int32 TutorialListGroupId;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class EventTowerDefenseUpgradeGroupRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 UpgradeGroupOrder;
    public String? UpgradeGroupIcon;
    public TowerDefenseUpgradeTargetType UpgradeTargetType;
    public Int32 UpgradeTargetTowerGroupId;
    public Int32 UpgradeListGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseUpgradeListRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 UpgradeListOrder;
    public String? UpgradeName;
    public String? UpgradeDescription;
    public String? UpgradeIcon;
    public Int32 UpgradeCost;
    public TowerDefenseUpgradeType UpgradeEffectType;
    public Int32 UpgradeEffectValue;
}

[MemoryPackable]
public partial class EventTowerDefenseWaveDataRecord
{
    public Int32 Id;
    public Int32 WaveDataGroupId;
    public Int32 WaveOrder;
    public Int32 WaveStartWaitingTime;
    public Int32 WaveFastStartRewardGold;
    public Int32 NextWaveCallTime;
    public Int32 NextWaveCallMonsterKillId;
    public TowerDefenseWaveType WaveType;
    public Int32 WavePathGroupId;
    public Int32 WaveRepresentMonster;
    public Int32 ChallengeScore;
}

[MemoryPackable]
public partial class EventTowerDefenseWavePathRandomRecord
{
    public Int32 Id;
    public Int32 RandomGroupId;
    public Int32 WavePathGroupId;
    public Int32 RandomChance;
    public Int32 WaveRepresentMonster;
}

[MemoryPackable]
public partial class EventTowerDefenseWavePathRecord
{
    public Int32 Id;
    public Int32 WavePathGroupId;
    public Int32 SpawnStartTime;
    public Int32 SpawnMonsterId;
    public Int32 SpawnCount;
    public Int32 SpawnDelay;
    public String? StartingPointGroup;
    public TowerDefenseStartingPointType StartingPointType;
    public Int32 StartingPointMinOrder;
    public Int32 StartingPointMaxOrder;
    public Int32 ForcedStartingPointIndex;
}

[MemoryPackable]
public partial class EventYXMiniGameProfileRecord_Raw
{
    public EventSystemType EventSystemType;
    public String? ProfleAddressable;
}

[MemoryPackable]
public partial class ExtraStageListRecord
{
    public Int32 Id;
    public Int32 CampaignStageId;
    public Int32 Chapter;
    public Int32 ExtraOpenCondition;
}

[MemoryPackable]
public partial class FavoriteItemExpRecord
{
    public Int32 Id;
    public FavoriteItemRare FavoriteRare;
    public Int32 Level;
    public Int32 NeedExp;
}

[MemoryPackable]
public partial class FavoriteItemLevelRecord
{
    public Int32 Id;
    public Int32 LevelEnhanceId;
    public Int32 Grade;
    public Int32 Level;
    public List<FavoriteItemStatData>? FavoriteitemStatData;
    public List<CollectionItemSkillLevelData>? CollectionSkillLevelData;
}

[MemoryPackable]
public partial class FavoriteItemProbabilityRecord
{
    public Int32 Id;
    public Int32 ProbabilityGroup;
    public Int32 LevelMin;
    public Int32 LevelMax;
    public Int32 NeedItemId;
    public Int32 NeedItemCount;
    public Int32 Exp;
    public Int32 GreatSuccessRate;
    public Int32 GreatSuccessLevel;
}

[MemoryPackable]
public partial class FavoriteItemQuestStageRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ChapterId;
    public ChapterMod ChapterMod;
    public Int32 NameCode;
    public Int32 SpawnConditionFavoriteitemQuestId;
    public Int32 SpawnConditionFavoriteitemQuestStageId;
    public Int32 SpawnConditionCampaignStageId;
    public Int32 EnterConditionFavoriteitemQuestId;
    public Int32 EnterConditionFavoriteitemQuestStageId;
    public Int32 EnterConditionCampaignStageId;
    public String? NameLocalkey;
    public StageCategory StageCategory;
    public Boolean SpotAutocontrol;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Int32 FieldMonsterId;
    public Int32 SpotId;
    public Int32 StateEffectFunctionId;
    public Int32 RewardId;
    public ScenarioType EnterScenarioType;
    public String? EnterScenario;
    public ScenarioType ExitScenarioType;
    public String? ExitScenario;
    public Int32 FixedPlayCharacterId;
    public Int32 CharacterLv;
}

[MemoryPackable]
public partial class FavoriteItemQuestRecord
{
    public Int32 Id;
    public Int32 NameCode;
    public Category ConditionType;
    public Int32 ConditionValue;
    public String? ConditionUiLocalkey;
    public String? QuestThumbnailResourceId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 NextQuestId;
    public String? EndScenarioId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class FavoriteItemRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? IconResourceId;
    public String? ImgResourceId;
    public String? PropResourceId;
    public Int32 Order;
    public FavoriteItemRare FavoriteRare;
    public FavoriteItemType FavoriteType;
    public WeaponType WeaponType;
    public Int32 NameCode;
    public Int32 MaxLevel;
    public Int32 LevelEnhanceId;
    public Int32 ProbabilityGroup;
    public List<CollectionSkillGroupData>? CollectionSkillGroupData;
    public List<FavoriteItemSkillGroupData>? FavoriteitemSkillGroupData;
    public Int32 AlbumcategoryId;
}

[MemoryPackable]
public partial class FieldInteractionActionTriggerRecord
{
    public Int32 Id;
    public Boolean IsArchiveData;
    public FieldInteractionActionTriggerFieldType FieldType;
    public Int32 FieldId;
    public FieldInteractionActionTriggerFieldDifficultyType FieldDifficulty;
    public List<StoryEventIdListData_Raw>? StoryEventIdList;
    public FieldInteractionActionTriggerType TriggerType;
    public String? TriggerTypeValue;
    public FieldInteractionActionQuestType QuestType;
    public Boolean IsAwakeLoad;
    public Boolean IsUseSpawnCondition;
    public DateTime SpawnConditionTime;
    public Int32 SpawnConditionStage;
    public Int32 SpawnConditionMission;
    public Int32 SpawnConditionInteractionActionTrigger;
    public Int32 SpawnConditionFieldItem;
    public Boolean IsUseDespawnCondition;
    public DateTime DespawnConditionTime;
    public Int32 DespawnConditionStage;
    public Int32 DespawnConditionMission;
    public Int32 DespawnConditionInteractionActionTrigger;
    public Int32 DespawnConditionFieldItem;
    public FieldInteractionActionActiveType TriggerActiveType;
    public FieldInteractionActionActionType TriggerActionType;
    public Int32 TriggerActionValue;
    public String? InteractionMarkerResource;
    public Boolean IsRepeatStopOnOverlap;
    public Boolean IsUseCameraAction;
    public Boolean IsUseHudHide;
    public Boolean IsUseFadeInOut;
    public Int32 FadeInOutDelay;
    public Int32 OutroFadeInOutStartTime;
}

[MemoryPackable]
public partial class FieldItemRecord
{
    public Int32 Id;
    public FieldItemType ItemType;
    public Int32 TypeValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? FielditemPrefab;
    public ObtainContentsType ObtainContents;
    public Int32 ObtainLocation;
    public FieldItemObtainDifficulty Difficulty;
    public String? ObtainScenario;
    public Boolean IsFinalReward;
    public Int32 BlueprintId;
    public DateTime SpawnTime;
    public DateTime DespawnTime;
    public Boolean IsArchiveFieldItem;
    public Int32 SpawnConditionStage;
    public Int32 StoryEventId;
    public Int32 SpawnConditionItem;
    public Int32 SpawnConditionInteractionActionTrigger;
    public Int32 SpawnDelayInteractionActionTrigger;
    public Boolean IsUseHint;
}

[MemoryPackable]
public partial class FieldMapRecord
{
    public String? Id;
    public List<DefaultSpawnerData>? CameraPoint;
    public List<DefaultSpawnerData>? StartingPoint;
    public List<SupplyPointData>? SupplyPoint;
    public List<DefaultSpawnerData>? AssistSquadSpawner;
    public List<DefaultSpawnerData>? CharacterSpawner;
    public List<InteractionObjectData>? InteractionObjectSpawner;
    public List<ItemSpawnerData>? ItemSpawner;
    public List<NPCSpawnerData>? NpcSpawner;
    public List<QuestObjectData>? QuestObjectSpawner;
    public List<DefaultSpawnerData>? SquadSpawner;
    public List<StageSpawnerData>? StageSpawner;
    public List<DoorSpawnerData>? Door;
    public List<PasswordDoorSpawnerData_Raw>? PasswordDoor;
    public List<LevelTriggerData>? LargeLevelTrigger;
    public List<LevelTriggerData>? LevelTrigger;
    public List<DefaultSpawnerData>? Portal;
    public List<DefaultSpawnerData>? PortalSet;
    public List<DefaultSpawnerData>? SquadEdit;
    public List<DefaultSpawnerData>? MovePoint;
    public List<DefaultSpawnerData>? OutpostBattleBoxSpawner;
    public List<DefaultSpawnerData>? RoamingCharacterMovePoint;
    public List<DefaultSpawnerData>? BuildingSpawner;
    public List<DefaultSpawnerData>? EnterBuilding;
    public List<DefaultSpawnerData>? MonsterSpawner;
    public List<EventTargetSpawnerData>? EventTargetSpawner;
    public List<PasswordSpawnerData_Raw>? PasswordSpawner;
    public List<LevelTriggerData>? ConvertLevelTrigger;
    public List<DefaultSpawnerData>? ConvertTile;
    public List<LevelTriggerData>? EchoDialogueTrigger;
}

[MemoryPackable]
public partial class FieldPasswordCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public String? PasswordCharacterResource;
}

[MemoryPackable]
public partial class FieldPasswordCodeRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public Int32 Input;
}

[MemoryPackable]
public partial class FieldPasswordDoorRecord_Raw
{
    public Int32 Id;
    public String? UiPrefabResource;
    public Int32 PasswordId;
    public Int32 InteractionDistance;
    public String? InteractionMarker;
    public Int32 HintPrintTime;
    public Boolean IsUseMinimapHint;
    public String? MinimapHintIcon;
}

[MemoryPackable]
public partial class FieldPasswordRecord_Raw
{
    public Int32 Id;
    public String? UiPrefabResource;
    public Int32 PasswordCharacterGroupId;
    public Int32 PasswordCodeGroupId;
    public String? PasswordDescription;
    public String? FielditemPrefab;
    public ObtainContentsType ObtainContents;
    public Int32 ObtainLocation;
    public FieldItemObtainDifficulty Difficulty;
    public String? ObtainScenario;
    public Boolean IsFinalReward;
    public DateTime SpawnTime;
    public Boolean IsArchivePassword;
    public Int32 SpawnConditionStage;
    public Int32 StoryEventId;
    public Int32 SpawnConditionItem;
    public Int32 SpawnConditionInteractionActionTrigger;
    public Int32 SpawnDelayInteractionActionTrigger;
    public Int32 SpawnConditionPasswordDoorOpen;
    public Boolean IsUseMinimapHint;
    public String? MinimapHintIcon;
}

[MemoryPackable]
public partial class FieldTalkDialogRecord
{
    public String? Id;
    public String? GroupId;
    public SpeechWindowType SpeechWindow;
    public String? SpeakName;
    public String? PlayAnimation;
    public String? ScenarioLocalekey;
    public String? PlaySound;
    public String? PlayBgm;
}

[MemoryPackable]
public partial class FieldTriggerControlRecord_Raw
{
    public Int32 Id;
    public FieldTriggerFieldType FieldType;
    public Boolean IsUseSpawnCondition;
    public Int32 SpawnConditionStage;
    public DateTime SpawnConditionTime;
    public Boolean IsUseDespawnCondition;
    public Int32 DespawnConditionStage;
    public DateTime DespawnConditionTime;
    public Boolean IsUseStateChangeCondition;
    public Int32 StateChangeConditionStage;
    public DateTime StateChangeConditionTime;
}

[MemoryPackable]
public partial class FishingCastingRecord
{
    public Int32 Id;
    public Int32 CastingSpeed;
    public Int32 CastingGroupStart01;
    public Int32 CastingGroupEnd01;
    public FishGroupType Casting01BonusGroup;
    public Int32 CastingGroupStart02;
    public Int32 CastingGroupEnd02;
    public FishGroupType Casting02BonusGroup;
    public Int32 CastingGroupStart03;
    public Int32 CastingGroupEnd03;
    public FishGroupType Casting03BonusGroup;
}

[MemoryPackable]
public partial class FishingManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchiveEvent;
    public String? EnterScenario;
    public String? UseFishCollectionData;
    public Int32 UseSpotGroupId;
    public Int32 CastingBonusRatio;
    public Int32 CastingLimitTime;
    public Int32 SpecialPatternDecreaseHpRatio;
    public Int32 JudgmentStartDistance;
    public Int32 PerfectZoneDistance;
    public Int32 GreatZoneDistance;
    public Int32 GoodZoneDistance;
    public Int32 PerfectDecreaseHp;
    public Int32 GreatDecreaseHp;
    public Int32 GoodDecreaseHp;
    public Int32 SmallHpDecreaseRatio;
    public Int32 MidHpDecreaseRatio;
    public Int32 LargeHpDecreaseRatio;
    public Int32 PenaltyHp;
    public Int32 TimeAlert;
    public Int32 GainGoldRatio;
    public Int32 CatchDoubleRatio;
    public Int32 FishingMaximumSizeRatio;
    public Int32 PatternStartDelayTime;
    public Int32 ResultWindowDelayTime;
}

[MemoryPackable]
public partial class FishingSpotRecord
{
    public Int32 Id;
    public Int32 FishingManagerId;
    public Int32 GroupId;
    public Boolean IsRareSpot;
    public AdventureSpotOpenCondition OpenCondition;
    public Int32 OpenConditionValue;
    public Int32 SpawnDayStart;
    public Int32 SpawnDayEnd;
    public List<catchable_group_list>? CatchableGroupList;
    public Int32 CastingId;
    public Boolean IsInfinity;
    public Int32 CatchableCount;
    public String? SpotFishEffectResource;
    public String? SpotOutlineEffectResource;
    public Int32 SmallFishingRatio;
    public Int32 MidFishingRatio;
    public Int32 LargeFishingRatio;
    public Int32 CameraZoomIn;
}

[MemoryPackable]
public partial class FishPatternDirectionRecord
{
    public Int32 Id;
    public String? ResourceId;
}

[MemoryPackable]
public partial class FishPatternRecord
{
    public Int32 Id;
    public Int32 TimeLimit;
    public Int32 PatternSpeed;
    public Int32 PatternTerm;
    public Int32 PatternNormalId;
    public Int32 PatternLeftAppearanceProbability;
    public Int32 PatternRightAppearanceProbability;
    public Int32 PatternUpAppearanceProbability;
    public Int32 PatternDownAppearanceProbability;
    public Int32 PatternSpecialId;
    public Int32 SpecialPatternAppearanceRatio;
    public Boolean SpecialPatternLeftUse;
    public Boolean SpecialPatternRightUse;
    public Boolean SpecialPatternUpUse;
    public Boolean SpecialPatternDownUse;
}

[MemoryPackable]
public partial class FishRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public FishGroupType FishGroup;
    public String? NameLocale;
    public String? DescriptionLocale;
    public String? CatchResource;
    public Int32 FishPattern;
    public Int32 FishHp;
    public Int32 CatchPoint;
    public Int32 MinSize;
    public Int32 MaxSize;
    public Int32 AppearanceRatio;
    public Int32 CatchableTime;
}

[MemoryPackable]
public partial class FixedPlayCharacterRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public FixedPlayCharacterContentsType FixContentsType;
    public Int32 Slot;
    public Boolean IsUseSd;
    public Boolean IsSlotOpen;
    public Int32 CharacterId;
    public Int32 CostumeIndex;
    public Int32 CharacterLevel;
    public Int32 AttractiveLevel;
    public List<FixedEquipmentData>? EquipmentArray;
}

[MemoryPackable]
public partial class FreeRewardPassManagerRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 MissionGroupId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 RankSkipCurrencyId;
    public Int32 RankSkipCurrencyValue;
    public String? PassLobbyButtonResourceId;
    public String? PrefabId;
}

[MemoryPackable]
public partial class FreeRewardPassMissionRecord_Raw
{
    public Int32 Id;
    public Int32 MissionGroupId;
    public RenewType RenewType;
    public Int32 Order;
    public MissionTriggerType MissionTriggerType;
    public Trigger TriggerConditionType;
    public Int32 TriggerConditionId;
    public Int32 TriggerConditionValue;
    public DataCheckForPass DatacheckConditionType;
    public Int32 DatacheckConditionId;
    public Int32 DatacheckConditionValue;
    public String? NameLocalkey;
    public Int32 PointValue;
}

[MemoryPackable]
public partial class FreeRewardPassRecord_Raw
{
    public Int32 Id;
    public Int32 PassId;
    public Int32 PassRank;
    public Int32 TotalRequiredPoint;
    public Int32 RewardId;
    public Boolean IsHighlight;
}

[MemoryPackable]
public partial class GachaCustomizeRecord
{
    public Int32 Id;
    public GachaCategory GachaType;
    public Int32 GachaId;
    public Boolean IsCharPremium;
    public Boolean IsWishListDefault;
}

[MemoryPackable]
public partial class GachaListProbRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public GachaCategory GachaType;
    public GachaSubType GachaSubType;
    public Int32 GachaId;
    public Int32 Prob;
}

[MemoryPackable]
public partial class GachaPaybackStepRecord_Raw
{
    public Int32 Id;
    public Int32 PaybackId;
    public Int32 Step;
    public Int32 GachaCount;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class GachaPaybackRecord_Raw
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 GachaId;
    public Int32 CharacterId;
    public String? UiPrefabMain;
    public String? UiPrefabSub;
}

[MemoryPackable]
public partial class GachaPityCharacterRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 CharacterId;
    public Int32 Order;
}

[MemoryPackable]
public partial class GachaPityRecord_Raw
{
    public Int32 Id;
    public Int32 GachaTypeId;
    public Int32 PityAmount;
    public Int32 NeedGachaCount;
    public Int32 PityCharacterGroup;
    public Int32 RewardAmount;
    public DateTime StartDate;
    public DateTime EndDate;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 HelptipGroupId;
    public String? UiBannerPrefab;
    public String? UiPopupPrefab;
}

[MemoryPackable]
public partial class GachaPriceObjectRecord_Raw
{
    public Int32 Id;
    public Int32 Object0;
    public Int32 Object1;
    public Int32 Object2;
    public Int32 Object3;
    public Int32 Object4;
}

[MemoryPackable]
public partial class GachaSelectupListRecord_Raw
{
    public Int32 Id;
    public Int32 GachaTypeId;
    public Int32 Order;
    public Int32 CharacterId;
    public Boolean IsDefault;
}

[MemoryPackable]
public partial class GachaTypeRecord
{
    public Int32 Id;
    public GachaPremiumType Type;
    public Int32 OrderId;
    public Int32 EventId;
    public GachaProvideCountType GachaProvideCountType;
    public Boolean UseDailyDiscountOne;
    public Int32 DailyFreeGachaEventId;
    public Int32 GachaPriceObjectId;
    public List<GachaPrice_Data>? GachaPriceGroup;
    public Int32 GradeProbId;
    public Boolean IsMaxCount;
    public Int32 MaxCeilingCount;
    public Int32 FixedCharAmount;
    public String? GachaPagePrefab;
    public GachaPrefabType GachaPrefabType;
    public Int32 PickupCharGroupId;
    public Int32 GachaPlayMaxCount;
    public Int32 GachaRewardId;
    public Int32 GachaPlayMaxCountRewardId;
    public Int32 PreviousGachaId;
    public String? GachaQuickBannerResourceId;
}

[MemoryPackable]
public partial class GradeCoreEquipmentRecord
{
    public Int32 Id;
    public Int32 Grade;
    public Int32 MaxLevel;
    public Int32 MaxGrade;
    public Int32 MaterialValue;
    public String? Rarity;
}

[MemoryPackable]
public partial class GradeCoreRecord
{
    public Int32 Id;
    public OriginalRareType Rare;
    public Int32 Grade;
    public Int32 Core;
    public Int32 MaxLevel;
    public Int32 PieceValue;
    public Int32 MaxAttractiveLevel;
}

[MemoryPackable]
public partial class GrindingCharacterRecord
{
    public Int32 Id;
    public OriginalRareType Rarity;
    public RewardEntry? Reward;
}

[MemoryPackable]
public partial class GuildRecord
{
    public Int32 Grade;
    public Int32 Exp;
    public Int32 MaxMemberCount;
    public Int32 MaxActivityPoint;
}

[MemoryPackable]
public partial class HelpTipDescriptionRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Order;
    public HelpTipDescriptionType Type;
    public String? Value;
}

[MemoryPackable]
public partial class HelpTipRecord
{
    public Int32 Id;
    public Int32 ViewId;
    public Int32 ViewSubId;
    public String? Title;
    public Int32 DescriptionGroup;
    public ContentsTutorialSubGroup HudTutorialReplay;
}

[MemoryPackable]
public partial class InAppShopManagerRecord
{
    public Int32 Id;
    public CashshopMainCategoryType MainCategoryType;
    public Int32 OrderGroupId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? MainCategoryIconName;
    public Int32 SubCategoryId;
    public String? SubCategoryNameLocalkey;
    public Int32 PackageShopId;
    public Boolean IsHideIfNotValid;
    public RenewType RenewType;
    public DateTime StartDate;
    public DateTime EndDate;
    public Boolean DateUiControl;
    public InAppShopType ShopType;
    public InAppShopCategory ShopCategory;
    public String? ShopPrefabName;
}

[MemoryPackable]
public partial class InfraCoreFunctionRecord
{
    public Int32 Id;
    public InfraCoreFunctionType FunctionType;
    public String? FunctionLocalkey;
    public Int32 Order;
    public Boolean IsHidden;
}

[MemoryPackable]
public partial class InfraCoreGradeRecord
{
    public Int32 Id;
    public Int32 Grade;
    public Int32 InfraCoreExp;
    public Int32 RewardId;
    public List<InfraCoreGradeData>? FunctionList;
}

[MemoryPackable]
public partial class InterceptAnomalousManagerRecord_Raw
{
    public Int32 Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public Int32 Group;
}

[MemoryPackable]
public partial class InterceptAnomalousRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public String? Name;
    public String? Description;
    public String? Thumbnail;
    public String? MonsterSpine;
    public Int32 MonsterSpineScale;
    public Int32 Order;
    public Int32 LimitCharacterLv;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public Int32 SpotId;
    public Int32 DummySpotId;
    public Int32 AutoChargeId;
    public Int32 TicketCount;
    public String? RewardInfoIcon;
    public String? RewardInfoLocale;
    public Boolean UseRewardPriority;
    public Int32 PriorityGrade;
    public Int32 ConditionRewardGroup;
    public List<percent_condition_reward_group_data_Raw>? PercentConditionRewardGroups;
    public Boolean UseFixedResult;
    public Int32 FixedDamage;
    public String? BgColor;
    public Int32 ResultCharacterResourceId;
    public InterceptAnomalousRecommendConditionType RecommendConditionType;
    public String? RecommendConditionValue;
    public Int32 RecommendConditionCount;
}

[MemoryPackable]
public partial class InterceptNormalManagerRecord
{
    public Int32 Id;
    public Int32 Group;
}

[MemoryPackable]
public partial class InterceptNormalRecord
{
    public Int32 Id;
    public Int32 Group;
    public InterceptType Type;
    public String? Name;
    public String? ShortName;
    public String? Description;
    public String? Thumbnail;
    public String? MonsterSpine;
    public Int32 MonsterSpineScale;
    public Int32 Order;
    public Int32 CharacterLv;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public Int32 SpotId;
    public Int32 DummySpotId;
    public Int32 AutoChargeId;
    public Int32 TicketCount;
    public Int32 ConditionRewardGroup;
    public Int32 PercentConditionRewardGroup;
    public Boolean UseRewardPriority;
    public Int32 PriorityGrade;
    public Boolean UseFixedResult;
    public Int32 FixedDamage;
    public Int32 ResultCharacterResourceId;
}

[MemoryPackable]
public partial class InterceptSpecialManagerRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 StartId;
}

[MemoryPackable]
public partial class IslandAdventureAlbumRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public PhotoSpotType PhotoGroup;
    public Int32 Order;
    public Int32 PhotoPoint;
    public Int32 PhotoSpotId;
}

[MemoryPackable]
public partial class IslandAdventureFishCollectionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public FishGroupType FishGroup;
    public Int32 Order;
    public Int32 FishPoint;
    public Int32 FishId;
}

[MemoryPackable]
public partial class IslandAdventureItemRecord
{
    public Int32 Id;
    public IslandAdventureItemGroupType ItemGroup;
    public Int32 ItemOrder;
    public Boolean FirstItem;
    public String? ItemResource;
    public String? ItemNameLocale;
    public String? ItemDescriptionLocale;
    public List<ItemOptionLocaleData>? ItemOptionLocale;
    public Int32 MaximumAmount;
    public List<ItemOptionData>? ItemOption;
}

[MemoryPackable]
public partial class IslandAdventureManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchiveEvent;
    public String? EnterScenario;
    public Int32 FishCollectionGroup;
    public Int32 FishStepUpRewardGroupId;
    public Int32 AlbumDataGroup;
    public Int32 PhotoStepUpRewardGroupId;
    public Int32 ShopDataGroup;
    public Int32 UnionRankDataGroup;
}

[MemoryPackable]
public partial class IslandAdventureMissionRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public String? MissionLocalkey;
    public EventIslandAdventureMissionCategory MissionCategory;
    public EventIslandAdventureMissionType MissionType;
    public Int32 MissionTargetId;
    public Int32 MissionCount;
    public EventIslandAdventureMissionRewardType RewardType;
    public Int32 RewardValue;
}

[MemoryPackable]
public partial class IslandAdventureShopRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public IslandAdventureItemGroupType ItemGroup;
    public Boolean RepeatPurchase;
    public Boolean IsOpened;
    public IslandAdventureItemOpenType OpenConditionType;
    public Int32 OpenConditionValue;
    public Int32 ShopItemOrder;
    public Int32 ItemPrice;
    public Int32 ItemId;
}

[MemoryPackable]
public partial class IslandAdventureStepUpRewardRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Step;
    public Int32 TargetPoint;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class IslandAdventureTutorialListRecord
{
    public Int32 Id;
    public Int32 ManagerId;
    public Int32 TutorialPageId;
    public IslandAdventureTutorialOutputType TutorialOutputType;
    public Int32 TutorialOutputValue;
    public String? TutorialTitleLocalkey;
    public Boolean IsOpened;
}

[MemoryPackable]
public partial class IslandAdventureUnionRankingRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public IslandAdventureUnionRankingGroup RankType;
}

[MemoryPackable]
public partial class ItemEquipCombinationGroupRecord_Raw
{
    public Int32 Id;
    public ItemEquipCombinationGroupType OptionGroup;
    public Int32 Order;
    public ItemEquipCombinationOptionType OptionType;
    public String? NameLocalekey;
    public String? IconId;
}

[MemoryPackable]
public partial class ItemEquipCombinationListRecord_Raw
{
    public Int32 Id;
    public List<OptionType_Raw>? OptionType;
    public Int32 RandomGroupId;
}

[MemoryPackable]
public partial class ItemEquipCombinationRecord_Raw
{
    public Int32 Id;
    public CorporationType MaterialType;
    public EquipmentRarityType MaterialGrade;
    public Int32 MaterialCount;
    public List<OptionGroup_Raw>? OptionGroup;
}

[MemoryPackable]
public partial class ItemEquipCorpSettingRecord
{
    public Int32 Id;
    public RewardType Key;
    public CorporationType CorpType;
    public String? CorpDescriptionLocalkey;
    public Int32 RatioNone;
    public Int32 RatioMissilis;
    public Int32 RatioElysion;
    public Int32 RatioTetra;
    public Int32 RatioPilgrim;
    public Int32 RatioAbnormal;
}

[MemoryPackable]
public partial class ItemEquipExpRecord
{
    public Int32 Id;
    public EquipmentRarityType ItemRare;
    public Int32 GradeCoreId;
    public Int32 Level;
    public Int32 Exp;
}

[MemoryPackable]
public partial class ItemEquipGradeExpRecord
{
    public Int32 Id;
    public EquipmentRarityType ItemRare;
    public Int32 GradeCoreId;
    public Int32 Exp;
}

[MemoryPackable]
public partial class ItemEquipRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public CharacterClassType Class;
    public EquipmentRarityType ItemRare;
    public Int32 GradeCoreId;
    public Int32 GrowGrade;
    public List<StatData>? Stat;
    public List<OptionSlot>? OptionSlot;
    public Int32 OptionCost;
    public Int32 OptionChangeCost;
    public Int32 OptionLockCost;
}

[MemoryPackable]
public partial class ItemMaterialRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public Int32 ItemValue;
    public MaterialType MaterialType;
    public Int32 MaterialValue;
    public Int32 StackMax;
}

[MemoryPackable]
public partial class ItemPieceRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public CharacterClassType Class;
    public ItemUseType UseType;
    public Int32 UseId;
    public Int32 UseValue;
    public Boolean UseLimitCount;
    public Int32 UseLimitCountValue;
    public Int32 StackMax;
}

[MemoryPackable]
public partial class ItemRandomRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public RewardType RewardType;
    public Int32 RewardId;
    public Int32 RewardValueMin;
    public Int32 RewardValueMax;
    public Int32 Ratio;
}

[MemoryPackable]
public partial class ItemSelectOptionRowRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public RewardType SelectType;
    public Int32 SelectId;
    public Int32 SelectValue;
}

[MemoryPackable]
public partial class JukeboxListRecord
{
    public Int32 Id;
    public Int32 Theme;
    public String? Bgm;
    public Boolean IsLoop;
    public Int32 PlayTime;
    public String? Name;
    public Int32 Order;
    public String? Artist;
    public Boolean IsDefaultBgm;
    public GetInfoType GetInfoType;
    public String? GetInfoValue;
}

[MemoryPackable]
public partial class LiberateAttractiveEpisode
{
    public Int32 Id;
    public Int32 NameCode;
    public String? ConditionScenarioGroupId;
    public String? ScenarioTitleLoacle;
    public String? AttractiveScenarioGroupId;
}

[MemoryPackable]
public partial class LiberateCharacterRecord
{
    public Int32 Id;
    public Int32 TypeGroupId;
    public Int32 CharacterNameCode;
    public ResetType MissionRenewType;
    public Int32 MissionStepGroup;
    public Int32 MissionMaxClearAmount;
    public String? ScenarioId;
}

[MemoryPackable]
public partial class LiberateMissionGroupRecord
{
    public Int32 Id;
    public Int32 MissionStepGroup;
    public Int32 MissionStep;
    public Int32 DefaultMissionGroupId;
    public Int32 ResetMissionGroupId;
    public Int32 StepUpExp;
    public Int32 RewardId;
    public String? ScenarioId;
}

[MemoryPackable]
public partial class LiberateMissionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SubGroupId;
    public Trigger Trigger;
    public String? Description;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public OriginalRareType MissionGrade;
    public Int32 MissionPointValue;
}

[MemoryPackable]
public partial class LiveWallpaperReaction
{
    public Int32 Id;
    public Int32 ReactionTargetId;
    public LiveWallpaperReactionType ReactionType;
    public SpeecherType SpeecherType;
    public Int32 SpeecherResourceId;
    public String? LocaleFile;
    public Int32 TargetChapter;
    public String? SpeechLocalkey;
    public String? ReactionVoice;
    public Int32 Order;
}

[MemoryPackable]
public partial class LobbyDecoBackgroundRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 Order;
    public String? ResourceId;
    public String? MiResourceId;
    public String? SiResourceId;
    public Int32 ConditionCampaignStageClear;
    public PriceType PriceType;
    public Int32 PriceId;
    public Int32 PriceCount;
    public RewardType ExchangeItemType;
    public Int32 ExchangeItemId;
    public Int32 ExchangeItemCount;
    public Boolean IsSecret;
}

[MemoryPackable]
public partial class LobbySettingManagerRecord
{
    public Int32 Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public String? UserLobbyBackground;
    public String? UserLobbyBgm;
}

[MemoryPackable]
public partial class LocaleNickNameListRecord_Raw
{
    public Int32 Id;
    public String? Ko;
    public String? En;
    public String? Ja;
    public String? ZhTw;
    public String? ZhCn;
    public String? De;
    public String? Th;
    public String? Fr;
}

[MemoryPackable]
public partial class LoginEventResourceRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 CharacterId;
    public Int32 CostumeId;
    public String? SetCharacterAnim;
    public String? LogoResourceTable;
    public String? LogoResourceId;
    public String? UiPrefab;
    public Boolean IsReplenishActive;
    public Int32 ReplenishCurrency;
    public Int32 CurrencyValue;
}

[MemoryPackable]
public partial class LoginEventRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 Day;
    public login_event_reward_type LoginEventRewardType;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class LostSectorStageRecord
{
    public Int32 Id;
    public Int32 Sector;
    public Int32 ParentsId;
    public String? NameLocalkey;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Boolean SpotAutocontrol;
    public Int32 FieldMonsterId;
    public Int32 SpotId;
    public String? EnterScenario;
    public String? ExitScenario;
}

[MemoryPackable]
public partial class LostSectorRecord
{
    public Int32 Id;
    public String? SectorLocalkey;
    public String? SectorSubLocalkey;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 Type;
    public Int32 Sector;
    public ContentOpenType OpenConditionType;
    public Int32 OpenConditionValue;
    public Int32 SectorClearCondition;
    public Int32 RequiredSquadCount;
    public Int32 MaxNkCount;
    public String? FieldId;
    public Boolean EnableSmog;
    public Int32 ExplorationReward;
    public String? EnterScenario;
    public String? ExitScenario;
    public String? Bg;
    public String? BgInfo;
}

[MemoryPackable]
public partial class MemorialMemoryRecord
{
    public Int32 MemorialMemoryId;
    public String? MemorialMemoryName;
    public String? MemorialMemoryDescription;
    public Int32 FielditemId;
    public Int32 MemorialMemorySeriesId;
    public String? MemorialMemoryResource;
    public Boolean IsUseObtainScenario;
}

[MemoryPackable]
public partial class MemorialSeriesCategoryRecord
{
    public String? Id;
    public Int32 Order;
    public MemorialSeriesCategoryType CategoryType;
    public String? CategoryName;
    public String? CategoryIcon;
    public MemorialCategoryFormType MemorialFormType;
}

[MemoryPackable]
public partial class MemorialSeriesRecord
{
    public Int32 MemorialSeriesId;
    public Int32 Order;
    public String? MemorialSeriesName;
    public String? MemorialSeriesDescription;
    public String? MemorialSeriesCategory;
    public String? MemorialSeriesResource;
    public Boolean IsEventMemorial;
    public List<MemorialMemoryID>? MemorialMemoryId;
    public Int32 CollectRewardId;
}

[MemoryPackable]
public partial class MessengerConditionTriggerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public List<TriggerData>? TriggerList;
    public MessageType MessageType;
    public String? Tid;
    public Int32 ResourceId;
    public String? NameLocalkey;
    public String? EnterScenarioId;
    public String? ExitScenarioId;
    public Int32 StaminaValue;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class MessengerDialogRecord
{
    public String? Id;
    public String? ConversationId;
    public String? RoomId;
    public MessengerSpeakerType SpeakerType;
    public String? MemberId;
    public MessengerMessageType MessageType;
    public String? JumpTarget;
    public String? DialogLocalkey;
    public String? ResourceId;
    public Int32 RewardId;
    public DateTime RewardExpireDate;
    public Boolean IsOpener;
}

[MemoryPackable]
public partial class MidasProductRecord
{
    public Int32 Id;
    public ProductType ProductType;
    public Int32 ProductId;
    public MidasItemType ItemType;
    public String? MidasProductIdProximabeta;
    public String? MidasProductIdGamamobi;
    public Boolean IsFree;
    public String? Cost;
}

[MemoryPackable]
public partial class MinigameHelpTipDescRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public String? HelptipTitle;
    public String? HelptipImage;
    public String? HelptipDescription;
}

[MemoryPackable]
public partial class MinigameHelpTipRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? PrefabId;
}

[MemoryPackable]
public partial class MiniGameHubRecord_Raw
{
    public Int32 Id;
    public Int32 HubGroup;
    public Int32 HelptipGroup;
    public Int32 HelptipGroupOrder;
    public String? HelptipTitleLocalkey;
    public Boolean IsHidden;
    public String? PrefabId;
}

[MemoryPackable]
public partial class MonsterCallingListRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int64 MonsterId;
    public MonsterSpawnType SpawnType;
    public Int32 StartPoint;
    public Int32 ActionPoint;
    public Int32 DirPoint;
    public Single SpawnTime;
    public Int32 AttackTime;
}

[MemoryPackable]
public partial class MonsterFieldRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ResourceId;
    public String? MonPrefab;
    public AttributeType Attribute;
    public Single FieldMonsterScale;
    public Boolean IsBoss;
    public Int32 FieldSightRange;
    public Int32 FieldMoveVelocity;
    public List<Int32>? FieldSkillId;
    public String? FieldAi;
    public String? SpotJsonPath;
    public Int32 FightingPower;
}

[MemoryPackable]
public partial class MonsterModelRecord
{
    public Int32 Id;
    public Int32 ResourceId;
    public String? MonPrefab;
    public MonsterGradeType Grade;
    public MonsterSizeType Size;
    public MonsterSizeType DissolveType;
    public AttributeType Attribute;
    public MoveType MoveType;
    public CategoryType CategoryType1;
    public CategoryType CategoryType2;
    public CategoryType CategoryType3;
    public CharacterClassType Class;
}

[MemoryPackable]
public partial class MonsterPartsRecord
{
    public Int32 Id;
    public Int32 MonsterModelId;
    public String? PartsNameLocalkey;
    public Int32 DamageHpRatio;
    public Int32 HpRatio;
    public Int32 DefenceRatio;
    public Boolean DestroyAfterAnim;
    public Boolean DestroyAfterMovable;
    public Int32 PassiveSkillId;
    public Boolean VisibleHp;
    public Int32 LinkedPartsId;
    public List<String>? WeaponObject;
    public List<WeaponObjectEnum>? WeaponObjectEnum;
    public PartsType PartsType;
    public List<String>? PartsObject;
    public Int32 EnergyResistRatio;
    public Int32 MetalResistRatio;
    public Int32 BioResistRatio;
    public Int32 AttackRatio;
    public String? PartsSkin;
    public MonsterDestroyAnimTrigger MonsterDestroyAnimTrigger;
    public Boolean IsMainPart;
    public Boolean IsPartsDamageAble;
}

[MemoryPackable]
public partial class MonsterStageLvChangeRecord
{
    public Int32 Id;
    public Int32 Group;
    public Int32 Step;
    public MonsterStageLvChangeConditionType ConditionType;
    public Int64 ConditionValueMin;
    public Int64 ConditionValueMax;
    public Int32 MonsterStageLv;
    public Int32 PassiveSkillId;
    public Int32 TargetPassiveSkillId;
    public Int32 GimmickobjectLvControl;
}

[MemoryPackable]
public partial class MonsterRecord
{
    public Int64 Id;
    public List<Int32>? ElementId;
    public Int32 MonsterModelId;
    public MonsterUIGradeType UiGrade;
    public String? NameLocalkey;
    public String? AppearanceLocalkey;
    public String? DescriptionLocalkey;
    public Boolean IsIrregular;
    public Int32 HpRatio;
    public Int32 DefenceRatio;
    public Int32 AttackRatio;
    public Int32 EnergyResistRatio;
    public Int32 MetalResistRatio;
    public Int32 BioResistRatio;
    public Int32 DetectorCenter;
    public Int32 DetectorRadius;
    public NoneTargetType Nonetarget;
    public FunctionNoneTargetType Functionnonetarget;
    public String? SpotAi;
    public String? SpotAiDefense;
    public String? SpotAiBasedefense;
    public Int32 SpotMoveSpeed;
    public Int32 SpotAccelerationTime;
    public MonsterSpawnType FixedSpawnType;
    public Int32 SpotRandRatioNormal;
    public Int32 SpotRandRatioJump;
    public Int32 SpotRandRatioDrop;
    public Int32 SpotRandRatioDash;
    public Int32 SpotRandRatioTeleport;
    public Int32 PassiveSkillId;
    public List<SkillData>? SkillData;
    public Int32 StatenhanceId;
}

[MemoryPackable]
public partial class MuseumBuffRecord_Raw
{
    public Int32 Id;
    public String? BuffIcon;
    public Int32 SkillId;
}

[MemoryPackable]
public partial class MuseumCommonStageHpGroupRecord_Raw
{
    public Int32 Id;
    public Int32 Group;
    public Int32 WaveOrder;
    public Int64 HpValue;
}

[MemoryPackable]
public partial class MuseumGroupRecord_Raw
{
    public Int32 Id;
    public Int32 Order;
    public String? GroupName;
    public Int32 RankingPointId;
}

[MemoryPackable]
public partial class MuseumMissionRecord_Raw
{
    public Int32 Id;
    public Int32 StageId;
    public Int32 Order;
    public MuseumStageModeType ModeType;
    public MuseumMissionConditionType ConditionType;
    public Int64 ConditionValue;
    public String? MissionDesc;
    public Int32 RewardId;
    public Int32 RankingPointAmount;
}

[MemoryPackable]
public partial class MuseumRankingPointRecord_Raw
{
    public Int32 Id;
    public String? PointIcon;
    public String? PointName;
    public String? PointDesc;
}

[MemoryPackable]
public partial class MuseumStageModeRecord_Raw
{
    public Int32 Id;
    public Int32 StageId;
    public MuseumStageModeType ModeType;
    public Int32 ModeOpenCondition;
    public Int32 CharacterLv;
    public Int32 Wave;
    public Int32 MonsterStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Boolean SpotAutocontrol;
}

[MemoryPackable]
public partial class MuseumStageRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public String? StageName;
    public Int32 BuffId;
    public Int64 MonsterId;
    public String? MonsterImageSi;
    public String? MonsterImage;
    public Int32 SoloRaidManagerId;
    public DateTime SeasonStartDate;
    public DateTime SeasonEndDate;
    public Int32 SoloRaidStageHpGroup;
}

[MemoryPackable]
public partial class MuseumWeeklyBuffGroupRecord_Raw
{
    public Int32 Id;
    public Int32 SeasonId;
    public Int32 WeekCount;
}

[MemoryPackable]
public partial class MuseumWeeklyBuffRecord_Raw
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public Int32 StageId;
    public Int32 BuffId;
}

[MemoryPackable]
public partial class NarrativeSignRecord
{
    public Int32 Id;
    public FieldNarrativeSignType NarrativeSignType;
    public String? NameLocale;
    public String? DescriptionLocale;
    public String? SignIcon;
    public BalloonType BalloonType;
    public Int32 BalloonPrintTime;
}

[MemoryPackable]
public partial class NikkeEpMissionScenarioGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Order;
    public String? ScenarioTitleLoacle;
    public String? ScenarioGroupId;
    public String? ScenarioOpenConditionGroupId;
}

[MemoryPackable]
public partial class NikkeEpMissionRecord
{
    public Int32 Id;
    public Int32 NameCode;
    public Int32 ScenarioGroup;
    public DateTime StartDate;
    public DateTime EndDate;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class OutpostBuildingRecord
{
    public Int32 Id;
    public Int32 ResourceGroupId;
    public Int32 BuildingLv;
    public Int32 InitBuildingSlot;
    public BuildingCategory Category;
    public BuildingDisplayCategory DisplayCategory;
    public String? CategoryLocalkey;
    public Int32 TypeId;
    public Int32 Time;
    public List<BuildConditionData>? BuildCondition;
    public List<OutpostCostData>? Cost;
    public CurrencyType FastCompCurrencyType;
    public Int32 FastCompCurrencyValue;
    public List<OutpostFunctionData>? Function;
    public String? OpenEpisode;
    public Int32 RewardId;
    public ContentsOpen ContentsOpen;
}

[MemoryPackable]
public partial class OutpostFastBattleRecord
{
    public Int32 Id;
    public Int32 FastbattleCondition;
    public CurrencyType PriceType;
    public Int32 PriceValue;
    public Int32 TimeMin;
}

[MemoryPackable]
public partial class OutpostMapChangeSchedulerRecord_Raw
{
    public Int32 Id;
    public String? Desc;
    public String? ResourceId;
    public Int32 SkinGroupId;
    public Boolean IsDefault;
    public DateTime StartDate;
    public DateTime EndDate;
}

[MemoryPackable]
public partial class OutpostResourceRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SkinGroupId;
    public String? SkinGroupLocalkey;
    public Int32 EventId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? BuildingSpriteResourceId;
    public String? BuildingSymbolResourceId;
    public String? BuildingResourceId;
}

[MemoryPackable]
public partial class PackageGroupRecord
{
    public Int32 Id;
    public Int32 PackageGroupId;
    public RewardType ProductType;
    public Int32 ProductId;
    public Int32 ProductValue;
}

[MemoryPackable]
public partial class PackageListRecord
{
    public Int32 Id;
    public Int32 PackageShopId;
    public Int32 PackageOrder;
    public Int32 ProductId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public Boolean IsActive;
}

[MemoryPackable]
public partial class PackageShopRecord
{
    public Int32 Id;
    public Int32 PackageGroupId;
    public Int32 ProductGrade;
    public Int32 ProductEfficiency;
    public Boolean IsFree;
    public Int32 MidasProductId;
}

[MemoryPackable]
public partial class PassCostumeListRecord_Raw
{
    public Int32 Id;
    public Int32 PackageShopId;
    public Int32 PackageOrder;
    public Int32 PassCostumeShopId;
    public Boolean IsActive;
}

[MemoryPackable]
public partial class PassCostumeShopRecord_Raw
{
    public Int32 Id;
    public Int32 PackageGroupId;
    public Int32 CostumeId;
    public DateTime StartDate;
    public DateTime EndDate;
    public Int32 MidasProductId;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
}

[MemoryPackable]
public partial class PassMissionRecord
{
    public Int32 Id;
    public Int32 PassPointId;
    public Trigger ConditionType;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class PhotoManagerRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Boolean IsArchiveEvent;
    public Int32 UseSpotGroupId;
    public PhotoZoomType DefaultZoomValue;
    public PhotoObjectType DefaultObjectGroupValue;
    public PhotoFlashType DefaultFlashValue;
    public String? MistakePhotoLocale;
    public String? ChangeCharacterModel;
    public String? ChangeCharacterEffect;
    public Int32 ResultWindowDelayTime;
}

[MemoryPackable]
public partial class PhotoQuizRecord
{
    public Int32 Id;
    public PhotoZoomType ZoomValue;
    public PhotoObjectType ObjectGroupValue;
    public PhotoFlashType FlashValue;
}

[MemoryPackable]
public partial class PhotoSpotRecord
{
    public Int32 Id;
    public Int32 PhotoManagerId;
    public Int32 GroupId;
    public Int32 SpotGroup;
    public PhotoSpotType SpotType;
    public Int32 SpotOrder;
    public AdventureSpotOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public Int32 SpotSpawnDay;
    public List<String>? AbleTakePhotoArtMap;
    public String? NoticeAbleTakePhoto;
    public Int32 AbleTakePhotoAnytime;
    public Boolean UseFlash;
    public Int32 PhotoQuizId;
    public Int32 PhotoId;
    public String? LockIcon;
    public String? OpenIcon;
    public String? NameLocale;
    public String? NpcLocationLocale;
    public String? PhotoHintLocale;
    public String? HintResource;
    public String? SpecialSpotSubHintLocale;
}

[MemoryPackable]
public partial class PhotoRecord
{
    public Int32 Id;
    public String? NameLocale;
    public String? TakePhotoResource;
    public String? MistakePhotoResource;
    public String? MemoLocale;
}

[MemoryPackable]
public partial class PointRecord
{
    public Int32 Id;
    public PointType PointType;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ResourceId;
}

[MemoryPackable]
public partial class PollListRecord_Raw
{
    public Int32 Id;
    public Int32 PollReward;
    public String? PollLinkGlobal;
    public String? PollLinkHmt;
    public Boolean IsRepeat;
}

[MemoryPackable]
public partial class PopupPackageListRecord
{
    public Int32 Id;
    public Int32 PopupPackageGroupId;
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public Int32 ConditionGroupId;
    public Int32 ProductGrade;
    public Int32 TimeLimit;
    public Int32 ProductEfficiency;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
    public Int32 CharacterResourceId;
    public Int32 CostumeId;
    public Boolean IsActive;
}

[MemoryPackable]
public partial class PopupPackageShopRecord
{
    public Int32 Id;
    public Int32 OrderGroupId;
    public Int32 PopupPackageGroupId;
    public Int32 PackageGroupId;
    public Int32 ProductGrade;
    public Int32 InfracorePoint;
    public Int32 MidasProductId;
}

[MemoryPackable]
public partial class PresetRecord
{
    public Int32 Id;
    public List<PresetTeamData>? Team;
    public Int32 BaseLobbyBackground;
    public Int32 SettingTitle;
}

[MemoryPackable]
public partial class ProductOfferRecord
{
    public Int32 Id;
    public Boolean IsActive;
    public ProductOfferPopupType ProductOfferPopupType;
    public Int32 ProductId;
    public Int32 InappshopTabId;
    public Int32 GachaCurrencyType;
    public Int32 GachaCurrencyValue;
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
    public String? PopupDescLocalkey;
    public String? PopupPathLocalkey;
    public String? UiPrefabAddressable;
    public String? CharacterResourceAddressable;
}

[MemoryPackable]
public partial class ProfileCardObjectRecord
{
    public Int32 Id;
    public ObjectType ObjectType;
    public ObjectSubType ObjectSubType;
    public ProfileCardObjectGradeType GradeType;
    public Int32 Order;
    public String? ResourceId;
    public String? BadgeResourceId;
    public String? SiResourceId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public Int32 ExchangeItemId;
    public Int32 ExchangeItemValue;
    public Int32 RequireItemId;
    public Int32 RequireItemValue;
    public Boolean IsHidden;
}

[MemoryPackable]
public partial class RankSkipCostRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SkipStep;
    public Int32 PriceId;
    public Int32 PriceValue;
}

[MemoryPackable]
public partial class RecycleResearchLevelRecord
{
    public Int32 Id;
    public RecycleType RecycleType;
    public RecycleSubType RecycleSubType;
    public Int32 RecycleLevel;
    public Int32 LimitSynchroLevel;
    public Int32 ItemId;
    public Int32 ItemValue;
}

[MemoryPackable]
public partial class RecycleResearchStatRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? FunctionLocalkey;
    public Int32 ResourceId;
    public RecycleType RecycleType;
    public RecycleSubType RecycleSubType;
    public Int32 UnlockConditionId;
    public Int32 UnlockLevel;
    public CurrencyType UnlockCurrencyId;
    public Int32 UnlockCurrencyValue;
    public Int32 Attack;
    public Int32 Defence;
    public Int32 Hp;
}

[MemoryPackable]
public partial class RewardUpManagerRecord
{
    public Int32 Id;
    public Int32 EventGroupId;
    public RewardUpEventType EventType;
    public Int32 BonusValue;
    public String? Icon;
    public String? TitleLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class ScenarioCameraSettingRecord
{
    public String? Id;
    public Double PositionX;
    public Double PositionY;
    public Double PositionZ;
}

[MemoryPackable]
public partial class ScenarioCameraShakeSettingRecord
{
    public String? Id;
    public Double AmplitudeX;
    public Double AmplitudeY;
    public Double AmplitudeZ;
    public Double AmplitudeFov;
    public Double FrequencyX;
    public Double FrequencyY;
    public Double FrequencyZ;
    public Double FrequencyFov;
    public Double Loop;
}

[MemoryPackable]
public partial class ScenarioCharacterSettingRecord
{
    public String? Id;
    public String? NameLocalkey;
    public Int32 ResourceId;
    public String? SkinId;
    public FrameType FrameType;
    public String? Address;
    public String? SdResourceAddress;
}

[MemoryPackable]
public partial class ScenarioMovieRecord
{
    public String? Id;
    public String? GroupId;
    public String? Language;
    public String? MovieLink;
    public String? Subtitles;
}

[MemoryPackable]
public partial class ScenarioPositionSettingRecord
{
    public String? Id;
    public Double PositionX;
    public Double PositionY;
    public Double PositionZ;
    public Double RotationX;
    public Double RotationY;
    public Double RotationZ;
}

[MemoryPackable]
public partial class SDBattleEventRecord
{
    public Int32 Id;
    public String? NumberOfTimes;
}

[MemoryPackable]
public partial class SDCharacterAnimationRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public SDCharacterAnimationShortName AnimationName;
    public Int32 VoiceCategory;
}

[MemoryPackable]
public partial class SeasonPassRecord
{
    public Int32 Id;
    public Int32 PassId;
    public RewardType ConditionType;
    public Int32 ConditionValue;
    public Int32 PassRank;
    public Int32 FreeReward;
    public Int32 PremiumReward1;
    public Int32 PremiumReward2;
    public Boolean IsHighlight;
}

[MemoryPackable]
public partial class ShootingRangeContentsRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 GroupId;
}

[MemoryPackable]
public partial class ShootingRangeSpecRecord
{
    public Int32 Id;
    public CharacterClassType Class;
    public OriginalRareType Rare;
    public Int32 Grade;
    public Int32 CharacterLevel;
    public Int32 AttractiveLevel;
    public List<EquipmentList>? EquipmentList;
    public List<SkillLevelList>? SkillLevelList;
}

[MemoryPackable]
public partial class ShootingRangeRecord
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public ShootingRangeType ShootingRangeType;
    public ShootingRangeBattleLength ShootingRangeBattleLengthType;
    public Boolean SpecActiveSpot;
    public Int32 StageLv;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Int32 SpotId;
}

[MemoryPackable]
public partial class ShopDiscountProbRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 ApplicationProb;
    public Int32 DiscountRate;
}

[MemoryPackable]
public partial class SideStoryCutRecord
{
    public Int32 Id;
    public Int32 StageId;
    public Int32 Step;
    public Int32 WaveId;
    public String? ScenarioGroupId;
    public SideStoryEventCondition ConditionType;
    public String? ConditionId;
    public String? ConditionValue;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 SidestoryCharacterGroup;
    public Boolean IsIncludeWaveInfo;
}

[MemoryPackable]
public partial class SideStoryPartRecord
{
    public Int32 Id;
    public Int32 SidestoryId;
    public Int32 Step;
    public Int32 OpenConditionStage;
    public Int32 OpenConditionHour;
}

[MemoryPackable]
public partial class SideStoryPlayCharacterRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 Slot;
    public Int32 CharacterId;
    public Int32 CostumeIndex;
    public Int32 CharacterLevel;
}

[MemoryPackable]
public partial class SideStorySpotEventRecord
{
    public Int32 Id;
    public Int32 SpotCutId;
    public Int32 Step;
    public String? SpotDialogGroupId;
    public Int32 StateEffectFunctionId;
    public SideStoryEventCondition ConditionType;
    public String? ConditionId;
    public String? ConditionValue;
    public Boolean DialogSpotPause;
}

[MemoryPackable]
public partial class SideStoryStageRecord
{
    public Int32 Id;
    public Int32 SidestoryId;
    public Int32 PartId;
    public Int32 Step;
    public String? StageName;
    public Int32 OpenConditionStage;
    public Int32 FirstClearReward;
    public Int32 VictoryCharacterResource;
}

[MemoryPackable]
public partial class SideStoryRecord
{
    public Int32 Id;
    public String? SidestoryName;
    public List<OpenConditionStageData>? OpenConditionStageList;
    public Int32 OpenConditionHour;
    public String? PreviousStoryDesc;
}

[MemoryPackable]
public partial class SimulationRoomOverclockLevelRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 OverclockLevel;
    public Int32 MonsterLevelUp;
    public Int32 BattlePower;
    public String? Color;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class SimulationRoomOverclockOptionGroupRecord
{
    public Int32 Id;
    public Int32 SeasonGroup;
    public Boolean OptionChange;
    public Boolean InfiniteOption;
    public Int32 GroupOrder;
}

[MemoryPackable]
public partial class SimulationRoomOverclockOptionRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 OptionChangeOrder;
    public InfiniteOptionCode InfiniteOptionCode;
    public String? OptionNameLocalkey;
    public String? OptionDescLocalkey;
    public String? OptionIcon;
    public Int32 OptionOverclockLevel;
    public List<SimulationRoomOcOptions>? OptionData;
    public Boolean FixOption;
}

[MemoryPackable]
public partial class SimulationRoomOverclockSeasonRecord
{
    public Int32 Id;
    public String? SeasonNameLocalkey;
    public Int32 OptionGroupId;
    public Int32 OverclockLevelGroup;
    public Boolean MainSeason;
}

[MemoryPackable]
public partial class SimulationRoomSelectionGroupRecord
{
    public Int32 Id;
    public Int32 SelectionGroupId;
    public Int32 SelectionNumber;
    public SimulationRoomEventFunctionType EventFunctionType;
    public SimulationRoomEventfunctionTargetType EventFunctionTargetType;
    public Int32 EventFunctionTargetValue;
    public SimulationRoomEventfunctionValueType EventFunctionValueType;
    public Int32 EventFunctionValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
}

[MemoryPackable]
public partial class SimulationRoomEventRecord
{
    public Int32 Id;
    public SimulationRoomEvent EventType;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ResourceId;
}

[MemoryPackable]
public partial class SimulationRoomChapterRecord
{
    public Int32 Id;
    public Int32 Chapter;
    public Int32 DifficultyId;
    public Int32 RecommendedBattlePower;
    public Int32 StageValue;
    public Int32 RewardId;
    public Boolean OverclockActive;
    public Boolean SimpleSimulationActive;
}

[MemoryPackable]
public partial class SimulationRoomLevelScalingRecord
{
    public Int32 Id;
    public SimulationRoomEvent EventType;
    public Int32 DifficultyId;
    public Int32 Chapter;
    public Int32 BaseMonsterLevel;
    public Int32 BaseMonsterBattlePower;
    public Int32 ImprovementMonsterLevel;
    public Int32 ImprovementMonsterBattlePower;
}

[MemoryPackable]
public partial class SimulationRoomDialogueLocationRecord
{
    public Int32 Id;
    public SimulationRoomLocation Location;
    public Int32 Chapter;
    public String? DialogueLocalkey;
    public String? DialogueVoice;
    public String? SetCharAnim;
    public Int32 Weight;
    public Boolean OcModeUse;
    public Int32 OcLevelMin;
    public Int32 OcLevelMax;
}

[MemoryPackable]
public partial class SimulationRoomDialogueBattleRecord
{
    public Int32 Id;
    public SimulationRoomBattleDialogueType DialogueType;
    public String? DialogueLocalkey;
    public String? DialogueVoice;
    public String? SetCharAnim;
    public Int32 Weight;
    public Boolean OcModeUse;
    public Int32 OcLevelMin;
    public Int32 OcLevelMax;
}

[MemoryPackable]
public partial class SimulationRoomDifficultyRecord
{
    public Int32 Id;
    public ContentsOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
}

[MemoryPackable]
public partial class SkillInfoRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SkillLevel;
    public Int32 NextLevelId;
    public Int32 LevelUpCostId;
    public String? Icon;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? InfoDescriptionLocalkey;
    public List<ValueData>? DescriptionValueList;
}

[MemoryPackable]
public partial class SoloRaidManagerRecord
{
    public Int32 Id;
    public Int32 MonsterPreset;
    public Int32 RankingGroupId;
}

[MemoryPackable]
public partial class SoloRaidPresetRecord
{
    public Int32 Id;
    public Int32 PresetGroupId;
    public DifficultyType DifficultyType;
    public QuickBattleType QuickBattleType;
    public Int32 CharacterLv;
    public Int32 WaveOpenCondition;
    public Int32 WaveOrder;
    public Int32 Wave;
    public Int32 MonsterStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Boolean SpotAutocontrol;
    public String? WaveName;
    public String? WaveDescription;
    public String? MonsterImageSi;
    public String? MonsterImage;
    public Int32 FirstClearRewardId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class SoloRaidRankingRecord
{
    public Int32 Id;
    public Int32 RankingGroupId;
    public Int32 Priority;
    public Int32 ResourceId;
    public GrantType GrantType;
    public Int32 GrantValueMin;
    public Int32 GrantValueMax;
    public Int32 RewardId;
    public Boolean IsRecording;
}

[MemoryPackable]
public partial class SpecialLobbySettingManagerRecord
{
    public Int32 Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public Int32 SpecialLobbyChangeCount;
    public String? SpecialLobbyBackground;
    public Int32 CharacterResourceId;
    public Int32 CostumeIndex;
    public String? SpecialLobbyBgm;
    public Boolean LobbyDisableByChange;
}

[MemoryPackable]
public partial class SquadInfoRecord
{
    public Int32 Id;
    public Squad Squad;
    public String? SquadName;
    public String? SquadDescription;
    public String? ResourceId;
}

[MemoryPackable]
public partial class StateEffectRecord
{
    public Int32 Id;
    public List<Int32>? UseFunctionIdList;
    public List<Int32>? HurtFunctionIdList;
    public List<FunctionData>? Functions;
    public String? Icon;
}

[MemoryPackable]
public partial class StepUpPackageListRecord
{
    public Int32 Id;
    public Int32 StepupGroupId;
    public Int32 PackageGroupId;
    public Int32 Step;
    public Int32 PreviousPackageId;
    public Boolean IsLastStep;
    public Int32 ProductEffieciency;
    public ShopBuyLimitType BuyLimitType;
    public Boolean IsLimit;
    public Int32 BuyLimitCount;
    public Boolean IsFree;
    public Int32 MidasProductId;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public String? ProductResourceId;
}

[MemoryPackable]
public partial class StepUpPackageShopRecord
{
    public Int32 Id;
    public Int32 PackageShopId;
    public Int32 StepupGroupId;
    public String? BannerResourceId;
    public String? BannerLocalkey;
    public String? PopupNameLocalkey;
    public String? PopupDescLocalkey;
}

[MemoryPackable]
public partial class SubQuestRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public String? DescriptionLocalkey;
    public List<TriggerData>? TriggerList;
    public String? ConversationId;
    public Trigger ClearTrigger;
    public Int32 ClearConditionId;
    public Int32 ClearConditionValue;
    public ScenarioType ScenarioType;
    public String? EpisodeId;
    public String? EndMessengerConversationId;
    public Int32 BeforeSubQuestId;
}

[MemoryPackable]
public partial class SupportCharacterGroupRecord
{
    public Int32 Id;
    public Int32 GroupId;
    public Int32 SupportCharacterId;
}

[MemoryPackable]
public partial class SupportCharacterRecord
{
    public Int32 Id;
    public Int32 CharacterId;
    public Int32 CharacterLevel;
    public Int32 AttractiveLevel;
    public List<support_equipment_data>? EquipmentArray;
    public Int32 HarmonycubeId;
    public Int32 HarmonycubeLevel;
    public Int32 SkillLevel1;
    public Int32 SkillLevel2;
    public Int32 UltiSkillLevel3;
}

[MemoryPackable]
public partial class SupportContentsRecord
{
    public Int32 Id;
    public TeamType ContentsType;
    public Int32 UseValue;
    public Int32 GroupId;
}

[MemoryPackable]
public partial class TierRecord
{
    public Int32 Id;
    public ArenaType ArenaType;
    public Int32 Priority;
    public String? Name;
    public String? Description;
    public Int32 TierNumber;
    public Int32 ResourceId;
    public GrantType GrantType;
    public Int32 GrantValueMin;
    public Int32 GrantValueMax;
}

[MemoryPackable]
public partial class TimeReferenceRecord_Raw
{
    public Int32 Id;
    public DateTime DateValue;
}

[MemoryPackable]
public partial class TimeStackRewardRecord
{
    public Int32 Id;
    public ArenaType ArenaType;
    public TimeRewardConditionType ConditionType;
    public Int32 ConditionValue;
    public List<TimeStackRewardData>? TimeStackReward;
}

[MemoryPackable]
public partial class TowerRecord
{
    public Int32 Id;
    public CorporationTowerType Type;
    public Int32 Floor;
    public Int32 MonsterStageLv;
    public Int32 DynamicObjectStageLv;
    public Int32 StandardBattlePower;
    public Int32 StageStatIncreaseGroupId;
    public Boolean IsUseQuickBattle;
    public Boolean SpotAutocontrol;
    public String? FieldMonsterId;
    public String? Bg;
    public Int32 SpotId;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class TransitionRecord
{
    public Int32 Id;
    public String? DepartSceneCode;
    public String? ArriveSceneCode;
    public Int32 DepartViewType;
    public Int32 ArriveViewType;
    public Int32 EventId;
    public Int32 TransitionType;
    public Boolean IsGauge;
    public Int32 LoadingTipGroup;
    public RotationType RotationType;
}

[MemoryPackable]
public partial class TriggerMissionEventRewardRecord
{
    public Int32 Id;
    public Int32 EventId;
    public Int32 TriggerId;
    public Int32 EventRewardId;
}

[MemoryPackable]
public partial class UnionRaidAllClearRewardRecord_Raw
{
    public Int32 Id;
    public UnionRaidNormalConditionType ConditionType;
    public Int32 ConditionValue;
    public String? NameLocalkey;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class UnionRaidManagerRecord
{
    public Int32 Id;
    public Int32 MonsterPreset;
}

[MemoryPackable]
public partial class UnionRaidPresetRecord
{
    public Int32 Id;
    public Int32 PresetGroupId;
    public UnionRaidDifficultyType DifficultyType;
    public Int32 WaveOrder;
    public Int32 Wave;
    public Int32 WaveChangeStep;
    public Int32 MonsterStageLv;
    public Int32 MonsterStageLvChangeGroup;
    public Int32 DynamicObjectStageLv;
    public Int32 CoverStageLv;
    public Boolean SpotAutocontrol;
    public String? WaveName;
    public String? WaveDescription;
    public String? MonsterImageSi;
    public String? MonsterImage;
    public String? MonsterSpine;
    public Int32 MonsterSpineScale;
    public Int32 RewardId;
}

[MemoryPackable]
public partial class UnionRaidRankingTierRecord
{
    public Int32 Id;
    public Int32 Priority;
    public String? NameLocalkey;
    public String? DescriptionLocalkey;
    public UnionRaidRankingTier RankType;
    public Int32 TierNumber;
    public Int32 ResourceId;
    public GrantType GrantType;
    public Int32 GrantValueMin;
    public Int32 GrantValueMax;
    public Int32 RewardId;
    public Boolean IsRecording;
}

[MemoryPackable]
public partial class UserIconRecord
{
    public Int32 Id;
    public Int32 ResourceId;
    public Int32 CostumeIndex;
    public Int32 NameCode;
    public String? NameLocalkey;
    public Int32 Order;
}

[MemoryPackable]
public partial class UserTitleAcquireConditionRecord
{
    public Int32 Id;
    public Int32 UserTitleId;
    public Int32 Order;
    public UserTitleAcquireInformationType InfoType;
    public String? ContentsDescLocaleKey;
    public List<UserTitleConditionObject>? AcquireConditionList;
}

[MemoryPackable]
public partial class UserTitleAssemblyRecord
{
    public Int32 Id;
    public UserTitleAssemblyType AssemblyType;
    public String? IconId;
    public String? BgDecoId;
    public String? TitleLocaleKey;
    public String? BgColorRgb;
    public String? TitleStrokeColorRgb;
    public Int32 CharacterNameCode;
}

[MemoryPackable]
public partial class UserTitleSingleRecord
{
    public Int32 Id;
    public String? ResourceId;
}

[MemoryPackable]
public partial class UserTitleRecord
{
    public Int32 Id;
    public Int32 Order;
    public UserTitleProductionType UserTitleProductionType;
    public Int32 UserTitleProductionId;
    public String? IconResourceId;
    public String? NameLocaleKey;
    public String? DescLocaleKey;
    public Int32 RewardId;
    public Boolean NotAcquiredIsVisible;
}

[MemoryPackable]
public partial class ViewModeCharacterFaceListRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? AnimationName;
    public List<Int32>? HideCharacterNameCode;
    public List<Int32>? HideCostumeId;
}

[MemoryPackable]
public partial class ViewModeCharacterFaceSwitchingRecord_Raw
{
    public Int32 Id;
    public String? NameLocalkey;
    public String? AnimationName;
    public List<Int32>? SwitchingCharacterNameCode;
    public List<Int32>? SwitchingCostumeId;
}

[MemoryPackable]
public partial class WaveDataRecord
{
    public Int32 StageId;
    public String? GroupId;
    public SpotModType SpotMod;
    public WaveDataUIThemeType UiTheme;
    public Int32 BattleTime;
    public String? ModValue;
    public Int32 MonsterCount;
    public Boolean UseIntroScene;
    public Boolean WaveRepeat;
    public String? PointData;
    public String? PointDataFly;
    public String? BackgroundName;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
    public String? StageInfoBg;
    public List<Int64>? TargetList;
    public List<WaveData>? WaveData;
    public Int32 CloseMonsterCount;
    public Int32 MidMonsterCount;
    public Int32 FarMonsterCount;
}

[MemoryPackable]
public partial class WordRecord
{
    public Int32 Id;
    public String? Group;
    public Int32 PageNumber;
    public Int32 Order;
    public ResourceType ResourceType;
    public String? ResourceValue;
}

// Enums: 
// Additional referenced types: 
public enum ResourceType
{
    None = 0,
    Image = 1,
    Locale = 2
}
[MemoryPackable]
public partial class WaveData
{
    public String? WavePath;
    public Int32 PrivateMonsterCount;
    public List<WaveMonsterData>? WaveMonsterList;
}

[MemoryPackable]
public partial class WaveMonsterData
{
    public Int64 WaveMonsterId;
    public MonsterSpawnType SpawnType;
}

public enum WaveDataUIThemeType
{
    None = 0,
    CE002 = 1,
    CE004 = 2,
    CE006 = 3,
    CE007 = 4
}
public enum SpotModType
{
    None = 0,
    Campaign = 1,
    Arena = 2,
    Survive = 3,
    Defense = 4,
    Destroy = 5,
    Escape = 6,
    Intercept = 7,
    UnionRaid = 8,
    ShootingRange = 9,
    BaseDefense = 10,
    Cooperation = 11,
    Campaign_SD = 12,
    Defense_SD = 13,
    BaseDefense_SD = 14,
    ShootingRange_SD = 15,
    SoloRaid_Common = 16,
    SoloRaid_Trial = 17,
    Campaign_CE002 = 18,
    Cooperation_CE002 = 19,
    UnionRaid_Trial = 20,
    Cabal_MecaShifty = 21,
    Cabal_Shifty = 22,
    Cabal_Syuen = 23,
    SoloRaid_Museum = 24,
    SoloRaid_Museum_Nolimit = 25
}
public enum UserTitleProductionType
{
    None = 0,
    Single = 1,
    Assembly = 2
}
public enum UserTitleAssemblyType
{
    None = 0,
    Default = 1,
    Icon = 2,
    Character = 3
}
[MemoryPackable]
public partial class UserTitleConditionObject
{
    public UserTitleAcquireConditionType ConditionType;
    public Int32 ConditionPointValue;
    public String? ConditionDescLocaleKey;
}

public enum UserTitleAcquireConditionType
{
    None = 0,
    UserTitle_InfracoreLv = 1,
    UserTitle_UserLv = 2,
    UserTitle_OpenSyncroDevice = 3,
    UserTitle_ClearChapter = 4,
    UserTitle_MaxAttractiveTotalCount = 5,
    UserTitle_OutpostScenario = 6,
    UserTitle_AttractiveScenario = 7,
    UserTitle_SendFriendPointCount = 8,
    UserTitle_RecycleResearchAttacker = 9,
    UserTitle_RecycleResearchDefender = 10,
    UserTitle_RecycleResearchSupporter = 11,
    UserTitle_RecycleResearchElysion = 12,
    UserTitle_RecycleResearchMissilis = 13,
    UserTitle_RecycleResearchTetra = 14,
    UserTitle_RecycleResearchPilgrim = 15,
    UserTitle_RecycleResearchAbnormal = 16,
    UserTitle_RookieArenaPlayCount = 17,
    UserTitle_OverloadTotalCount = 18,
    UserTitle_LostSectorPerfectClearCount = 19,
    UserTitle_TowerClearTotalCount = 20,
    UserTitle_AcquireCharacter = 21,
    UserTitle_SimulationRoomBuffLv5 = 22,
    UserTitle_InterceptSpecial30sec = 23,
    UserTitle_MaxViewNikkeAttractiveStory = 24,
    UserTitle_MaxAttractive = 25,
    UserTitle_4Overload = 26,
    UserTitle_InterceptAnomalous = 27,
    UserTitle_SimulationRoomOverclock50 = 28,
    UserTitle_SimulationRoomOverclockInfiniteOption = 29
}
public enum UserTitleAcquireInformationType
{
    None = 0,
    Mission = 1,
    Contents = 2
}
public enum UnionRaidRankingTier
{
    Challenger = 0,
    Dia = 1,
    Platinum = 2,
    Gold = 3,
    Silver = 4,
    Bronze = 5,
    Beginner = 6
}
public enum UnionRaidDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum UnionRaidNormalConditionType
{
    None = 0,
    AllClear = 1,
    Join = 2
}
public enum RotationType
{
    None = 0,
    Order = 1,
    Random = 2
}
[MemoryPackable]
public partial class TimeStackRewardData
{
    public RewardType ItemType;
    public Int32 ItemId;
    public Int32 ItemValue;
    public Int32 TimeSec;
}

public enum TimeRewardConditionType
{
    None = 0,
    Tier = 1
}
[MemoryPackable]
public partial class support_equipment_data
{
    public Int32 EquipmentId;
    public CorporationType EquipmentCorp;
    public Int32 EquipmentLevel;
}

[MemoryPackable]
public partial class FunctionData
{
    public Int32 Function;
}

public enum GrantType
{
    None = 0,
    Rank = 1,
    RankPercent = 2,
    PlayCount = 3
}
public enum DifficultyType
{
    None = 0,
    Common = 1,
    Trial = 2
}
[MemoryPackable]
public partial class ValueData
{
    public String? DescriptionValue;
}

public enum SimulationRoomBattleDialogueType
{
    Harder = 0,
    Hard = 1,
    Easy = 2,
    Easier = 3
}
public enum SimulationRoomLocation
{
    Start = 0,
    JustBeforeEnd = 1,
    End = 2,
    Random = 3
}
public enum SimulationRoomEvent
{
    NormalBattle = 0,
    EliteBattle = 1,
    BossBattle = 2,
    Maintenance = 3,
    RandomSelection = 4,
    EnhanceBuff = 5,
    SpecialBattle = 6,
    EventBossBattle = 7
}
public enum SimulationRoomEventfunctionValueType
{
    None = 0,
    Percent = 1,
    Integer = 2,
    Grade = 3,
    MainTarget = 4,
    BubbleType = 5
}
public enum SimulationRoomEventfunctionTargetType
{
    Random = 0,
    Select = 1,
    All = 2,
    None = 3
}
public enum SimulationRoomEventFunctionType
{
    Heal = 0,
    Damage = 1,
    Resurrection = 2,
    Death = 3,
    DeleteBuff = 4,
    GainBuff = 5,
    ChangeBuff = 6,
    UpgradeBuff = 7,
    ChangeBubble = 8,
    None = 9
}
[MemoryPackable]
public partial class SimulationRoomOcOptions
{
    public SimulationRoomOcOptionFunction OptionFunction;
    public List<SimulationRoomOcOptionTarget>? OptionTarget;
    public Int32 OptionValue;
}

public enum SimulationRoomOcOptionTarget
{
    None = 0,
    Stage = 1,
    Monster = 2,
    Target = 3,
    NonTarget = 4,
    AR = 5,
    RL = 6,
    SR = 7,
    MG = 8,
    SG = 9,
    SMG = 10,
    ELYSION = 11,
    MISSILIS = 12,
    TETRA = 13,
    PILGRIM = 14,
    ABNORMAL = 15,
    Fire = 16,
    Water = 17,
    Wind = 18,
    Electronic = 19,
    Iron = 20,
    Attacker = 21,
    Defender = 22,
    Supporter = 23,
    Burst1 = 24,
    Burst2 = 25,
    Burst3 = 26,
    Nikke = 27
}
public enum SimulationRoomOcOptionFunction
{
    None = 0,
    LevelOverFix = 1,
    RecycleRoomDisable = 2,
    Function = 3,
    CampaignTimeDecrease = 4,
    LocationStartChange = 5,
    LocationRandomChange = 6,
    BattleEventGroupChange = 7,
    Skill1Disable = 8,
    BanNikke = 9,
    LocationJustBeforeEndChange = 10,
    AttractionStatusDisable = 11,
    BanNikkeSameSquad = 12,
    HPDecreaseAfterBattle = 13,
    NikkeNeeds = 14
}
public enum InfiniteOptionCode
{
    None = 0,
    Fire = 1,
    Water = 2,
    Wind = 3,
    Electronic = 4,
    Iron = 5
}
[MemoryPackable]
public partial class OpenConditionStageData
{
    public Int32 OpenConditionStage;
}

public enum SideStoryEventCondition
{
    TargetSpawn = 0,
    TargetIncount = 1,
    TargetHPRatioFirst = 2,
    UserBattleModeStart = 3,
    SpotEventClear = 4,
    SpotBattleClear = 5,
    BeforeBattleStart = 6,
    ScenarioClear = 7
}
public enum ShootingRangeBattleLength
{
    Short = 0,
    Long = 1,
    Target = 2
}
public enum ShootingRangeType
{
    Fire = 0,
    Wind = 1,
    Iron = 2,
    Electronic = 3,
    Water = 4
}
[MemoryPackable]
public partial class SkillLevelList
{
    public Int32 SkillLevel;
}

[MemoryPackable]
public partial class EquipmentList
{
    public Int32 EquipmentId;
    public Int32 EquipmentLevel;
}

public enum SDCharacterAnimationShortName
{
    None = 0,
    Idle = 1,
    IdleSpecial = 2,
    Walk = 3,
    Shot = 4,
    CoverReload = 5,
    Stun = 6,
    Talk0 = 7,
    Talk1 = 8,
    TalkIdle = 9,
    Run = 10,
    Death = 11
}
public enum FrameType
{
    None = 0,
    Right = 1,
    Center = 2,
    Left = 3
}
public enum RewardUpEventType
{
    None = 0,
    Intercept = 1,
    SimulationRoom = 2
}
public enum RecycleSubType
{
    None = 0,
    Personal = 1,
    Attacker = 2,
    Defender = 3,
    Supporter = 4,
    ELYSION = 5,
    MISSILIS = 6,
    TETRA = 7,
    PILGRIM = 8,
    ABNORMAL = 9
}
public enum RecycleType
{
    None = 0,
    Personal = 1,
    Class = 2,
    Corporation = 3
}
public enum ProfileCardObjectGradeType
{
    SSR = 0,
    SR = 1,
    R = 2
}
public enum ObjectSubType
{
    None = 0,
    Normal = 1,
    Event = 2,
    Badge = 3
}
public enum ObjectType
{
    BackGround = 0,
    Sticker = 1
}
public enum ProductOfferPopupType
{
    None = 0,
    InAppShop = 1,
    Gacha = 2
}
[MemoryPackable]
public partial class PresetTeamData
{
    public PresetTeamType PresetTeamType;
    public List<Int32>? PresetShooters;
}

public enum PresetTeamType
{
    None = 0,
    Starting = 1
}
public enum PointType
{
    None = 0,
    ArenaSpecialPoint = 1
}
public enum PhotoFlashType
{
    None = 0,
    On = 1,
    Off = 2,
    Auto = 3
}
public enum PhotoObjectType
{
    None = 0,
    People = 1,
    Animal = 2,
    Environment = 3
}
public enum PhotoZoomType
{
    None = 0,
    _50 = 1,
    _100 = 2,
    _200 = 3
}
[MemoryPackable]
public partial class OutpostFunctionData
{
    public OutpostFunctionType FunctionType;
    public FunctionValueType FunctionValueType;
    public Int32 FunctionValue;
    public String? FunctionTitleLocalkey;
    public String? FunctionDescriptionLocalkey;
}

public enum OutpostFunctionType
{
    None = 0,
    OutpostBattleCredit = 1,
    OutpostBattleCharacterExp1 = 2,
    OutpostBattleUserExp = 3,
    UnlockOutpostSlot = 4,
    MaxStamina = 5,
    AddSynchroSlot = 6,
    Text = 7,
    DispatchFunction = 8,
    ElevatorFunction = 9,
    RunResearch = 10,
    UnlockClass = 11,
    UnlockLesson = 12
}
[MemoryPackable]
public partial class OutpostCostData
{
    public CostType CostType;
    public Int32 CostId;
    public Int32 CostValue;
}

public enum CostType
{
    None = 0,
    Currency = 1,
    Item = 2
}
[MemoryPackable]
public partial class BuildConditionData
{
    public BuildCondition BuildConditionType;
    public Int32 BuildConditionValue;
}

public enum BuildCondition
{
    None = 0,
    CommanderLv = 1,
    StageClear = 2,
    Build = 3,
    DispatchGrade1 = 4,
    DispatchGrade2 = 5,
    DispatchGrade3 = 6,
    DispatchGrade4 = 7,
    DispatchGrade5 = 8,
    PersonalResearchLevel = 9,
    OpenLesson = 10
}
public enum BuildingDisplayCategory
{
    None = 0,
    Assist = 1,
    Welfare = 2,
    Growth = 3
}
public enum BalloonType
{
    None = 0,
    Normal = 1,
    Thinking = 2,
    Shouting = 3,
    Frame = 4,
    Talk = 5
}
public enum FieldNarrativeSignType
{
    None = 0,
    Popup = 1,
    Balloon = 2
}
public enum MuseumMissionConditionType
{
    GetTotalDamage = 0,
    GetTotalDamageRanker = 1,
    GetTotalStageStep = 2
}
public enum MuseumStageModeType
{
    Challenge = 0,
    NoLimit = 1
}
[MemoryPackable]
public partial class SkillData
{
    public Int32 SkillId;
    public List<Int32>? UseFunctionIdSkill;
    public List<Int32>? HurtFunctionIdSkill;
}

public enum FunctionNoneTargetType
{
    Normal = 0,
    NoAllMonster = 1,
    ExcludeSpawnAndCountCheck = 2
}
public enum NoneTargetType
{
    Normal = 0,
    Last = 1,
    None = 2
}
public enum MonsterUIGradeType
{
    None = 0,
    Selfless = 1,
    Servant = 2,
    Master = 3,
    Lord = 4,
    Tyrant = 5,
    Heretic = 6
}
public enum MonsterStageLvChangeConditionType
{
    None = 0,
    DamageDoneToTargetMonster = 1
}
public enum MonsterDestroyAnimTrigger
{
    None = 0,
    Destruction_01 = 1,
    Destruction_02 = 2,
    Destruction_03 = 3,
    Destruction_04 = 4
}
public enum MoveType
{
    None = 0,
    Walk = 1,
    Fly = 2
}
public enum MonsterSizeType
{
    None = 0,
    Small = 1,
    Medium = 2,
    Big = 3,
    Huge = 4
}
public enum MonsterGradeType
{
    None = 0,
    Thrash = 1,
    Minion = 2,
    Elite = 3,
    Centurion = 4,
    Boss = 5
}
public enum AttributeType
{
    None = 0,
    AllRound = 1,
    Metal = 2,
    Bio = 3,
    Energy = 4,
    Unknown = 5
}
public enum MonsterSpawnType
{
    None = 0,
    Normal = 1,
    Dash = 2,
    Jump = 3,
    Drop = 4,
    Random = 5,
    Teleport = 6,
    Animation = 7
}
public enum MidasItemType
{
    Currency = 0,
    Item = 1
}
public enum ProductType
{
    None = 0,
    CashShop = 1,
    PackageShop = 2,
    PopupPackageShop = 3,
    PassShop = 4,
    MonthlyAmount = 5,
    CampaignPackageShop = 6,
    EventPassShop = 7,
    CostumeShop = 8,
    StepUpPackageShop = 10,
    EventInAppShop = 11,
    CustomPackageShop = 12,
    PassCostumeShop = 13
}
public enum MessengerMessageType
{
    None = 0,
    Text = 1,
    Choice = 2,
    Monologue = 3,
    Image = 4,
    Reward = 5
}
public enum MessengerSpeakerType
{
    None = 0,
    Self = 1,
    They = 2,
    Notification = 3
}
public enum MessageType
{
    None = 0,
    RandomMessage = 1,
    Message = 2,
    DailyMessage = 3
}
[MemoryPackable]
public partial class MemorialMemoryID
{
    public Int32 MemorialMemoryId;
}

public enum MemorialCategoryFormType
{
    None = 0,
    HandWriting = 1,
    CallLog = 2,
    Data = 3
}
public enum MemorialSeriesCategoryType
{
    Campaign = 0,
    Event = 1,
    Surface = 2
}
public enum ContentOpenType
{
    None = 0,
    Stage = 1,
    Level = 2,
    SectorClear = 3,
    NonUpdate = 4
}
public enum login_event_reward_type
{
    Normal = 0,
    Goal = 1
}
public enum SpeecherType
{
    Character = 0,
    Npc = 1
}
public enum LiveWallpaperReactionType
{
    None = 0,
    Touch = 1,
    Stay = 2
}
public enum ResetType
{
    None = 0,
    Daily = 1,
    Weekly = 2
}
public enum GetInfoType
{
    None = 0,
    FieldItem = 1,
    Locale = 2
}
public enum MaterialType
{
    None = 0,
    All = 1,
    Corporation = 2,
    Character = 3,
    Squad = 4,
    FavoriteItem = 5
}
[MemoryPackable]
public partial class OptionSlot
{
    public Int32 OptionSlots;
    public Int32 OptionSlotSuccessRatio;
}

[MemoryPackable]
public partial class StatData
{
    public StatType StatType;
    public Int32 StatValue;
}

[MemoryPackable]
public partial class OptionGroup_Raw
{
    public ItemEquipCombinationGroupType OptionGroup;
}

public enum EquipmentRarityType
{
    None = 0,
    T1 = 1,
    T2 = 2,
    T3 = 3,
    T4 = 4,
    T5 = 5,
    T6 = 6,
    T7 = 7,
    T8 = 8,
    T9 = 9,
    T10 = 10
}
[MemoryPackable]
public partial class OptionType_Raw
{
    public ItemEquipCombinationOptionType OptionType;
}

public enum ItemEquipCombinationOptionType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ABNORMAL = 5,
    Attacker = 6,
    Defender = 7,
    Supporter = 8,
    Module_A = 9,
    Module_B = 10,
    Module_C = 11,
    Module_D = 12
}
public enum ItemEquipCombinationGroupType
{
    None = 0,
    CorporationType = 1,
    CharacterClassType = 2,
    ItemSubType = 3
}
public enum IslandAdventureUnionRankingGroup
{
    None = 0,
    Size = 1,
    Gold = 2
}
public enum IslandAdventureTutorialOutputType
{
    None = 0,
    FirstOpenHub = 1,
    FirstCloseHub = 2,
    FirstPlayFishing = 3,
    FirstPlayPhoto = 4,
    FirstEnterMenuAlbum = 5,
    FirstEnterMenuFishCollection = 6
}
public enum IslandAdventureItemOpenType
{
    None = 0,
    GainItem = 1,
    MissionClear = 2,
    GainFish = 3,
    GainPhoto = 4,
    StageClear = 5
}
public enum EventIslandAdventureMissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2,
    IslandAdventureItem = 3
}
public enum EventIslandAdventureMissionType
{
    None = 0,
    GainFishingRod = 1,
    GainFish = 2,
    GainPhoto = 3,
    GainGoldCount = 4,
    GainBoatParts = 5,
    BaitUseCount = 6,
    VoyageTimeCount = 7,
    DailyPointReward = 8,
    FishingCount = 9,
    FishSize = 10
}
public enum EventIslandAdventureMissionCategory
{
    None = 0,
    DailyMission = 1,
    DailyPoint = 2,
    Achievement = 3
}
[MemoryPackable]
public partial class ItemOptionData
{
    public IslandAdventureItemOption ItemOptionGroup;
    public Int32 ItemOptionValue;
}

public enum IslandAdventureItemOption
{
    None = 0,
    PatternSpeed = 1,
    PatternLimitTime = 2,
    PatternDecreaseHP = 3,
    CatchDoubleRatio = 4,
    CatchMaxSizeRatio = 5,
    CastingBonusRatio = 6,
    GainGoldRatio = 7,
    SpotCatchableCount = 8,
    BoatSpeed = 9
}
[MemoryPackable]
public partial class ItemOptionLocaleData
{
    public String? ItemOptionLocale;
}

public enum IslandAdventureItemGroupType
{
    None = 0,
    FishingRod = 1,
    Bait = 2,
    BoatReinforce = 3
}
public enum PhotoSpotType
{
    None = 0,
    Special = 1,
    Normal = 2
}
public enum InterceptType
{
    InterceptNormalLevel1 = 0,
    InterceptNormalLevel2 = 1,
    InterceptSpecial = 2,
    InterceptAnomalous = 3
}
public enum InterceptAnomalousRecommendConditionType
{
    None = 0,
    ItemSubType = 1,
    ItemMaterialIDCount = 2
}
[MemoryPackable]
public partial class percent_condition_reward_group_data_Raw
{
    public Int32 PercentConditionRewardGroup;
}

[MemoryPackable]
public partial class InfraCoreGradeData
{
    public Int32 Function;
}

public enum InfraCoreFunctionType
{
    None = 0,
    OutpostBattleMaxTime = 1,
    OutpostFastBattleMaxCount = 2,
    DispatchMaxList = 3,
    OpenAllReceive = 4,
    OpenAutoDispatch = 5,
    OpenFastDispatch = 6,
    TodayAttractiveMaxCount = 7,
    StaminaMaxCount = 8,
    ShopNormalBuyLimitMaxCount = 9,
    ShopNormalFreeResetMaxCount = 10,
    ArenaMaxCount = 11,
    OpenSkipArena = 12
}
public enum InAppShopCategory
{
    JewelShop = 0,
    PackageShop = 1,
    TimeLimitPackageShop = 2,
    RenewPackageShop = 3,
    PopupPackageShop = 4,
    CostumeShop = 5,
    MonthlyAmountShop = 6,
    CampaignPackageShop = 7,
    StepUpPackageShop = 8,
    CustomPackageShop = 10,
    PassCostumeShop = 11
}
public enum InAppShopType
{
    InAppShop = 0
}
public enum CashshopMainCategoryType
{
    PopupPackageTab = 0,
    TimeLimitPackageTab = 1,
    RenewPackageTab = 2,
    CostumeTab = 3,
    CampaignPackageTab = 4,
    MonthlyAmountTab = 5,
    JewelTab = 6,
    PassCostumeTab = 7
}
public enum HelpTipDescriptionType
{
    None = 0,
    Image = 1,
    Title = 2,
    Description = 3
}
public enum GachaPrefabType
{
    None = 0,
    Special = 1,
    Limited = 2,
    ReLimited = 3
}
[MemoryPackable]
public partial class GachaPrice_Data
{
    public Int32 GachaPriceType;
    public Int32 GachaPriceValueCount1;
    public Int32 DailyGachaDiscountPriceValue1;
    public Int32 GachaPriceValueCount10;
}

public enum GachaProvideCountType
{
    OneAndTen = 0,
    OneOnly = 1,
    TenOnly = 2
}
public enum GachaPremiumType
{
    None = 0,
    GachaPremium = 1,
    GachaCustomize = 2,
    GachaCorporation_ELYSION = 3,
    GachaCorporation_MISSILIS = 4,
    GachaCorporation_TETRA = 5,
    GachaFriend = 6,
    GachaTutorial = 7,
    GachaCharge = 8,
    GachaPickup = 9,
    GachaStepup = 10,
    GachaSelectup = 11
}
public enum GachaSubType
{
    None = 0,
    PickupCharacter = 1,
    LimitedCharacter = 2
}
public enum GachaCategory
{
    None = 0,
    Character = 1,
    WishlistNormal = 2,
    WishlistOverspec = 3,
    GachaSelectup = 4
}
public enum DataCheckForPass
{
    None = 0,
    Pass_DailyLoginGame = 1,
    Pass_ClearStoryEventStage = 2,
    Pass_ClearStoryEventChallengeStage = 3,
    Pass_CheckLevelInfracore = 4,
    Pass_CheckQuantityUserTitle = 5,
    Pass_ClearCampaignEXStage = 6,
    Pass_CollectCampaignFieldItem = 7,
    Pass_ClearSimulationRoomOverclock = 8,
    Pass_EquipFavoriteItemSR = 9,
    Pass_CheckLevelFavoriteItemSR = 10,
    Pass_EquipFavoriteItemSSR = 11,
    Pass_StartSoloRaidChallengeStage = 12,
    Pass_StartUnionRaidStage = 13,
    Pass_CheckQuantityUnlockArchive = 14,
    Pass_ClearSideStoryStage = 15,
    Pass_StartCooperationEvent = 16
}
public enum MissionTriggerType
{
    None = 0,
    Trigger = 1,
    DataCheck = 2
}
[MemoryPackable]
public partial class FixedEquipmentData
{
    public Int32 EquipmentId;
    public Int32 EquipmentLevel;
}

public enum FixedPlayCharacterContentsType
{
    Tutorial = 0,
    CampaignField = 1
}
[MemoryPackable]
public partial class catchable_group_list
{
    public Int32 CatchableGroupId;
}

public enum AdventureSpotOpenCondition
{
    None = 0,
    StageClear = 1,
    MissionClear = 2
}
public enum FishGroupType
{
    None = 0,
    Small = 1,
    Middle = 2,
    Large = 3
}
public enum FieldTriggerFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
public enum SpeechWindowType
{
    Speech = 0,
    Monologue = 1,
    Narration = 2,
    Subtitles = 3,
    Self = 4,
    Choice = 5,
    Input = 6
}
[MemoryPackable]
public partial class PasswordSpawnerData_Raw
{
    public String? PositionId;
    public Int32 PasswordTableId;
}

[MemoryPackable]
public partial class EventTargetSpawnerData
{
    public String? PositionId;
}

[MemoryPackable]
public partial class LevelTriggerData
{
    public String? PositionId;
    public FieldSwitchType SwitchType;
    public Boolean OnTrigger;
}

public enum FieldSwitchType
{
    None = 0,
    Once = 1,
    Toggle = 2,
    Down = 3,
    Timed = 4
}
[MemoryPackable]
public partial class PasswordDoorSpawnerData_Raw
{
    public String? PositionId;
    public Int32 PasswordDoorTableId;
}

[MemoryPackable]
public partial class DoorSpawnerData
{
    public String? PositionId;
    public Boolean OnTrigger;
}

[MemoryPackable]
public partial class StageSpawnerData
{
    public String? PositionId;
    public Int32 StageId;
    public QuestType EventState;
}

public enum QuestType
{
    None = 0,
    Main = 1,
    Sub = 2,
    Emergency = 3,
    Event = 4,
    FavoriteItem = 5
}
[MemoryPackable]
public partial class QuestObjectData
{
    public String? PositionId;
    public Int32 QuestObjectId;
}

[MemoryPackable]
public partial class NPCSpawnerData
{
    public String? PositionId;
    public Int32 NpcId;
}

[MemoryPackable]
public partial class ItemSpawnerData
{
    public String? PositionId;
    public Int32 ItemId;
    public Boolean IsCompleteReward;
}

[MemoryPackable]
public partial class InteractionObjectData
{
    public String? PositionId;
    public Int32 InteractionId;
}

[MemoryPackable]
public partial class SupplyPointData
{
    public String? PositionId;
    public Int32 Reinforcement;
}

[MemoryPackable]
public partial class DefaultSpawnerData
{
    public String? PositionId;
}

public enum FieldItemObtainDifficulty
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum ObtainContentsType
{
    None = 0,
    Campaign = 1,
    Lost_sector = 2,
    Eventfield = 3
}
public enum FieldItemType
{
    None = 0,
    Buff = 1,
    PartyGauge = 2,
    Token = 3,
    Box = 4,
    HiddenItem = 5,
    BGM = 6,
    Memory = 7,
    BodyCore = 8,
    BetaCore = 9,
    Collect = 10
}
public enum FieldInteractionActionActionType
{
    None = 0,
    Auto = 1,
    Manual = 2,
    Stage = 3
}
public enum FieldInteractionActionActiveType
{
    None = 0,
    Once = 1,
    OncePerEnter = 2,
    OncePerDay = 3,
    Repeat = 4
}
public enum FieldInteractionActionQuestType
{
    None = 0,
    Quest = 1
}
public enum FieldInteractionActionTriggerType
{
    None = 0,
    TimeLineAction = 1,
    ScenarioDialog = 2,
    NarrativeSign = 3
}
[MemoryPackable]
public partial class StoryEventIdListData_Raw
{
    public Int32 StoryEventId;
}

public enum FieldInteractionActionTriggerFieldDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum FieldInteractionActionTriggerFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
[MemoryPackable]
public partial class FavoriteItemSkillGroupData
{
    public Int32 FavoriteSkillId;
    public TableType SkillTable;
    public Int32 SkillChangeSlot;
}

[MemoryPackable]
public partial class CollectionSkillGroupData
{
    public Int32 CollectionSkillId;
}

public enum FavoriteItemType
{
    None = 0,
    Collection = 1,
    Favorite = 2
}
[MemoryPackable]
public partial class CollectionItemSkillLevelData
{
    public Int32 CollectionSkillLevel;
}

[MemoryPackable]
public partial class FavoriteItemStatData
{
    public StatType StatType;
    public Int32 StatValue;
}

public enum FavoriteItemRare
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum TowerDefenseStartingPointType
{
    None = 0,
    InOrder = 1,
    Forced = 2
}
public enum TowerDefenseWaveType
{
    None = 0,
    Normal = 1,
    Random = 2
}
public enum TowerDefenseUpgradeType
{
    None = 0,
    AtkIncrease = 1,
    RpmIncrease = 2,
    PenetrateIncrease = 3,
    RangeIncrease = 4,
    EffectRangeIncrease = 5,
    BurstCoolTimeDecrease = 6,
    SetDebuffTimeIncrease = 7,
    DebuffPowerUp = 8,
    DiscountCost = 9,
    DiscountSkillCost = 10,
    GoldIncrease = 11,
    RefundPenaltyDecrease = 12,
    DefensePointIncrease = 13
}
public enum TowerDefenseUpgradeTargetType
{
    None = 0,
    NormalTower = 1,
    HeroTower = 2,
    Global = 3
}
public enum EventTowerDefenseTutorialPageType
{
    None = 0,
    Basic = 1,
    Picture = 2
}
public enum EventTowerDefenseTutorialOutputType
{
    None = 0,
    OnStart = 1,
    AppearMonster = 2,
    WaveStart = 3,
    GainUpGradePoint = 4,
    OuterValue = 5
}
public enum EventTowerDefenseTutorialButtonType
{
    None = 0,
    System = 1,
    Monster = 2
}
public enum EventTowerDefenseTutorialType
{
    None = 0,
    Instant = 1,
    Button = 2
}
[MemoryPackable]
public partial class TowerSkillListData
{
    public Int32 TowerSkillGroup;
    public Int32 TowerSkillSetFirstLv;
}

public enum TowerDefenseHitEffectPrintType
{
    None = 0,
    Everyone = 1,
    HitPoint = 2
}
public enum TowerDefenseTowerAttackMovementType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    All = 3
}
public enum TowerDefenseTowerAttackType
{
    None = 0,
    Instant = 1,
    Projectile = 2,
    CannonProjectile = 3,
    MissileProjectile = 4,
    SelfRadius = 5
}
public enum TowerDefenseTowerReinforceType
{
    None = 0,
    LevelUp = 1,
    Evolve = 2,
    SkillLvUp = 3
}
public enum TowerDefenseTowerType
{
    None = 0,
    Tower = 1,
    Hero = 2
}
[MemoryPackable]
public partial class SkillEffectListData
{
    public TowerDefenseSkillEffectType SkillEffectType;
    public TowerDefenseSkillEffectTargetType SkillEffectTarget;
    public Int32 SkillEffectTargetCount;
    public TowerDefenseSkillEffectApplyPriorityType SkillEffectTargetPriority;
    public Int32 SkillEffectValue;
    public Int32 SkillEffectHoldTime;
    public Int32 SkillEffectApplyChance;
}

public enum TowerDefenseSkillEffectApplyPriorityType
{
    None = 0,
    Standard = 1,
    Random = 2,
    HighMaxHP = 3,
    HighDef = 4,
    BossFirst = 5,
    FlyFirst = 6,
    TowerHeroFirst = 7,
    TowerProximate = 8
}
public enum TowerDefenseSkillEffectTargetType
{
    None = 0,
    Foe = 1,
    Self = 2,
    Ally = 3,
    SelfAndAlly = 4
}
public enum TowerDefenseSkillEffectType
{
    None = 0,
    Damage = 1,
    SetBuff = 2,
    SetDebuff = 3,
    PenetrateDamage = 4,
    FixedDamage = 5,
    ImmediatelySelfSetBuff = 6,
    AtkIncrease = 7,
    RpmIncrease = 8,
    PenetrateIncrease = 9,
    RangeIncrease = 10,
    EffectRangeIncrease = 11,
    TargetCountIncrease = 12,
    BurstCoolTimeDecrease = 13,
    BuffHoldTimeIncrease = 14,
    BuffPowerUp = 15,
    DebuffApplyTimeIncrease = 16,
    DebuffPowerUp = 17
}
public enum TowerDefenseTowerAttackPriorityType
{
    None = 0,
    Standard = 1,
    Random = 2,
    HighMaxHP = 3,
    HighDef = 4,
    BossFirst = 5,
    FlyFirst = 6
}
public enum TowerDefenseSkillType
{
    None = 0,
    Instant = 1,
    InstantSetArea = 2,
    Projectile = 3,
    CannonProjectile = 4,
    MissileProjectile = 5,
    SelfRadius = 6,
    EnhanceNormalAttack = 7,
    EnhanceNextNormalAttack = 8,
    Self = 9,
    SelfSetArea = 10,
    SelfImmediately = 11
}
public enum TowerDefenseSkillUseType
{
    None = 0,
    Manual = 1,
    CoolTimeAuto = 2,
    AttackCountAuto = 3,
    BurstUseAuto = 4
}
public enum TowerDefenseSkillAreaEffectType
{
    None = 0,
    MyPosition = 1,
    HitPosition = 2
}
public enum TowerDefenseTowerSkillAuraEffectTargetType
{
    None = 0,
    Self = 1,
    Target = 2,
    All = 3
}
public enum TowerDefenseSkillAuraEffectType
{
    None = 0,
    Once = 1,
    Hold = 2
}
public enum TowerDefenseSkillHitEffectType
{
    None = 0,
    Everyone = 1,
    HitPoint = 2
}
public enum TowerDefenseTowerSkillProjectileMuzzleType
{
    None = 0,
    Muzzle = 1,
    SkillPoint = 2
}
public enum TowerDefenseSkillSystemType
{
    None = 0,
    Passive = 1,
    Active = 2,
    BurstSkill = 3
}
public enum TowerDefenseClearConditionType
{
    None = 0,
    AllEnemyKill = 1,
    TargetKill = 2,
    BossKill = 3
}
public enum TowerDefenseStageType
{
    None = 0,
    Scenario = 1,
    Normal = 2,
    Challenge = 3
}
public enum TowerDefenseDialogSpeakerTeamType
{
    None = 0,
    Ally = 1,
    Union = 2,
    Foe = 3
}
public enum TowerDefenseDialogSpeakerPositionType
{
    None = 0,
    Right = 1,
    Left = 2
}
public enum TowerDefenseDialogOutputConditionType
{
    None = 0,
    StageStart = 1,
    WaveStart = 2,
    MonsterKill = 3,
    Victory = 4,
    AfterCinematic = 5
}
[MemoryPackable]
public partial class MonsterSkillListData
{
    public Int32 MonsterSkill;
}

public enum TowerDefenseMonsterMoveType
{
    None = 0,
    Ground = 1,
    Fly = 2
}
public enum TowerDefenseMonsterGradeType
{
    None = 0,
    Normal = 1,
    Boss = 2
}
[MemoryPackable]
public partial class MonsterSkillTypeValueListData
{
    public Int32 MonsterSkillTypeValue;
}

public enum TowerDefenseMonsterSkillType
{
    None = 0,
    SetBuff = 1,
    DefArea = 2,
    Jump = 3,
    SummonMonster = 4,
    HPRecover = 5
}
public enum TowerDefenseMonsterSkillActiveType
{
    None = 0,
    CoolTime = 1,
    Spawn = 2,
    HPCheck = 3
}
public enum EventTowerDefenseMissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2
}
[MemoryPackable]
public partial class missionvaluedata
{
    public EventTowerDefenseMissionConditionType ConditionType;
    public Int32 ConditionValue;
}

public enum EventTowerDefenseMissionConditionType
{
    None = 0,
    StageId = 1,
    BuildTower = 2
}
public enum EventTowerDefenseMissionType
{
    None = 0,
    BuildTower = 1,
    ReinforceTowerCount = 2,
    HaveGold = 3,
    GainGoldCount = 4,
    BuildHeroTower = 5,
    MonsterKill = 6,
    BurstSkillUseCount = 7,
    SkillLevelUp = 8,
    SkillLevelMax = 9,
    StartWave = 10,
    ClearStage = 11,
    PlayTimeCount = 12,
    WaveQuickStartCount = 13,
    DailyPointReward = 14
}
public enum EventTowerDefenseMissionCategory
{
    None = 0,
    DailyMission = 1,
    DailyPoint = 2,
    Achievement = 3
}
public enum EventTowerDefenseEventType
{
    None = 0,
    Minigame = 1,
    EventQuest = 2
}
public enum TowerDefenseDebuffEffectType
{
    None = 0,
    Slow = 1,
    DotDamage = 2,
    Sturn = 3,
    ReceivedDamageUp = 4,
    NullStealth = 5,
    InstantDamage = 6
}
public enum TowerDefenseCinematicType
{
    None = 0,
    SpawnTowerGroup = 1,
    TimeLineAction = 2
}
public enum TowerDefenseCinematicStartConditionType
{
    None = 0,
    StageStart = 1,
    WaveStart = 2,
    AfterCinematic = 3,
    AfterDialog = 4
}
public enum TowerDefenseBuffEffectType
{
    None = 0,
    AtkUp = 1,
    RpmUp = 2,
    PenetrateUp = 3,
    RangeUp = 4,
    EffectRangeUp = 5,
    TargetCountUp = 6,
    Synchronize = 7,
    Stealth = 8,
    DebuffReduction = 9,
    StealthDetection = 10,
    IncreaseNormalAttackDebuffChance = 11
}
public enum TowerDefenseBuffTargetType
{
    None = 0,
    Tower = 1,
    Monster = 2,
    All = 3
}
public enum EventTextAdventureSelectionOpenType
{
    None = 0,
    LootItem = 1,
    Ending = 2
}
public enum EventTextAdventureEndingType
{
    None = 0,
    NORMAL = 1,
    BAD = 2,
    TRUEENDING = 3,
    HIDDEN = 4
}
public enum EventTextAdventurePageType
{
    None = 0,
    SelectPage = 1,
    ResultPage = 2,
    EndingPage = 3
}
public enum StoryEventPartType
{
    OnePart = 0,
    TwoPart = 1
}
public enum EventSortOutMissionType
{
    None = 0,
    GainPointCount = 1,
    OnceGainPointCount = 2,
    SortOutCount = 3
}
public enum EventSmashCharacterType
{
    None = 0,
    Target = 1,
    NoneTarget = 2
}
public enum SBTutorialOutputType
{
    None = 0,
    FirstEnterMainMenu = 1,
    FirstEnterSkillMenu = 2,
    FirstEnterEnhance = 3,
    FirstEnterStage = 4,
    FirstEnterUnionRanking = 5,
    FirstEnterEquipment = 6,
    FirstEnterStageSelect = 7
}
public enum SBTimeLineType
{
    Retribution = 0,
    SkillRetribution = 1,
    Finish = 2
}
[MemoryPackable]
public partial class UnlockConditionLocaleData_Raw
{
    public String? UnlockConditionLocale;
}

public enum SBStageType
{
    Easy = 0,
    Normal = 1,
    Hard = 2,
    Challenge = 3
}
public enum SBBossType
{
    Abaddon = 0,
    Behemoth = 1,
    Brute = 2,
    Gigas = 3,
    Stalker = 4
}
public enum SBRewardType
{
    SBItem = 0,
    SBCurrency = 1
}
[MemoryPackable]
public partial class SBOpenConditionData_Raw
{
    public SBShopItemOpenType OpenConditionType;
    public Int32 OpenConditionValue;
}

public enum SBShopItemOpenType
{
    None = 0,
    GainItem = 1,
    MissionClear = 2,
    StageClear = 3
}
public enum SBShopItemType
{
    None = 0,
    ExoSpine = 1,
    Gear = 2
}
[MemoryPackable]
public partial class UseSkillData_Raw
{
    public Int32 SkillId;
}

public enum SBMonsterType
{
    Abaddon = 0,
    Behemoth = 1,
    Brute = 2,
    Gigas = 3,
    Stalker = 4
}
public enum SBMonsterParryAniDirectionType
{
    Center = 0,
    Left = 1,
    Right = 2
}
public enum SBMonsterSpecialSkillType
{
    None = 0,
    Yellow = 1,
    Blue = 2,
    Purple = 3
}
public enum SBMonsterSkillUseColliderType
{
    None = 0,
    Head = 1,
    HeadCircle = 2,
    SawToothUp = 3,
    SawToothDown = 4,
    SawToothLeft = 5,
    SawToothRight = 6,
    SawToothUpLeft = 7,
    SawToothUpRight = 8,
    SawToothDownLeft = 9,
    SawToothDownRight = 10,
    Body = 11,
    BodyDown = 12,
    LeftUpperArm = 13,
    LeftForeArm = 14,
    LeftHand = 15,
    RightUpperArm = 16,
    RightForeArm = 17,
    RightHand = 18,
    LeftThigh = 19,
    LeftCalf = 20,
    LeftFoot = 21,
    RightThigh = 22,
    RightCalf = 23,
    RightFoot = 24,
    LeftHandSkillRange = 25,
    RightHandSkillRange = 26,
    RightHandCubeSkillRange = 27,
    HipRange = 28,
    LeftWeapon = 29,
    LeftWeaponSkillRange = 30,
    RightWeapon = 31,
    RightWeaponSkillRange = 32,
    Tail1 = 33,
    Tail2 = 34,
    Tail3 = 35,
    Tail4 = 36,
    Tail5 = 37,
    Tail6 = 38,
    Tail7 = 39,
    Tail8 = 40,
    Tail9 = 41,
    Tail10 = 42,
    Tail11 = 43,
    Tail12 = 44,
    Tail13 = 45,
    Tail14 = 46,
    LeftFinger1 = 47,
    LeftFinger2 = 48,
    LeftFinger3 = 49,
    LeftFinger4 = 50,
    LeftFinger5 = 51,
    LeftFinger6 = 52,
    LeftFinger7 = 53,
    LeftFinger8 = 54,
    LeftFinger9 = 55,
    LeftFinger10 = 56,
    LeftFinger11 = 57,
    RightFinger1 = 58,
    RightFinger2 = 59,
    RightFinger3 = 60,
    RightFinger4 = 61,
    RightFinger5 = 62,
    RightFinger6 = 63,
    RightFinger7 = 64,
    RightFinger8 = 65,
    RightFinger9 = 66,
    RightFinger10 = 67,
    RightFinger11 = 68,
    PhaseChangeRange = 69,
    RoarRange = 70,
    HeadSkillRange = 71,
    WaveSkillRange = 72
}
public enum SBMonsterSkillType
{
    Basic = 0,
    Projectile = 1
}
public enum SBMissionRewardType
{
    DailyPoint = 0,
    RewardId = 1,
    SBItem = 2,
    SBCurrency = 3
}
public enum SBMissionType
{
    None = 0,
    StageClear = 1,
    PerfectGuard = 2,
    PerfectDodge = 3,
    Damage = 4,
    GainGoldCount = 5,
    BuyItem = 6,
    PlayTime = 7,
    UsePotion = 8,
    DailyPointReward = 9
}
public enum SBMissionCategory
{
    DailyMission = 0,
    DailyPoint = 1,
    Achievement = 2
}
[MemoryPackable]
public partial class SBItemOptionData_Raw
{
    public SBItemOptionType ItemOptionGroup;
    public Int32 ItemOptionValue;
    public Int32 ItemOptionMaintenanceTime;
}

public enum SBItemOptionType
{
    None = 0,
    PerfectGuardTimeUp = 1,
    PerfectDodgeTimeUp = 2,
    CriticalProbabilityUp = 3,
    CriticalDamageUp = 4,
    ShieldGaugeUp = 5,
    BetaSkillDamageUp = 6,
    BurstSkillDamageUp = 7,
    BasicAttackDamageUp = 8,
    GainBetaEnergyUp = 9,
    GainBurstEnergyUp = 10,
    DamageReduceRatio = 11,
    AttackSpeedUp = 12,
    PotionRecoveryAmountUp = 13,
    ReduceRecoverySieldGaugeTime = 14,
    HitDamageUp = 15,
    UpHpGainAttack = 16,
    DownHpGainAttack = 17,
    UsePotionDamageReduce = 18,
    GuardHpRecovery = 19,
    UsePotionGainBetaEnergy = 20,
    SuccessBasicAttackGainBurst = 21,
    NotUseBetaGauge = 22,
    GainGoldUp = 23,
    BurstEnergyGaugeMaxUp = 24,
    CharacterAttackUp = 25
}
[MemoryPackable]
public partial class SBItemOptionLocale_Raw
{
    public String? ItemOptionLocale;
}

public enum SBItemType
{
    None = 0,
    ExoSpine = 1,
    Gear = 2
}
public enum SBInGameGuideOutputType
{
    Attack = 0,
    Move = 1,
    Potion = 2
}
[MemoryPackable]
public partial class AffectSkillData_Raw
{
    public SBCharacterSkillAffectSkillFactorType AffectSkillFactor;
    public Int32 AffectFactorValue;
    public Int32 AffectSkill;
}

public enum SBCharacterSkillAffectSkillFactorType
{
    None = 0,
    GainBurstGauge = 1,
    GainBetaGauge = 2,
    DecreaseShieldGauge = 3,
    DecreaseBalanceGauge = 4,
    PerfectGuardTime = 5,
    PerfectDodgeTime = 6,
    DodgeSkillDelayTime = 7,
    CharacterDownHoldTime = 8,
    ReviveCount = 9,
    MonsterRetribution = 10,
    SkillDamageUp = 11,
    RecoveryHp = 12,
    BuffAttackUp = 13,
    BuffAttackSpeedUp = 14,
    PerfectGuardGainBetaGauge = 15,
    PerfectDodgeGainBurstGauge = 16
}
public enum SBCharacterSkillGroupType
{
    Attack = 0,
    Survive = 1,
    Burst = 2,
    Beta = 3
}
public enum SBCurrencyType
{
    None = 0,
    Gold = 1,
    SkillPoint = 2,
    BodyCore = 3,
    BetaCore = 4
}
public enum SBCharacterEnhanceType
{
    Atk = 0,
    HP = 1,
    BetaGauge = 2,
    Potion = 3
}
public enum SBCharacterSkillUseColliderType
{
    None = 0,
    Head = 1,
    Body = 2,
    LeftUpperArm = 3,
    LeftForeArm = 4,
    LeftHand = 5,
    RightUpperArm = 6,
    RightForeArm = 7,
    RightHand = 8,
    LeftThigh = 9,
    LeftCalf = 10,
    LeftFoot = 11,
    RightThigh = 12,
    RightCalf = 13,
    RightFoot = 14,
    Sword = 15,
    SwordEdge = 16,
    SlashRange = 17,
    Tempest = 18,
    RisingBreak = 19,
    OverDrive = 20,
    Slash = 21,
    ShieldBreak = 22
}
public enum SBCharacterSkillType
{
    Basic = 0,
    Projectile = 1
}
public enum SBCharacterSkillUseEnergyType
{
    None = 0,
    Beta = 1,
    Burst = 2
}
public enum SBCharacterAttackType
{
    None = 0,
    BasicAttack = 1,
    Blink = 2,
    Repulse = 3,
    Beta01 = 4,
    Beta02 = 5,
    Beta03 = 6,
    Beta04 = 7,
    Burst01 = 8,
    Burst02 = 9,
    Burst03 = 10,
    Burst04 = 11
}
public enum EventRopeRunningSpyItemUnlockConditionType
{
    None = 0,
    GetRushItemCount = 1,
    HangRopeCount = 2,
    GetCoinCount = 3,
    GetMagnetItemCount = 4
}
public enum EventRopeRunningSpyItemFunctionType
{
    None = 0,
    OxygenPocket = 1,
    MetalDetector = 2,
    AdhesiveRope = 3,
    MagneticArmor = 4
}
public enum EventRopeRunningObjectType
{
    None = 0,
    Chandelier = 1,
    GoldCoin = 2,
    SilverCoin = 3,
    RushItem = 4,
    RecoveryItem = 5,
    MagnetItem = 6,
    ShieldItem = 7,
    ObstacleTable = 8,
    ObstaclePillar = 9,
    ObstacleHurdleStart = 10,
    ObstacleHurdleMiddle = 11,
    ObstacleHurdleEnd = 12,
    LandStart = 13,
    LandMiddle = 14,
    LandEnd = 15,
    GuideTap = 16,
    GuideHold = 17
}
[MemoryPackable]
public partial class EventRopeRunningObjectGroupRatio_Raw
{
    public Int32 ObjectId;
    public Int32 Ratio;
}

public enum EventRopeRunningMissionType
{
    None = 0,
    JumpCount = 1,
    GetCoin = 2,
    GetRushItem = 3,
    GetRecoveryItem = 4,
    GetMagnetItem = 5,
    GetShieldItem = 6,
    MoveDistance = 7,
    GetScoreOneTime = 8,
    GetScore = 9
}
public enum EventQuestMiniGameType
{
    None = 0,
    TowerDefense = 1
}
public enum EventQuestStageModeType
{
    None = 0,
    SpotBattle = 1,
    MiniGame = 2
}
public enum EventPlaySodaGameType
{
    Running = 0,
    StackUp = 1,
    CatchCoin = 2,
    Smash = 3,
    Climbing = 4
}
public enum EventPirateCafeSkillType
{
    ChangePercentMaidMoveSpeed = 0,
    ChangePercentMaidCleanTime = 1,
    ChangePercentServingFailTime = 2,
    ChangePercentNpcMoveSpeed = 3,
    ChangePercentWaitTimeEating = 4,
    ChangePercentWaitTimeServing = 5
}
public enum EventPirateCafeNpcType
{
    NORMAL = 0,
    EVENT = 1
}
public enum EventPirateCafeConditionsType
{
    StackPoint = 0,
    RenewRecord = 1
}
public enum EventPirateCafeMissionType
{
    TotalGet = 0,
    Achievement = 1
}
public enum EventPirateCafeCharacterType
{
    Mast = 0,
    Anchor = 1,
    Sin = 2
}
public enum EventNKSTileTypeData
{
    NotWalkable_Corner_LeftUp = 0,
    NotWalkable_Corner_RightUp = 1,
    NotWalkable_Corner_LeftDown = 2,
    NotWalkable_Corner_RightDown = 3,
    NotWalkable_Line_Up = 4,
    NotWalkable_Line_Down = 5,
    NotWalkable_Line_Left = 6,
    NotWalkable_Line_Right = 7,
    NotWalkable_All = 8,
    Walkable = 9,
    Walkable_Deco = 10
}
[MemoryPackable]
public partial class EventNKSTimeLineActionTypeValue
{
    public String? TimelineActionTypeValue;
}

public enum EventNKSStageTimelineActionType
{
    Countdown = 0,
    Alert = 1,
    Dialog = 2,
    Balloon = 3,
    Stage_Clear = 4,
    MonsterGroupSpawn = 5,
    BossMonsterSpawn = 6,
    TargetNormalMonsterSpawn = 7,
    TargetBossMonsterSpawn = 8,
    StopMonsterGroupSpawn = 9,
    ItemSpawn = 10,
    Spawn_Circle_Random = 11,
    Spawn_Circle_Equal = 12,
    Spawn_Hor = 13,
    Spawn_Hor_Pos = 14,
    Spawn_Ver = 15,
    Spawn_Ver_Pos = 16,
    Spawn_Ellipse_Hor = 17,
    Spawn_Ellipse_Ver = 18,
    Spawn_Ellipse_Pos = 19,
    Spawn_Ellipse = 20,
    BossMonsterSpawnWithAdvanceTime = 21,
    KillBoss = 22,
    CommonStageClear = 23
}
[MemoryPackable]
public partial class DropItemData
{
    public Int32 DropItemId;
    public Int32 DropItemAmount;
}

public enum EventNKSMonsterGradeType
{
    None = 0,
    Normal = 1,
    Boss = 2
}
public enum EventNKSMonsterColType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    Barrier = 3,
    Barrier_Block_All = 4
}
[MemoryPackable]
public partial class ActionValueData
{
    public Int32 ActionValue;
}

public enum EventNKSMonsterActionType
{
    None = 0,
    MoveDir = 1,
    MoveTarget_Keep = 2,
    MoveTarget_Once = 3,
    Jump = 4,
    Stop = 5,
    Suicide = 6,
    Despawn = 7,
    RotateTarget_Keep = 8,
    Suicide_Alert = 9
}
public enum EventNKSMissionRewardTypeData
{
    NKSitem = 0,
    Item = 1,
    DailyPoint = 2
}
[MemoryPackable]
public partial class NKSMissionValueData
{
    public EventNKSMissionConditionTypeData ConditionType;
    public Int32 ConditionId;
}

public enum EventNKSMissionConditionTypeData
{
    None = 0,
    AliveTime = 1,
    Character = 2,
    HoldItem = 3,
    StageId = 4
}
public enum EventNKSMissionTargetTypeData
{
    StageClear = 0,
    StageExit = 1,
    StageEnter = 2,
    AliveTimeCount = 3,
    GetItem = 4,
    Monster_KillCount = 5,
    LevelUp_Count = 6,
    DailyPointReward = 7
}
public enum EventNKSMissionCategoryData
{
    DailyMission = 0,
    DailyPoint = 1,
    ChallengeMission = 2
}
[MemoryPackable]
public partial class DescriptionValueData
{
    public String? DescriptionValue;
}

public enum EventNKSFieldItemType
{
    None = 0,
    Exp = 1,
    Currency = 2,
    Magnet = 3,
    MinionKill = 4,
    Heal = 5,
    Invincible = 6,
    Burst_timeSub = 7,
    GachaBox = 8
}
public enum EventNKSItemPassiveSpecialTypeData
{
    None = 0,
    Passive_Revive = 1,
    Passive_Heal = 2,
    Passive_InfiniteRevive = 3
}
public enum EventNKSItemCategoryType
{
    None = 0,
    Field = 1,
    Field_Special = 2,
    Field_Important = 3,
    Active = 4,
    Passive = 5,
    Passive_SkillTree = 6
}
[MemoryPackable]
public partial class ItemConditionIdData
{
    public Int32 ItemConditionId;
}

[MemoryPackable]
public partial class NKSStatData
{
    public EventNKSItemsStatType StatType;
    public EventNKSItemsStatCalcType StatCalcType;
    public Double StatValue;
}

public enum EventNKSBuffTypeData
{
    Buff = 0,
    Debuff = 1
}
[MemoryPackable]
public partial class EventNKSProjectileAtkRangeData
{
    public Int32 ProjAtkRange;
}

[MemoryPackable]
public partial class EventNKSProjectileTypeValueData
{
    public Int32 ProjTypeValue;
}

[MemoryPackable]
public partial class EventNKSGachaBonusData
{
    public Int32 BonusSlot;
}

[MemoryPackable]
public partial class DialogConditionData
{
    public EventNKSDialogConditionTypeData UseConditionType;
    public List<Int32>? UseConditionValue;
}

public enum EventNKSDialogConditionTypeData
{
    None = 0,
    Check_ItemGet = 1,
    Check_ItemHold = 2,
    Check_ReachHPratio = 3,
    Check_CurCharacter = 4
}
public enum EventNKSDialogEffectTypeData
{
    None = 0,
    Set_camera_shake = 1,
    White = 2,
    Black = 3
}
[MemoryPackable]
public partial class SpineResourceData
{
    public String? ShowSpineResourceId;
    public String? SpineAnimResourceId;
    public String? HideSpineResourceId;
    public Int32 SpineResourceCordX;
    public Int32 SpineResourceCordY;
    public Double SpineResourceScale;
}

public enum EventNKSVersionType
{
    MOG1 = 0,
    MOG2 = 1
}
public enum EventNKSCollectionTypeData
{
    NKSWeapon = 0,
    NKSModule = 1,
    NKSFieldItem = 2
}
public enum EventNKSCoinStoreType
{
    LevelupSlot = 0,
    CoinRevive = 1
}
public enum EventNKSItemsStatCalcType
{
    None = 0,
    Multi = 1,
    Add = 2,
    Sub = 3
}
public enum EventNKSItemsStatType
{
    None = 0,
    Stat_mvSpd = 1,
    Stat_hp = 2,
    Stat_atk = 3,
    Stat_atkspd = 4,
    Stat_projSize = 5,
    Stat_projSpd = 6,
    Stat_def = 7,
    Stat_magnet = 8,
    Stat_colDmg = 9,
    Stat_revivecount = 10,
    Stat_rerollcount = 11
}
[MemoryPackable]
public partial class ModuleDefaultData
{
    public Int32 ModuleDefault;
}

[MemoryPackable]
public partial class WeaponDefaultData
{
    public Int32 WeaponDefault;
}

[MemoryPackable]
public partial class SlotItemData
{
    public Int32 SlotGetItem;
    public Int32 SlotReqItem;
    public Int32 SlotReqItemValue;
}

[MemoryPackable]
public partial class BallonConditionData
{
    public EventNKSDialogConditionTypeData UseConditionType;
    public List<Int32>? UseConditionValue;
}

public enum EventNKSDialogPrintTypeData
{
    Stage = 0,
    Common = 1
}
public enum EventNKSDialogTypeData
{
    Dialog = 0,
    Balloon = 1
}
public enum EventMVGStatUpgradeType
{
    StatAtk = 0,
    StatHp = 1,
    MaxModule = 2,
    HpRespawnTime = 3,
    StatMoveSpeed = 4,
    AMuzzleProjAmount = 5
}
public enum EventMVGUnlockConditionType
{
    None = 0,
    MVGQuest = 1,
    MVGCollection = 2
}
public enum EventMVGUnlockFunctionTYpe
{
    None = 0,
    Dash = 1,
    D_Jump = 2,
    Skill_B = 3,
    Skill_C = 4,
    Skill_D = 5,
    Burst = 6,
    Shield = 7
}
public enum MVGTutorialConditionType
{
    NoDataEnter = 0,
    ViewDialogFirst = 1,
    GetCollectionFirst = 2,
    GetModuleFirst = 3,
    EnterGuidePointFirst = 4,
    ActiveChallengeMode = 5,
    GetCollectionMemoryFirst = 6,
    GetCollectionKeyFirst = 7
}
[MemoryPackable]
public partial class EventMVGShopRequireCurrencyTypeData_Raw
{
    public EventMVGCurrencyTypeData RequireCurrencyType;
    public Int32 RequireCurrencyAmount;
}

public enum EventMVGShopItemTypeData
{
    Collectable = 0,
    Module = 1,
    None = 2
}
public enum EventMVGShopTypeData
{
    Normal = 0,
    Character = 1,
    None = 2
}
public enum EventMVGResourceTypeData
{
    None = 0,
    Spine = 1,
    Sprite = 2,
    Prefab = 3,
    Timeline = 4
}
public enum EventMVGQuestConditionType
{
    StartMission = 0,
    EndMission = 1,
    KillMonster = 2,
    MissionTargetPoint = 3,
    ClearMultiCondition = 4,
    GetCollectable = 5,
    GetCurrency = 6,
    PlatformSwitchInteraction = 7,
    ConditionCheckSwitchInteraction = 8,
    TeleportDeviceInteraction = 9
}
public enum MVGQuestType
{
    Normal = 0,
    MotherMission = 1,
    ChildMission = 2
}
public enum MVGQuestTargetType
{
    First = 0,
    Loop = 1
}
public enum EventMVGMonsterSkillskilltypeTypeData
{
    ProjectileLinear = 0,
    Timelineskill = 1,
    ProjectileHoming = 2,
    ProjectileLaser = 3,
    ProjectileParabolic = 4,
    Explosion = 5
}
public enum EventMVGMonsterSettingmonstertypeTypeData
{
    Air = 0,
    Ground = 1
}
public enum EventMVGMonsterSettinggradeTypeData
{
    Thrash = 0,
    Normal = 1,
    Elite = 2,
    Special = 3,
    Centurion = 4,
    Boss = 5
}
[MemoryPackable]
public partial class EventMVGMonsterDropListSettingData_Raw
{
    public Int32 DropListId;
    public Int32 DropListRate;
    public Int32 DropCount;
}

public enum EventMVGCurrencyType
{
    MVGGold = 0,
    MVGCore = 1,
    None = 2
}
public enum EventMVGMonsterAttackTiertierTypeData
{
    _0Tier = 0,
    _1Tier = 1,
    _2Tier = 2,
    _3Tier = 3,
    _4Tier = 4,
    _5Tier = 5,
    _6Tier = 6,
    _7Tier = 7,
    _8Tier = 8,
    _9Tier = 9,
    _10Tier = 10,
    _11Tier = 11,
    _12Tier = 12,
    _13Tier = 13,
    _14Tier = 14,
    _15Tier = 15,
    _16Tier = 16,
    _17Tier = 17,
    _18Tier = 18,
    _19Tier = 19,
    _20Tier = 20
}
public enum EventMVGModuleCategoryData
{
    None = 0,
    Stat = 1,
    SkillA = 2,
    SkillB = 3,
    SkillC = 4,
    SkillD = 5,
    Burst = 6
}
public enum EventMVGMissionConditionType
{
    KillMonster = 0,
    KillBossMonster = 1,
    GetCurrency = 2,
    GetCollectable = 3,
    None = 4,
    ClearAchievement = 5,
    TargetPoint = 6,
    ClearMap = 7,
    GetUpgradeMax = 8,
    GetModule = 9,
    UseKey = 10,
    GetMemory = 11,
    PlayMVG = 12
}
public enum EventMVGMIssionSubType
{
    None = 0,
    MonsterKill = 1,
    BossMonsterKill = 2,
    GetItem = 3,
    ChapterClear = 4,
    Explorer = 5
}
public enum EventMVGMissionType
{
    Daily = 0,
    Achievement = 1
}
[MemoryPackable]
public partial class EventMVGDirectorTimelineValueData_Raw
{
    public String? TimelineValue;
}

public enum EventMVGDirectorTimeLineActionTypeData
{
    CamPointMove = 0,
    CamZoomAdjust = 1,
    CamShake = 2,
    CamPointReturnPlayer = 3,
    PlayTimelineAnimation = 4,
    PlayBGM = 5,
    PlaySE = 6,
    Wait = 7,
    FadeIn = 8,
    FadeOut = 9,
    ReturnToOriginalRoom = 10,
    EndTableTimeline = 11,
    BalloonDisplay = 12,
    ObjectStatusChange = 13,
    LoadTimelineAnimation = 14,
    StartBossIntroDisplay = 15,
    GoToLobby = 16
}
public enum EventMVGCurrencyTypeData
{
    Gold = 0,
    Core = 1,
    None = 2
}
public enum EventMVGCollectableCategoryData
{
    Memory = 0,
    HandWriting = 1,
    LostItem = 2,
    Key = 3
}
[MemoryPackable]
public partial class EventMVGCharacterCustomCustomVariablesData_Raw
{
    public EventMVGCharacterCustomVariablesTypeData CustomVariablesType;
    public EventMVGCharactercustomVariablesSettingData CustomVariables;
    public EventMVGCharacterCustomCalcTypeData CustomCalcType;
    public Int32 CustomValue;
}

public enum EventMVGCharacterCustomCalcTypeData
{
    Add = 0,
    Mul = 1,
    Sub = 2,
    Set = 3,
    None = 4
}
public enum EventMVGCharactercustomVariablesSettingData
{
    MvSpd = 0,
    DashCount = 1,
    DashLength = 2,
    DashSpd = 3,
    DashDelay = 4,
    DashCool = 5,
    DashInvincible = 6,
    JmpCount = 7,
    JmpSpd = 8,
    JmpSpd_2nd = 9,
    JmpMaxHeight = 10,
    JmpMaxHeight_2nd = 11,
    LandedLockTime = 12,
    KnockInvincibleTime = 13,
    KnockLockTime = 14,
    AbsorbRecoveryTime = 15,
    AbsorbRecoveryAmount = 16,
    HealthRecoveryTime = 17,
    HealthRecoveryAmount = 18,
    Absorb_perfectTime = 19,
    Absorb_actLockTime = 20,
    Absorb_actLock_recoveryTime = 21,
    Absorb_actLock_recoveryValue = 22,
    Burst_gaugeConsumeTime = 23,
    Attack_keep = 24,
    ActionGroupID = 25,
    CoolDownTime = 26,
    GlobalCoolDownTime = 27,
    Proj_typeValue_1 = 28,
    Proj_typeValue_2 = 29,
    Proj_typeValue_3 = 30,
    Proj_typeValue_4 = 31,
    Proj_typeValue_5 = 32,
    Proj_typeValue_6 = 33,
    Proj_typeValue_7 = 34,
    Proj_typeValue_8 = 35,
    Proj_typeValue_9 = 36,
    Proj_typeValue_10 = 37,
    Proj_duration = 38,
    Proj_afterCollide = 39,
    Proj_pierce = 40,
    Proj_spd = 41,
    Proj_atk = 42,
    Proj_size = 43,
    Proj_dmgdelay = 44,
    Proj_amount = 45,
    Proj_dmgCount = 46,
    Stat_hp = 47,
    Stat_atk = 48,
    MaxAbsorbGauge = 49,
    MaxModuleSlot = 50,
    Currency = 51,
    Hold_move = 52,
    GlassC_toggle = 53,
    None = 54
}
public enum EventMVGCharacterCustomVariablesTypeData
{
    CharacterCustomAction = 0,
    CharacterCustom = 1,
    None = 2
}
public enum EventMVGCharacterCustomLockTypeData
{
    SemiLock = 0,
    HardLock = 1,
    NoneLock = 2,
    None = 3
}
public enum EventMVGCharacterCustomSubTypeData
{
    Active = 0,
    Passive = 1
}
public enum EventMVGCustomTypeMainData
{
    Skill_a = 0,
    Skill_b = 1,
    Skill_c = 2,
    Skill_d = 3,
    Skill_Burst_A = 4,
    Skill_Burst_B = 5,
    Skill_Burst_C = 6,
    Skill_Burst_D = 7,
    Chara_mv = 8,
    Chara_Dash = 9,
    Chara_Jump = 10,
    Chara_Lock = 11,
    Chara_Knockback = 12,
    Chara_Mode = 13,
    Chara_Unique = 14,
    Chara_Stat = 15
}
[MemoryPackable]
public partial class EventMVGCharacterCustomActionProjTypeValueData_Raw
{
    public String? ProjTypeValue;
}

public enum EventMVGCharacterCustomActionProjectileTypeData
{
    Linear = 0,
    Laser_Line = 1,
    Laser_Area = 2,
    Laser_Screen = 3,
    None = 4
}
public enum EventMVGCharacterCustomActionMuzzleTypeData
{
    A_Center = 0,
    A_Muzzle = 1,
    B_Center = 2,
    B_Muzzle = 3,
    C_Center = 4,
    C_Muzzle = 5,
    D_Center = 6,
    D_Muzzle = 7,
    Character_center = 8,
    Character_bottom = 9,
    None = 10
}
[MemoryPackable]
public partial class EventMVGCharacterCustomActionValueData_Raw
{
    public String? ActionValue;
}

public enum EventMVGCharacterCustomActionTypeData
{
    PlayFx = 0,
    StopFx = 1,
    GlassAction = 2,
    InvincibleOFF = 3,
    CharacterUnlock = 4,
    None = 5
}
public enum EventMVGBalloonTypeData
{
    Auto = 0,
    Manual = 1
}
public enum EventMissionInitType
{
    None = 0,
    Daily = 1,
    Weekly = 2
}
public enum EventActiveType
{
    None = 0,
    DailyOnce = 1,
    EveryTime = 2,
    IfRewardActive = 3
}
public enum ScheduleType
{
    None = 0,
    Once = 1,
    Rotation = 2,
    Monthly = 3,
    Weekly = 4
}
public enum EventGachaBoardMissionMissionCondition
{
    ObtainCharacter = 0,
    CharacterSkill1Level = 1,
    CharacterSkill2Level = 2,
    CharacterskillBurstLevel = 3,
    CharacterAttractiveLevel = 4,
    CharacterCollectionItemLevel = 5,
    CharacterEquipCollection = 6,
    CharacterEquipItemOverload = 7
}
[MemoryPackable]
public partial class riding_contents_value
{
    public EventFieldRidingContentsType EventFieldRidingContentsType;
    public String? ContentsSdModel;
    public String? ContentsModelChangeEffect;
}

public enum EventFieldRidingContentsType
{
    None = 0,
    Fishing = 1,
    Photo = 2
}
public enum NaviType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    Water = 3,
    WaterAndGround = 4
}
public enum MemorialSeriesCategory
{
    Data = 0,
    CallLog = 1,
    HandWriting = 2,
    Category4 = 3,
    Category5 = 4,
    RedAsh = 5
}
public enum EventFieldRecollectionScenarioContentsType
{
    None = 0,
    StoryDungeon = 1,
    EventSuddenScenario = 2,
    MiniGame = 3,
    Memorial = 4
}
public enum EventFieldRecollectionCategoryType
{
    None = 0,
    Album = 1,
    Memorial = 2
}
public enum EventFieldNoticePopupPrintConditionType
{
    None = 0,
    ItemSpawn = 1,
    ItemObtain = 2,
    PasswordSpawn = 3,
    PasswordObtain = 4
}
public enum EventTargetEventType
{
    None = 0,
    Fishing = 1,
    Photo = 2
}
[MemoryPackable]
public partial class first_reward_Raw
{
    public Int32 FirstRewardId;
    public Int32 FirstRewardNum;
}

[MemoryPackable]
public partial class fix_reward_Raw
{
    public Int32 FixRewardId;
    public Int32 FixRewardNum;
}

public enum EvaStageType
{
    None = 0,
    Common = 1,
    Hard = 2,
    Ranking = 3
}
[MemoryPackable]
public partial class need_skill_Raw
{
    public Int32 NeedSkillId;
}

public enum EvaSkillEffectType
{
    Mecha_attack = 0,
    Wingman_attack = 1,
    Hp = 2,
    Pick_range = 3,
    Ultimate_skill = 4,
    Display = 5,
    Danmaku = 6
}
public enum EvaMissionRewardType
{
    None = 0,
    Item = 1,
    DailyPoint = 2
}
public enum EvaMissionType
{
    None = 0,
    StarCnt = 1,
    PassAny = 2,
    BuffCnt = 3,
    UpSkill = 4,
    AchCnt = 5,
    DailyPointReward = 6,
    FinishSkillType = 7,
    KillEnemyCnt = 8,
    Score = 9,
    UnlockWingmanId = 10,
    UnlockMechaId = 11,
    UseMechaId = 12,
    UseMechaIdPass = 13,
    UseWingmanIdPass = 14,
    Damage = 15,
    PassNormal = 16,
    PassHard = 17,
    Sundry = 18,
    PassStageId = 19
}
public enum EvaMissionCategory
{
    None = 0,
    Star = 1,
    DailyPoint = 2,
    DailyMission = 3,
    Achievement = 4
}
public enum EvaItemType
{
    None = 0,
    Common = 1,
    Mecha = 2,
    Wingman = 3
}
public enum EvaBookType
{
    None = 0,
    Common = 1,
    Enemy = 2,
    Advanced = 3
}
[MemoryPackable]
public partial class PresetGroupData_Raw
{
    public Int32 PresetGroupId;
    public Int32 PresetGroupRatio;
}

public enum EventDragonDungeonRunKnockBackDirection
{
    None = 0,
    MoveDirection = 1,
    Back = 2,
    PreviousLocation = 3
}
public enum EventDragonDungeonRunObjectType
{
    Obstacle = 0,
    Fireball = 1,
    Rock = 2,
    Needle = 3,
    GiantAX = 4,
    StepStone = 5,
    MoveStepStone = 6,
    Rapture = 7,
    TrackingRapture = 8,
    Mimic = 9,
    TrackingMimic = 10,
    Dragon = 11,
    Gold = 12
}
public enum EventDragonDungeonRunMissionType
{
    GainPoint = 0,
    GainGold = 1,
    MoveDistance = 2,
    UseSkillCount = 3,
    PlayCharacterCount = 4
}
public enum EventDragonDungeonRunDeadCutScenePrintType
{
    None = 0,
    Fall = 1,
    Mimic = 2,
    GiantAX = 3,
    Fireball = 4,
    Rock = 5,
    Rapture = 6,
    Needle = 7,
    Dragon = 8
}
public enum EventDragonDungeonRunCutScenePrintTiming
{
    Dead = 0,
    Result = 1
}
public enum EventDragonDungeonRunCharacterSkillType
{
    Slash = 0,
    Timepause = 1,
    Fireball = 2,
    Recovery = 3
}
public enum EventDragonDungeonRunCharacterUnlockType
{
    None = 0,
    GainPoint = 1,
    GainGold = 2,
    MoveDistance = 3
}
[MemoryPackable]
public partial class DiceClearScenarioGroupData
{
    public String? ClearScenarioGroupId;
}

[MemoryPackable]
public partial class DiceClearRewardData
{
    public Int32 ClearRewardId;
}

public enum DiceEventEventType
{
    None = 0,
    Item = 1,
    Leisure = 2,
    Training = 3,
    Contract = 4,
    PoorCondition = 5,
    Start = 6,
    GoTo = 7
}
public enum DiceEventRotationType
{
    None = 0,
    LeftUp = 1,
    RightUp = 2,
    LeftDown = 3,
    RightDown = 4
}
public enum EventDatingSimTutorialType
{
    None = 0,
    MyRoom = 1,
    WorldMap = 2,
    DialogEvent = 3,
    RelationEvent = 4,
    HeroineGroup = 5,
    LostItem = 6,
    InfinityTime = 7,
    InfinityStamina = 8
}
public enum EventDatingSimRelationResultEventType
{
    None = 0,
    Unlockheroine = 1,
    Relationlvup = 2,
    Ending = 3,
    Hiddenending = 4
}
[MemoryPackable]
public partial class RelationAppearSelectionConditionListData
{
    public String? EventConditionSelectionEvent;
}

[MemoryPackable]
public partial class RelationAppearDialogConditionListData
{
    public String? EventConditionDialogEvent;
}

[MemoryPackable]
public partial class RelationAppearHeroineConditionListData
{
    public String? ConditionTargetHeroine;
    public Int32 EventConditionRelationLv;
    public Int32 EventConditionRelationPoint;
}

[MemoryPackable]
public partial class RelationSubtitleLVListData
{
    public String? RelationSubtitleLv;
}

[MemoryPackable]
public partial class IsGroupEventRelationLVListData
{
    public Boolean IsGroupEventRelationLv;
}

[MemoryPackable]
public partial class HeroineIdListData
{
    public String? HeroineId;
}

public enum EventDatingSimTime
{
    None = 0,
    DayTime = 1,
    Evening = 2,
    Night = 3
}
public enum EventDatingSimHelpMessageType
{
    None = 0,
    Normal = 1,
    Heroine = 2,
    Relation = 3,
    Global = 4
}
public enum EventDatingSimHelpMessagePageType
{
    None = 0,
    Myroom = 1,
    Worldmap = 2
}
public enum EventDatingSimDialogSceneType
{
    None = 0,
    DialogScene = 1,
    PopupDialog = 2
}
public enum EventDatingSimDialogEventType
{
    None = 0,
    Heroine = 1,
    Extra = 2,
    Global = 3,
    Myroom = 4,
    Relation = 5,
    Epilogue = 6
}
public enum EventDatingSimAlbumCategory
{
    None = 0,
    Heroine = 1,
    Global = 2,
    Photo = 3
}
public enum FieldCollectContentsType
{
    None = 0,
    Can = 1
}
public enum CE004StageSeedRepeatType
{
    None = 0,
    Repeat = 1,
    Next = 2
}
public enum CE004StageSeedType
{
    None = 0,
    Order = 1,
    Random = 2
}
[MemoryPackable]
public partial class CE004OpenConditionTypeGroupData_Raw
{
    public CE004StageOpenConditionType OpenConditionType;
    public Int32 OpenConditionValue;
}

public enum CE004StageOpenConditionType
{
    None = 0,
    EventCE004MiniGameDataClear = 1,
    EventDay = 2
}
public enum CE004StageDifficulty
{
    None = 0,
    Easy = 1,
    Normal = 2,
    Hard = 3,
    Challenge = 4
}
[MemoryPackable]
public partial class CE004SeedSkillTypeGroupData_Raw
{
    public CE004SkillType SkillType;
}

public enum CE004SkillCategory
{
    None = 0,
    Attack = 1,
    Defence = 2
}
[MemoryPackable]
public partial class CE004SkillPositionGroupData_Raw
{
    public CE004SkillType SkillPosition;
}

public enum CE004MissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2,
    UpgradeCurrency = 3
}
public enum CE004MissionType
{
    None = 0,
    DailyPointReward = 1,
    CharacterPlay = 2,
    StageClear = 3,
    AccumulateDamage = 4,
    ChallengeDamage = 5,
    BuffUpgradeCount = 6,
    BurstSkill = 7,
    AttackSuccessCount = 8,
    DefenceSuccessCount = 9,
    SuccessCount = 10
}
public enum CE004MissionCategory
{
    None = 0,
    DailyPoint = 1,
    DailyMission = 2,
    Achievement = 3
}
public enum CE004MonsterPosition
{
    None = 0,
    LeftDestructionPosition = 1,
    RightDestructionPosition = 2,
    CorePosition = 3,
    LeftCancellingPosition = 4,
    RightCancellingPosition = 5,
    ProjectilePosition = 6
}
public enum HitTiming
{
    None = 0,
    Front = 1,
    Back = 2
}
public enum CE004SkillType
{
    None = 0,
    LeftDestruction = 1,
    RightDestruction = 2,
    Core = 3,
    LeftCancelling = 4,
    RightCancelling = 5,
    Projectile = 6,
    BurstSkill = 7
}
public enum CE004BuffType
{
    None = 0,
    IncreaseAttack = 1,
    IncreaseHP = 2,
    IncreaseCore = 3,
    IncreaseDestruction = 4,
    DecreaseProjectile = 5,
    DecreaseCancelling = 6,
    IncreaseChargingAttack = 7,
    IncreaseAttackBurstCharge = 8,
    IncreaseDefenceBurstCharge = 9
}
public enum CE004BuffCategory
{
    None = 0,
    Attack = 1,
    Defence = 2,
    Util = 3
}
public enum EventCE003MiniGameSkillType
{
    AddCookSlot = 0,
    MaidMoveSpeedUp = 1,
    CookSpeedUp = 2,
    CleaningSpeedUp = 3,
    HpReduceDown = 4,
    MealTimeReduce = 5,
    GetPointMore = 6,
    EventCustomerAppearUp = 7
}
public enum NpcType
{
    Normal = 0,
    Event = 1
}
public enum EventCE003MiniGameConditionsType
{
    StackPoint = 0,
    RenewRecord = 1
}
public enum EventCe003MiniGameMissionType
{
    TotalGet = 0,
    Achievement = 1
}
public enum CE002MiniGameProjectileType
{
    None = 0,
    Destroyable = 1,
    Indestroyable = 2,
    Random = 3
}
public enum CE002MiniGameMonsterType
{
    None = 0,
    Boss = 1,
    Move = 2,
    Stop = 3,
    Soft = 4,
    Hard = 5
}
[MemoryPackable]
public partial class EventCE002MiniGameDataOpenConditionObject
{
    public EventCE002MiniGameDataOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
}

public enum EventCE002MiniGameDataOpenCondition
{
    None = 0,
    EventCE002MiniGameDataClear = 1,
    EventDay = 2
}
public enum EventCatchCoinObjectType
{
    None = 0,
    CharacterHit = 1,
    AddPoint = 2
}
public enum EventBubbleMarchTutorialCondition
{
    None = 0,
    EnterMainPageFirst = 1,
    EnterBuffPageFirst = 2,
    EnterStage = 3
}
public enum EBMEnemyTargetType
{
    None = 0,
    Tower = 1,
    Monster = 2
}
public enum EBMSummonSeedType
{
    None = 0,
    Order = 1,
    Random = 2
}
public enum EBMSummonTimeRepeatType
{
    None = 0,
    Next = 1,
    Repeat = 2
}
[MemoryPackable]
public partial class EBMSummonGroupData_Raw
{
    public Int32 SummonPosition;
    public Int32 SummonMonster;
    public Int32 MonsterLevelAdd;
}

public enum EBMDifficultyType
{
    None = 0,
    Easy = 1,
    Normal = 2,
    Hard = 3,
    Challenge = 4
}
public enum EBMMonsterAttackType
{
    None = 0,
    Melee = 1,
    Range = 2
}
public enum EBMMonsterPositionType
{
    None = 0,
    Ground = 1,
    Air = 2
}
public enum EBMMonsterType
{
    None = 0,
    Tower = 1,
    Small = 2,
    Midium = 3,
    Big = 4,
    Huge = 5
}
public enum EventBubbleMarchMissionConditionType
{
    None = 0,
    WaveClear = 1,
    ChallengeWaveClear = 2,
    UseCurrency = 3,
    MinionSummon = 4,
    HeroSummon = 5,
    KillEnemy = 6,
    LevelUpCount = 7,
    TargetLevelUp = 8,
    DailyPoint = 9,
    BuffLevel = 10,
    StageClear = 11
}
public enum EventBubbleMarchMissionType
{
    None = 0,
    Daily = 1,
    Achievement = 2,
    DailyPoint = 3
}
public enum MiniGameSystemType
{
    Normal = 0,
    Archive = 1,
    Arcade = 2
}
public enum EBMCharacterDiscoverType
{
    None = 0,
    Quadrilateral = 1,
    Circle = 2
}
public enum EBMSearchTargetType
{
    None = 0,
    EnemyAll = 1,
    EnemyGround = 2,
    Friendly = 3
}
public enum EBMCharacterGradeType
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum EBMCharacterType
{
    None = 0,
    Tower = 1,
    Minion = 2,
    Hero = 3
}
public enum EBMCharacterSkillAreaType
{
    None = 0,
    Area = 1
}
public enum EBMCharacterSkillType
{
    None = 0,
    Attack = 1,
    Projectile = 2,
    ProjectileParabola = 3,
    Instant = 4,
    DeathBoom = 5,
    HpBarrier = 6,
    Teleport = 7,
    DecreaseCooltime = 8,
    Heal = 9,
    IncreaseAttackDamage = 10,
    HeroSpecialSkillAttack = 11,
    HeroSpecialSkillHeal = 12,
    BeamShot = 13
}
public enum EBMCharacterSkillTargetPositionType
{
    None = 0,
    Single = 1,
    Circle = 2,
    Quadrilateral = 3,
    All = 4
}
public enum EBMCharacterSkillTargetType
{
    None = 0,
    EnemyAll = 1,
    EnemyGround = 2,
    Self = 3,
    Friendly = 4
}
public enum EBMBuffType
{
    SetStageStartCharacterLevel = 0,
    DicreaseCharacterSummonCoolTime = 1,
    DicreaseCharacterSummonCost = 2,
    HeroSkillSummonUse = 3,
    HeroSkillCoolTimeUse = 4,
    IncreaseHeroSkillPower = 5,
    IncreaseStageChargeSummonCurrency = 6,
    SetStageStartSummonCurrencyLevel = 7
}
public enum BTGSkillType
{
    None = 0,
    SkillA = 1,
    SkillB = 2
}
[MemoryPackable]
public partial class ObjectId_Raw
{
    public Int32 ObjectId;
}

public enum EventBTGMissionConditionType
{
    None = 0,
    GetPointStack = 1,
    UseSkillCount = 2
}
public enum CutSceneConditionType
{
    None = 0,
    SkillADeath = 1,
    SkillBDeath = 2
}
[MemoryPackable]
public partial class SkillData02_Raw
{
    public EventBHWeaponSkillType SkillType02;
    public List<SkillValueData02_Raw>? SkillValue02;
    public List<SkillResourceData02_Raw>? SkillResource02;
    public String? SkillDescriptionLocale02;
}

[MemoryPackable]
public partial class SkillResourceData02_Raw
{
    public String? SkillResource02;
}

[MemoryPackable]
public partial class SkillValueData02_Raw
{
    public Int32 SkillValue02;
}

public enum EventBHWeaponSkillType
{
    None = 0,
    IgnoreDef = 1,
    BombProjectile = 2,
    KillAtkUp = 3,
    ReinforcedProj = 4,
    CriticalAttack = 5,
    DefDown = 6,
    SplitProj = 7,
    BounceProj = 8,
    DotDebuff = 9,
    InstantDeath = 10,
    DebuffCarpet = 11,
    ElectricDebuff = 12,
    DotDamageCarpet = 13,
    GainExpUp = 14,
    GainGoldRatioUp = 15,
    AllWeaponDamageRatioUp = 16,
    BarricadeHpUp = 17,
    BarricadeHpDown = 18,
    DamageReflection = 19,
    BarricadeHpRecovery = 20,
    CriticalProbabilityUp = 21,
    CriticalDamageUp = 22,
    ReloadTimeUp = 23
}
[MemoryPackable]
public partial class SkillData01_Raw
{
    public EventBHWeaponSkillType SkillType01;
    public List<SkillValueData01_Raw>? SkillValue01;
    public List<SkillResourceData01_Raw>? SkillResource01;
    public String? SkillDescriptionLocale01;
}

[MemoryPackable]
public partial class SkillResourceData01_Raw
{
    public String? SkillResource01;
}

[MemoryPackable]
public partial class SkillValueData01_Raw
{
    public Int32 SkillValue01;
}

public enum EventBHWeaponTagType
{
    None = 0,
    Projectile = 1,
    Pierce = 2,
    Range = 3
}
public enum EventBHWeaponAtkType
{
    None = 0,
    Projectile = 1,
    ProjectileMultiShot = 2,
    ProjectileBomb = 3,
    Range = 4
}
public enum EventBHFocusTargetType
{
    None = 0,
    Near = 1,
    Random = 2
}
public enum EventBHWeaponType
{
    Firearms = 0,
    Subweapon = 1
}
[MemoryPackable]
public partial class SlotData_Raw
{
    public Int32 Slot;
}

public enum BHTutorialOutputType
{
    FirstEnterBattle = 0,
    FirstOpenInGamePassive = 1,
    FirstOpenInventoryUpgrade = 2,
    FirstEnterEnhance = 3
}
[MemoryPackable]
public partial class PassiveSkillValueData_Raw
{
    public Int32 SkillValue;
}

public enum BHPassiveSkillType
{
    GainExpUp = 0,
    GainGoldRatioUp = 1,
    AllWeaponDamageRatioUp = 2,
    RangeUp = 3,
    RangeAtkDamageUp = 4,
    ProjectileDamageUp = 5,
    PierceAtkDamageUp = 6,
    RangeAtkReloadTimeDown = 7,
    ProjectileReloadTimeDown = 8,
    PierceAtkReloadTimeDown = 9,
    AllWeaponReloadTimeDown = 10,
    CarpetHoldingTimeUp = 11,
    DebuffHoldingTimeUp = 12,
    DotHoldingTimeUp = 13,
    KnockBackDistanceUp = 14,
    MonsterEnhance = 15,
    GainGoldUp = 16,
    AllWeaponAtkUp = 17,
    AddHighLevelWeaponAppearanceValue = 18,
    AddBanCount = 19,
    AddRerollCount = 20,
    HPUp = 21,
    AddInventoryUpgrade = 22,
    AddSelectPassive = 23,
    BurstSkillDamageUp = 24
}
public enum BHPassiveType
{
    InGame = 0,
    OutGame = 1
}
[MemoryPackable]
public partial class MonsterSkillValueData_Raw
{
    public Int32 MonsterSkillValue;
}

public enum BHMonsterSkillType
{
    None = 0,
    DefUp = 1,
    Split = 2
}
public enum BHMonsterAttackType
{
    Near = 0,
    Projectile = 1
}
public enum BHMonsterType
{
    Minion = 0,
    Elite = 1,
    Boss = 2
}
public enum EventBHConditionType
{
    None = 0,
    GainPoint = 1,
    GainGold = 2,
    UseSkill = 3,
    PlayCharacterCount = 4
}
[MemoryPackable]
public partial class InventorySlotData_Raw
{
    public Int32 Slot;
}

[MemoryPackable]
public partial class SkillResourceData_Raw
{
    public String? SkillResource;
}

[MemoryPackable]
public partial class BHSkillValueData_Raw
{
    public Int32 SkillValue;
}

public enum BHCharacterSkillType
{
    Knockback = 0,
    CarpetBombing = 1,
    Support = 2
}
[MemoryPackable]
public partial class StateEffectList
{
    public Int32 StateEffectId;
    public Int32 StateEffectLevel;
}

public enum EchoDialogTriggerType
{
    None = 0,
    Manual = 1,
    Auto = 2
}
public enum EchoDialogFieldDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum EchoDialogFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
[MemoryPackable]
public partial class DispatchGrade_Data
{
    public DispatchSlotType DispatchSlotType;
    public OriginalRareType Rare;
    public Int32 SlotValue;
}

public enum DispatchSlotType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ALL = 5,
    ABNORMAL = 6,
    CHARACTER = 7
}
public enum SelectType
{
    None = 0,
    Select = 1
}
[MemoryPackable]
public partial class DispatchBoardData
{
    public Int32 DispatchGroup;
    public Int32 DispatchProb;
}

public enum DispatchType
{
    None = 0,
    Dispatch = 1,
    DispatchCollection = 2,
    DispatchFavorite = 3
}
public enum EventTargetType
{
    None = 0,
    Alluser = 1,
    Newuser = 2,
    Comebackuser = 3
}
public enum EventPhaseType
{
    None = 0,
    Day1 = 1,
    Day2 = 2,
    Day3 = 3,
    Day4 = 4,
    Day5 = 5,
    Day6 = 6,
    Day7 = 7,
    Day8 = 8,
    Day9 = 9,
    Day10 = 10,
    Day11 = 11,
    Day12 = 12,
    Day13 = 13,
    Day14 = 14,
    Final = 15
}
[MemoryPackable]
public partial class CostData
{
    public RewardType ItemType;
    public Int32 ItemId;
    public Int32 ItemValue;
}

public enum CooperationEventContentsType
{
    None = 0,
    MultiRaid = 1
}
public enum RenewType
{
    None = 0,
    AutoDay = 1,
    AutoWeek = 2,
    AutoMonth = 3,
    EachUser = 4,
    ManualRenew = 5,
    NoRenew = 6
}
public enum ShopCategoryType
{
    None = 0,
    ShopNormal = 1,
    ShopGuild = 2,
    ShopDisassemble = 3,
    ShopMaze = 4,
    ShopPvP = 5,
    ShopCooperationEvent = 6,
    ShopStoryEvent = 7,
    ShopMileage = 8,
    ShopTrade = 9
}
public enum ShopType
{
    None = 0,
    MainShop = 1,
    EventShop = 2
}
public enum CurrencyType
{
    None = 0,
    UserExp = 1,
    ChargeCash = 98,
    FreeCash = 99,
    CharacterExp = 1000,
    Gold = 2000,
    CharacterExp2 = 3000,
    Friendship_Point = 4000,
    ArenaChip = 5000,
    Char_Premium_Ticket = 5100,
    Char_Customize_Ticket = 5200,
    Char_Corporation_Ticket = 5300,
    Char_CE002_RE_Ticket = 5401,
    Char_CE007_Ticket = 5402,
    Char_Select_01_Ticket = 5501,
    Arena_Ticket = 6001,
    _2nd_Arena_Ticket = 6002,
    InterceptTicket = 6003,
    ContentStamina = 6100,
    RecycleRoomPoint = 6200,
    InfraCoreEnergy = 7000,
    RaptureParts = 8000,
    RapturePartsRanking = 8100,
    DissolutionPoint = 9000,
    InApp = 9999,
    GuildCoin = 10000,
    SilverMileageTicket = 11000,
    GoldMileageTicket = 12000,
    SimulationRoomPoint = 13000,
    CharacterSkillReset_Ticket = 14000,
    CorePowder = 21000,
    Goddesium = 22000,
    Geonic = 23000,
    NeoTitanium = 24000
}
public enum add_mark
{
    None = 0,
    Event = 1
}
public enum ContentsShopDescriptionType
{
    None = 0,
    Stage = 1
}
public enum PriceType
{
    Currency = 0,
    Item = 1
}
public enum RewardConditionType
{
    Rank = 0,
    RankPercent = 1,
    DamageDoneToTargetMonster = 2
}
public enum VoiceTargetType
{
    Character = 0,
    Costume = 1
}
public enum CategoryType
{
    None = 0,
    Air_Attacker = 1,
    Air_Defender = 2,
    Air_Supporter = 3,
    Attacker = 4,
    Defender = 5,
    Supporter = 6,
    Walk = 7,
    Fly = 8
}
public enum TableType
{
    None = 0,
    StateEffect = 1,
    CharacterSkill = 2
}
public enum BurstStep
{
    None = 0,
    Step1 = 1,
    Step2 = 2,
    Step3 = 3,
    StepFull = 4,
    AllStep = 5,
    NextStep = 6,
    KeepStep = 7
}
public enum CorporationSubType
{
    NORMAL = 0,
    OVERSPEC = 1
}
public enum CorporationType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ALL = 5,
    RANDOM = 6,
    ABNORMAL = 7
}
public enum DurationType
{
    None = 0,
    TimeSec = 1,
    Shots = 2,
    Battles = 3,
    Hits = 4,
    SkillShots = 5,
    TimeSecBattles = 6,
    OnStun = 7,
    OnRemoveFunction = 8,
    Hits_Ver2 = 9,
    TimeSec_Ver2 = 10,
    TimeSec_Ver3 = 11,
    ReloadAllAmmoCount = 12,
    UncoverableCount = 13,
    ChangeWeaponUseCount = 14
}
[MemoryPackable]
public partial class SkillValueData
{
    public SkillValueType SkillValueType;
    public Int64 SkillValue;
}

public enum SkillValueType
{
    None = 0,
    Integer = 1,
    Percent = 2
}
public enum CharacterSkillType
{
    None = 0,
    InstantAll = 1,
    InstantNumber = 2,
    AimingExplosion = 3,
    AimingPenetration = 4,
    InstallDrone = 5,
    InstallBarrier = 6,
    ChangeWeapon = 7,
    SetBuff = 8,
    InstantSkill = 9,
    Custom191Ulti = 10,
    LaunchWeapon = 11,
    TargetShot = 12,
    InstantCircle = 13,
    InstantLine = 14,
    InstantArea = 15,
    InstallDecoy = 16,
    MultiTarget = 17,
    LaserBeam = 18,
    Stigma = 19,
    MaxHPInstantNumber = 20,
    InstantCircleSeparate = 21,
    HitMonsterGetBuff = 22,
    ExplosiveCircuit = 23,
    InstantSequentialAttack = 24,
    ReFullChargeHitDamage = 25,
    InstantAllParts = 26,
    TargetHitCountGetBuff = 27,
    HealCharge = 28
}
public enum CounterType
{
    None = 0,
    Metal_Type = 1,
    Energy_Type = 2,
    Bio_Type = 3
}
public enum CharacterReactionType
{
    Enter = 0,
    Touch = 1,
    Stay = 2,
    Special_lobby_change = 3
}
public enum CharacterLevelType
{
    None = 0,
    CharacterLevel = 1,
    SynchroLevel = 2
}
public enum CostumeShopType
{
    None = 0,
    Costume = 1,
    PassCostume = 2
}
public enum CostumeGrade
{
    Event = 0,
    Special = 1,
    Collaboration = 2,
    Multiverse = 3,
    Unique = 4
}
public enum StageCategory
{
    Normal = 0,
    Story = 1,
    Hard = 2,
    Extra = 3,
    Boss = 4
}
public enum CampaignPackageRewardType
{
    Free = 0,
    Purchase = 1,
    ChapterClear = 2
}
public enum ChapterGuideType
{
    None = 0,
    Tutorial = 1,
    Common = 2
}
public enum OpenType
{
    Open = 0,
    NonUpdate = 1
}
[MemoryPackable]
public partial class bot_equipment_data
{
    public Int32 EquipmentId;
    public Int32 EquipmentLevel;
}

public enum BotCategory
{
    RookieArenaRival = 0,
    SpecialArenaTop = 1,
    CooperationEvent = 2,
    DefaultBot = 3,
    ChampionArena = 4
}
public enum BGMTriggerEventType
{
    None = 0,
    Stage_enter = 1,
    Stage_clear = 2,
    Target_appear = 3,
    Change_Phase_2 = 4,
    Change_Phase_3 = 5,
    Stage_start = 6
}
public enum BGMSubType
{
    None = 0,
    Campaign_stage = 1,
    Sudden_battle = 2,
    Lost_sector = 3,
    ArenaSpecial = 4,
    ArenaNormal = 5,
    ALL = 6,
    ELYSION = 7,
    MISSILIS = 8,
    TETRA = 9,
    PILGRIM = 10,
    Outpost = 11,
    Multi_raid = 12,
    Simulation_room = 13,
    Raid = 14,
    Shooting_range = 15,
    Event_stage = 16,
    Event_field = 17,
    Gacha = 18,
    Jukebox_lobby = 19,
    Jukebox_commandcenter = 20,
    Side_story = 21,
    Arcade = 22,
    Archive_field = 23
}
public enum BGMType
{
    None = 0,
    Chapter_bgm = 1,
    Arena_bgm = 2,
    Spot_bgm = 3,
    Outgame_bgm = 4,
    Ambient = 5,
    Story_event_bgm = 6,
    Event_field_bgm = 7,
    Story_event_bgm_set = 8
}
public enum BGMShopType
{
    None = 0,
    CashShop = 1,
    ContentsShop = 2
}
public enum EventBBQTycoonCustomerBonusType
{
    None = 0,
    PointX2 = 1,
    FeverX2 = 2
}
public enum BannerPrintType
{
    None = 0,
    PrintEventTime = 1,
    PrintNone = 2,
    UndeterminedEnd = 3
}
public enum BannerSystemType
{
    None = 0,
    InAppShop = 1,
    CampaignNormal = 2,
    CampaignHard = 3,
    UnionRaid = 4,
    MidasBuy = 5
}
public enum ArenaChampionUnionRankConditionType
{
    None = 0,
    UnionMemberTournament1 = 1,
    UnionMemberTournament2 = 2,
    UnionMemberTournament4 = 3,
    UnionMemberTournament8 = 4,
    UnionMemberTournament16 = 5,
    UnionMemberTournament32 = 6,
    UnionMemberTournament64 = 7,
    UnionMemberEnterLeague = 8
}
public enum ArenaChampionTotalRankConditionType
{
    None = 0,
    EnterLeagueCount = 1,
    EnterTournamentCount64 = 2,
    EnterTournamentCount32 = 3,
    EnterTournamentCount16 = 4,
    EnterTournamentCount8 = 5,
    EnterTournamentCount4 = 6,
    EnterTournamentCount2 = 7,
    EnterTournamentCount1 = 8
}
public enum RewardDataLoadType
{
    EventDungeonDifficult = 0
}
public enum ArchiveRecordType
{
    StoryEvent = 0,
    EventQuest = 1,
    CollaboEvent = 2
}
public enum ShortCutsInteractionType
{
    CampaignAlbum = 0,
    ArchiveRecord = 1
}
[MemoryPackable]
public partial class ArchiveMessengerConditionObject
{
    public ArchiveMessengerConditionType ConditionType;
    public Int32 ConditionId;
}

public enum ArchiveMessengerConditionType
{
    None = 0,
    EventStageClear = 1,
    MessageClear = 2,
    CampaignClear = 3
}
public enum EventSystemType
{
    None = 0,
    DailyMissionEvent = 1,
    LoginEvent = 2,
    ViewShortCut = 3,
    CooperationEvent = 4,
    StoryEvent = 5,
    PickupGachaEvent = 6,
    PollEvent = 7,
    ComeBackUserEvent = 8,
    EventPass = 9,
    FieldHubEvent = 10,
    ShopEvent = 11,
    MissionEvent = 12,
    ChargeGachaEvent = 13,
    MiniGameSortOut = 14,
    CharacterSkillResetEvent = 15,
    EventQuest = 16,
    RewardUpEvent = 17,
    SDBattleEvent = 18,
    TextAdventure = 19,
    ChallengeModeEvent = 20,
    DailyFreeGachaEvent = 21,
    BoxGachaEvent = 22,
    DiceEvent = 23,
    BBQTycoon = 24,
    CE002MiniGame = 25,
    TriggerMissionEventReward = 26,
    ArenaRookieGroupShuffle = 27,
    ArenaSpecialGroupShuffle = 28,
    NKSMiniGame = 29,
    DatingSimulator = 30,
    DessertRush = 31,
    CE003MiniGame = 32,
    TowerDefense = 33,
    EventPlaySoda = 34,
    IslandAdventure = 35,
    MiniGameDD = 36,
    CE004MiniGame = 37,
    MVGMiniGame = 38,
    DragonDungeonRunMiniGame = 39,
    NewPlayerLottery = 40,
    PirateCafe = 41,
    CEEvaMiniGame = 42,
    BubbleMarchMiniGame = 43,
    CE006BossChallengeMiniGame = 44,
    SupportCharacterEvent = 45,
    GachaBoard = 46,
    FreeRewardPass = 47,
    GachaPayback = 48,
    FieldCollectEvent = 49,
    MiniGameBTG = 50,
    RopeRunningMiniGame = 51,
    CE007MiniGame = 53
}
[MemoryPackable]
public partial class EventFieldCurrencyData
{
    public EventFieldCurrencyType EventFieldCurrencyType;
    public Int32 EventFieldCurrencyId;
}

public enum EventFieldCurrencyType
{
    None = 0,
    Material = 1,
    Currency = 2,
    AutoCharge = 3
}
public enum FieldPlayerSquadType
{
    None = 0,
    UserSquad = 1,
    FixedSquad = 2
}
public enum EventFieldRoamingNPCType
{
    UserCharacter = 0,
    FixedSDCharacter = 1
}
[MemoryPackable]
public partial class ArchiveEventFieldNPCEventData
{
    public Int32 EventId;
    public EventFieldChildEventType EventType;
    public String? EventResourceValue;
}

public enum EventFieldChildEventType
{
    None = 0,
    Cooperation = 1,
    ToastMessage = 2,
    Arcade = 3
}
public enum FieldFixedSDCharacterReferenceType
{
    None = 0,
    CharacterTable = 1,
    ScenarioCharacterSettingTable = 2
}
public enum EventFieldSDCharacterUsageType
{
    Squad = 0,
    RoamingNPC = 1
}
public enum EventDungeonContentsType
{
    None = 0,
    SpotBattle = 1,
    TowerDefense = 2,
    EventPlaySoda = 3,
    EVABattle = 4
}
public enum QuickBattleType
{
    None = 0,
    StageClear = 1,
    StandardBattlePower = 2
}
[MemoryPackable]
public partial class EventDungeonOpenConditionObject
{
    public EventDungeonOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
}

public enum EventDungeonOpenCondition
{
    None = 0,
    EventDungeonStageClear = 1,
    EventDay = 2
}
public enum ArcadeGameType
{
    BBQTycoon = 0,
    MiniGameSortOut = 1,
    NKSMiniGame = 2,
    TowerDefense = 3,
    DessertRush = 4,
    Mvg = 5,
    PlaySoda = 6,
    BubbleMarch = 7
}
public enum DialogType
{
    Normal = 0,
    NKSmini = 1
}
public enum ScenarioDialogTableType
{
    None = 0,
    ScenarioDialog = 1,
    EventScenarioDialog = 2
}
public enum EventFieldNPCInteractionType
{
    None = 0,
    Immediately = 1
}
[MemoryPackable]
public partial class EventFieldNPCEventData
{
    public Int32 EventId;
    public EventFieldChildEventType EventType;
    public String? EventResourceValue;
}

public enum EventFieldNPCType
{
    Character = 0,
    Npc = 1
}
public enum FieldProgressEventCheckCondition
{
    None = 0,
    Talk = 1
}
public enum FieldProgressEventType
{
    None = 0,
    MapChange = 1,
    IncreaseDummy = 2,
    CameraAction = 3,
    ScenarioDialog = 4,
    FieldTalk = 5,
    Spawn = 6,
    Despawn = 7,
    TimeLineAction = 8,
    HudChange = 9,
    PlayerSquadChangeToFixedSquad = 10,
    MapPresetChange = 11
}
public enum FieldProgressEventTarget
{
    None = 0,
    Field = 1,
    NPC = 2
}
[MemoryPackable]
public partial class SelectionEventValueListData
{
    public String? EventTargetHeroine;
    public Int32 EventValue;
    public EventDatingSimSelectionResultGradeType EventResultGrade;
}

public enum EventDatingSimSelectionResultGradeType
{
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3
}
public enum EventDatingSimSelectionEventType
{
    None = 0,
    Relationpointup = 1
}
[MemoryPackable]
public partial class SelectDialogConditionListData
{
    public String? SelectConditionDialogEvent;
}

[MemoryPackable]
public partial class SelectConditionListData
{
    public String? ConditionTargetHeroine;
    public Int32 SelectConditionRelationLv;
    public Int32 SelectConditionRelationPoint;
}

[MemoryPackable]
public partial class DialogAppearSelectionConditionListData
{
    public String? EventConditionSelectionEvent;
}

[MemoryPackable]
public partial class DialogAppearDialogConditionListData
{
    public String? EventConditionDialogEvent;
}

public enum CooperationEventReportType
{
    None = 0,
    No_attack_input_time_total = 1,
    No_all_input_time_total = 2
}
[MemoryPackable]
public partial class buff_data
{
    public CooperationBuffTargetCategoryType BuffTargetType;
    public CooperationBuffTargetType BuffTarget;
    public Int32 BuffId;
    public String? BuffThumbnail;
}

public enum CooperationBuffTargetType
{
    None = 0,
    Elysion = 1,
    Missilis = 2,
    Tetra = 3,
    Pilgrim = 4,
    Attacker = 5,
    Defender = 6,
    Supporter = 7,
    AbNormal = 8
}
public enum CooperationBuffTargetCategoryType
{
    None = 0,
    Corporation = 1,
    Class = 2
}
public enum EventType
{
    None = 0,
    Outpost = 1
}
[MemoryPackable]
public partial class TriggerData
{
    public Trigger Trigger;
    public Int32 ConditionId;
    public Int32 ConditionValue;
}

public enum TypeOpenCondition
{
    None = 0,
    ClearGetCharacterMission = 1
}
[MemoryPackable]
public partial class LessonConditionData
{
    public LessonConditionType ConditionType;
    public Int32 ConditionValue;
}

public enum LessonConditionType
{
    None = 0,
    StageClear = 1,
    OpenLesson = 2,
    Build = 3,
    AllCorporationGrade3 = 4,
    MissilisCorporationGrade3 = 5,
    ElysionCorporationGrade3 = 6,
    TetraCorporationGrade3 = 7,
    PilgrimCorporationGrade3 = 8,
    AbnormalCorporationGrade3 = 9
}
[MemoryPackable]
public partial class LessonRewardData
{
    public Int32 LessonRewardId;
    public Int32 LessonRewardValue;
}

public enum LessonType
{
    None = 0,
    Dispatch = 1,
    OutpostBattle = 2,
    SpecialArena = 3,
    Intercept = 4,
    SynchroDevice = 5,
    BuildingSlot = 6,
    SimulationRoom = 7,
    DispatchCollection = 8,
    DispatchFavorite = 9
}
[MemoryPackable]
public partial class OutpostBattle_Data
{
    public Int32 ViewItemId;
    public PrepareRewardType ItemType;
    public Int32 ItemId;
    public Int32 ItemValue;
    public Int32 TimeSec;
}

public enum PrepareRewardType
{
    None = 0,
    Currency = 1,
    ItemRandom = 2
}
public enum BuildingCategory
{
    None = 0,
    Default = 1,
    CommanderCenter = 2,
    Elevator = 3,
    DispatchBoard = 4,
    SynchroDevice = 5,
    RecycleRoom = 6,
    TacticAcademy = 7,
    InfraCore = 8,
    AmusementPark = 9,
    OutdoorPool = 10,
    FlowerPark = 11,
    EventBuilding01 = 12
}
public enum AssistSquadControlType
{
    None = 0,
    Auto = 1
}
public enum AssistSquadMoveType
{
    Ground = 0,
    Fly = 1,
    Ground_Electric = 2
}
public enum AssistSquadType
{
    None = 0,
    Pickup = 1,
    Hammer = 2,
    Fix = 3,
    Hacking = 4,
    Transport = 5,
    Cat = 6,
    Mini = 7,
    Electric = 8,
    ConvertGround = 9,
    ConvertFly = 10
}
public enum ThemeTimeType
{
    None = 0,
    Day = 1,
    Twilight = 2,
    Night = 3,
    Smog = 4,
    Elysion = 5,
    Missilis = 6,
    Tetra = 7,
    Pilgrim = 8
}
public enum ThemeType
{
    None = 0,
    CityForest = 1,
    CityForestUnder = 2,
    CityForestmbg002 = 3,
    Desert = 4,
    Desertmbg001 = 5,
    GreatHole = 6,
    IceLand = 7,
    Wasteland = 8,
    ArcCity = 9,
    ArcOut = 10,
    ArcLAB = 11,
    Tower = 12,
    MissilesTower = 13,
    ElysionTower = 14,
    TetraTower = 15,
    PilgrimTower = 16,
    VillageCity = 17,
    VillageOut = 18,
    Gravedigger = 19,
    Stormbringer = 20,
    Lostsector = 21,
    NormalArena = 22,
    SpecialArena = 23,
    ChampionArena = 24,
    Volcano = 25,
    ArkCityDay = 26,
    Ocean = 27,
    Oceanbbg004 = 28,
    Simulation = 29,
    RedOcean = 30,
    RedOceanFarSea = 31,
    SwamplandJungle = 32,
    Surface = 33,
    MotherwhaleField = 34
}
public enum ArenaType
{
    None = 0,
    ArenaNormal = 1,
    ArenaSpecial = 2,
    ArenaChampion = 3
}
public enum InterceptSpotType
{
    WaveData = 0,
    NKSMiniGame = 1
}
public enum CameraShakeType
{
    Fire_AR = 0,
    Fire_MG = 1,
    Fire_SMG = 2,
    Fire_RL = 3,
    Fire_SG = 4,
    Fire_SR = 5,
    Hit_RL = 6,
    CharacterSkillShake01 = 7,
    CharacterSkillShake02 = 8,
    CharacterSkillShake03 = 9,
    CharacterHit = 10,
    MonsterSkillCancel = 11,
    MonsterPartsBroken = 12,
    Monsterlanding = 13
}
public enum PreferTargetconditionType
{
    None = 0,
    ExcludeSelf = 1,
    DestroyCover = 2,
    IncludeNoneTargetLast = 3,
    IncludeNoneTargetNone = 4,
    OnlySG = 5,
    OnlyAR = 6,
    OnlySMG = 7,
    OnlyMG = 8,
    OnlySR = 9,
    OnlyRL = 10
}
public enum InputType
{
    NONE = 0,
    DOWN = 1,
    UP = 2,
    DOWN_Charge = 3
}
public enum CounterEnermy
{
    None = 0,
    Metal_Type = 1,
    Energy_Type = 2,
    Bio_Type = 3
}
public enum CostumePriceType
{
    None = 0,
    Regular = 1,
    Bargain = 2
}
public enum CashShopProductType
{
    None = 0,
    Currency = 1,
    Item = 2,
    Package = 3,
    Subscription = 4,
    Pass = 5
}
public enum ShopBuyLimitType
{
    None = 0,
    Account = 1,
    Daily = 2,
    Weekly = 3,
    Monthly = 4,
    Renew = 5
}
[MemoryPackable]
public partial class HarmonyCubeStatData
{
    public StatType StatType;
    public Int32 StatRate;
}

[MemoryPackable]
public partial class SkillLevelData
{
    public Int32 SkillLevel;
}

[MemoryPackable]
public partial class HarmonyCubeSkillGroupData
{
    public Int32 SkillGroupId;
}

public enum CharacterClassType
{
    None = 0,
    Attacker = 1,
    Defender = 2,
    Supporter = 3,
    All = 4
}
public enum PercentDisplayType
{
    None = 0,
    Percent = 1,
    Random = 2
}
public enum ItemUseType
{
    None = 0,
    Char_Exp = 1,
    Currency = 2,
    SelectBox = 3,
    Item = 4,
    SummonCharacter = 5,
    SummonRandomCharacter = 6,
    CurrencyTimeReward = 7,
    BundleBox = 8,
    ItemRandomBox = 9,
    SelectBoxRow = 10,
    SelectBoxRowCharacter = 11,
    EquipCombination = 12,
    MVGGold = 13,
    MVGCore = 14,
    MVGCollectable = 15
}
public enum OriginalRareType
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum ItemSubType
{
    None = 0,
    Module_A = 1,
    Module_B = 2,
    Module_C = 3,
    Module_D = 4,
    Box = 5,
    Char_Material = 6,
    Equip_Material = 7,
    Attack_Equip_Material = 8,
    Defence_Equip_Material = 9,
    Support_Equip_Material = 10,
    AttractiveMaterial = 11,
    CharacterPiece = 12,
    SummonPiece = 13,
    MaterialPiece = 14,
    TimeReward = 15,
    OutpostBuild_Material = 16,
    RecycleRoom_Material = 17,
    HarmonyCube = 18,
    HarmonyCube_Material = 19,
    BundleBox = 20,
    ItemRandomBoxList = 21,
    ItemRandomBoxNormal = 22,
    EventCurrencyMaterial = 23,
    EventTicketMaterial = 24,
    EquipmentOptionMaterial = 25,
    CharacterSkillMaterial = 26,
    SetNickNameMaterial = 27,
    CharacterSkillResetMaterial = 28,
    SynchroSlotOpenMaterial = 29,
    FavoriteMaterial = 30,
    FavoriteTranscendMaterial = 31,
    ProfileCardTicketMaterial = 32,
    ProfileRandomBox = 33,
    EquipmentOptionDisposableFixMaterial = 34,
    EquipCombination = 35,
    EventItem = 36,
    ArcadeItem = 37
}
public enum ItemType
{
    None = 0,
    Equip = 1,
    Consume = 2,
    Material = 3,
    Piece = 4,
    HarmonyCube = 5
}
public enum UseCondition
{
    None = 0,
    UserLevel = 1,
    StageClear = 2
}
public enum CancelType
{
    None = 0,
    BreakCol = 1,
    BrokenParts = 2,
    BrokenParts_OnlyCasting = 3,
    BrokenParts_HurtCount = 4,
    BrokenParts_UntilEnd = 5
}
public enum PartsType
{
    None = 0,
    Arm_Left = 1,
    Arm_Right = 2,
    Head = 3,
    Body_Lower = 4,
    Body_Upper = 5,
    Body = 6,
    Chest = 7,
    Belly = 8,
    Leg_Front_Left = 9,
    Leg_Front_Right = 10,
    Leg_Back_Left = 11,
    Leg_Back_Right = 12,
    Weapon_01 = 13,
    Weapon_02 = 14,
    Weapon_03 = 15,
    Weapon_04 = 16,
    Weapon_05 = 17,
    Weapon_06 = 18,
    Weapon_07 = 19,
    Weapon_08 = 20,
    Weapon_09 = 21,
    Weapon_10 = 22
}
public enum ObjectPositionType
{
    None = 0,
    Local = 1,
    World = 2
}
public enum PreferTargetType
{
    None = 0,
    Attacker = 1,
    Defender = 2,
    Supporter = 3,
    AttackerRandom = 4,
    DefenderRandom = 5,
    SupporterRandom = 6,
    Front = 7,
    Back = 8,
    Left = 9,
    Right = 10,
    LowHP = 11,
    HighHP = 12,
    HighMaxHP = 13,
    LowDefence = 14,
    HighDefence = 15,
    LowAttack = 16,
    HighAttack = 17,
    LowHPLastSelf = 18,
    HighHPLastSelf = 19,
    LowDefenceLastSelf = 20,
    HighDefenceLastSelf = 21,
    LowAttackLastSelf = 22,
    HighAttackLastSelf = 23,
    TargetSR = 24,
    TargetAR = 25,
    TargetAS = 26,
    TargetRL = 27,
    TargetGL = 28,
    TargetPS = 29,
    BurstStep = 30,
    Random = 31,
    LowHPFirstSelf = 32,
    HighHPFirstSelf = 33,
    LowDefenceFirstSelf = 34,
    HighDefenceFirstSelf = 35,
    LowAttackFirstSelf = 36,
    HighAttackFirstSelf = 37,
    NearbyAllyTarget = 38,
    NearbyEnemyTarget = 39,
    NearbyAllyLastSelf = 40,
    Fire = 41,
    Water = 42,
    Wind = 43,
    Electronic = 44,
    Iron = 45,
    NotStun = 46,
    LowHPCover = 47,
    LowHPRatio = 48,
    HighHPRatio = 49,
    LowMaxHP = 50,
    HaveDebuff = 51,
    HaveBuff = 52,
    NearAim = 53,
    LongInitChargeTime = 54
}
public enum WeaponObjectEnum
{
    None = 0,
    Weapon_object_01 = 1,
    Weapon_object_02 = 2,
    Weapon_object_03 = 3,
    Weapon_object_04 = 4,
    Weapon_object_05 = 5,
    Weapon_object_06 = 6,
    Weapon_object_07 = 7,
    Weapon_object_08 = 8,
    Weapon_object_09 = 9,
    Weapon_object_10 = 10,
    Weapon_object_11 = 11,
    Weapon_object_12 = 12,
    Weapon_object_13 = 13,
    Weapon_object_14 = 14,
    Weapon_object_15 = 15,
    Weapon_object_16 = 16,
    Weapon_object_17 = 17,
    Weapon_object_18 = 18,
    Weapon_object_19 = 19,
    Weapon_object_20 = 20
}
public enum MonsterSkillValueType
{
    None = 0,
    Percent = 1,
    Integer = 2
}
public enum ShotTimingType
{
    None = 0,
    Concurrence = 1,
    Sequence = 2,
    ConcurrenceGroup = 3
}
public enum FireType
{
    None = 0,
    Instant = 1,
    ProjectileCurve = 2,
    ProjectileDirect = 3,
    HomingProjectile = 4,
    MultiTarget = 5,
    Blow = 6,
    Suicide = 7,
    Calling = 8,
    InstantAll = 9,
    InstantNumber = 10,
    ObjectCreate = 11,
    Summon = 12,
    Barrier = 13,
    Range = 14,
    NormalCalling = 15,
    InstantAll_FrontRay = 16,
    StickyProjectileDirect = 17,
    ObjectCreateToDecoy = 18,
    MechaShiftyShot = 19,
    ProjectileCurveV2 = 20
}
public enum AttackType
{
    None = 0,
    Energy = 1,
    Metal = 2,
    Bio = 3,
    Fire = 4,
    Water = 5,
    Wind = 6,
    Iron = 7,
    Electronic = 8
}
public enum WeaponType
{
    None = 0,
    AR = 1,
    RL = 2,
    SR = 3,
    MG = 4,
    SG = 5,
    AS = 6,
    GL = 7,
    PS = 8,
    SMG = 9
}
public enum SkillAniNumberType
{
    None = 0,
    Shot_01 = 1,
    Shot_02 = 2,
    Shot_03 = 3,
    Shot_04 = 4,
    Shot_05 = 5,
    Shot_06 = 6,
    Shot_07 = 7,
    Shot_08 = 8,
    Shot_09 = 9,
    Shot_10 = 10,
    Shot_11 = 11,
    Shot_12 = 12,
    Shot_13 = 13,
    Shot_14 = 14,
    Shot_15 = 15,
    Shot_16 = 16,
    Shot_17 = 17,
    Shot_18 = 18,
    Shot_19 = 19,
    Shot_20 = 20,
    Shot_21 = 21,
    Shot_22 = 22,
    Shot_23 = 23,
    Shot_24 = 24,
    Shot_25 = 25,
    Shot_26 = 26,
    Shot_27 = 27,
    Shot_28 = 28,
    Shot_29 = 29,
    Shot_30 = 30,
    Shot_31 = 31,
    Shot_32 = 32,
    Shot_33 = 33,
    Shot_34 = 34,
    Shot_35 = 35,
    Shot_36 = 36,
    Shot_37 = 37,
    Shot_38 = 38,
    Shot_39 = 39,
    Shot_40 = 40,
    Shot_41 = 41,
    Shot_42 = 42,
    Shot_43 = 43,
    Shot_44 = 44,
    Shot_45 = 45,
    Shot_46 = 46,
    Shot_47 = 47,
    Shot_48 = 48,
    Shot_49 = 49,
    Shot_50 = 50,
    Shot_51 = 51,
    Shot_52 = 52,
    Shot_53 = 53,
    Shot_54 = 54,
    Shot_55 = 55,
    Shot_56 = 56,
    Shot_57 = 57,
    Shot_58 = 58,
    Shot_59 = 59,
    Shot_60 = 60,
    Shot_61 = 61,
    Shot_62 = 62,
    Shot_63 = 63,
    Shot_64 = 64,
    Shot_65 = 65,
    Shot_66 = 66,
    Shot_67 = 67,
    Shot_68 = 68,
    Shot_69 = 69,
    Shot_70 = 70,
    Shot_71 = 71,
    Shot_72 = 72,
    Shot_73 = 73,
    Shot_74 = 74,
    Shot_75 = 75,
    Shot_76 = 76,
    Shot_77 = 77,
    Shot_78 = 78,
    Shot_79 = 79,
    Shot_80 = 80,
    Shot_81 = 81,
    Shot_82 = 82,
    Shot_83 = 83,
    Shot_84 = 84,
    Shot_85 = 85,
    Shot_86 = 86,
    Shot_87 = 87,
    Shot_88 = 88,
    Shot_89 = 89,
    Shot_90 = 90,
    Shot_91 = 91,
    Shot_92 = 92,
    Shot_93 = 93,
    Shot_94 = 94,
    Shot_95 = 95,
    Shot_96 = 96,
    Shot_97 = 97,
    Shot_98 = 98,
    Shot_99 = 99
}
public enum Condition
{
    MainScenario = 0,
    AttractiveScenario = 1
}
public enum UserFrameFilterType
{
    None = 0,
    TitleMatch = 1,
    UpgradeMatch = 2,
    Etc = 3
}
public enum UserProfileType
{
    None = 0,
    Ark = 1,
    Event = 2,
    Raid = 3,
    Arena = 4,
    Museum = 5
}
public enum TabType
{
    None = 0,
    Normal = 1,
    Raid = 2,
    Arena = 3
}
public enum PassCategory
{
    PointAccumulate = 0,
    Mission = 1
}
public enum PassType
{
    Season = 0,
    Once = 1,
    Event = 2
}
public enum RewardType
{
    None = 0,
    User_exp = 1,
    Char_exp = 2,
    Currency = 3,
    Character = 4,
    Item = 5,
    Frame = 6,
    AttractivePoint = 7,
    Bgm = 8,
    Point = 9,
    LiveWallpaper = 10,
    Memorial = 11,
    CharacterCostume = 12,
    ItemRandom = 13,
    InfraCoreExp = 14,
    ItemRandomBox = 15,
    Equipment_None = 16,
    Equipment_MISSILIS = 17,
    Equipment_ELYSION = 18,
    Equipment_TETRA = 19,
    Equipment_PILGRIM = 20,
    Equipment_Random_01 = 21,
    Equipment_Random_02 = 22,
    Equipment_Random_03 = 23,
    PassPoint = 41,
    Equipment_ABNORMAL = 42,
    FavoriteItem = 43,
    ProfileCardObject = 44,
    ProfileRandomBox = 45,
    UserTitle = 46,
    LobbyDecoBackground = 47
}
public enum SpotKeyBoardInputTrigger
{
    None = 0,
    UseBurstSkillNum1 = 1,
    UseBurstSkillNum2 = 2,
    UseBurstSkillNum3 = 3,
    UseBurstSkillNum4 = 4,
    UseBurstSkillNum5 = 5,
    ChangeFocusCharacter1 = 6,
    ChangeFocusCharacter2 = 7,
    ChangeFocusCharacter3 = 8,
    ChangeFocusCharacter4 = 9,
    ChangeFocusCharacter5 = 10,
    ChangeAutoAim = 11,
    ChangeAutoSkill = 12,
    ChangeForceCover = 13
}
public enum SpootTutorialTextLocation
{
    None = 0,
    Top = 1,
    Middle = 2,
    Bottom = 3
}
public enum TutorialFunctionType
{
    None = 0,
    ChangeStep1BurstSkill = 1
}
public enum SpotTutorialCloseValue
{
    None = 0,
    BurstSkillTouch = 1,
    UseBurstSkill = 2,
    OnChangedFocusCharacter = 3,
    DragAim = 4,
    KillMonster = 5,
    TargetIncount = 6,
    AttackedPlayer = 7,
    UseMonsterSkill = 8,
    OnCoveredMode = 9,
    OffCoveredMode = 10,
    UseLockOn = 11
}
public enum SpotTutorialCloseType
{
    Touch = 0,
    Event = 1,
    Time = 2
}
public enum SpotTutorialTriggerValue
{
    None = 0,
    OnReloadStart = 1,
    TargetIncount = 2,
    TargetSpawn = 3,
    OnUseBurstSkill = 4,
    OnStep2BurstSkill = 5,
    OnStep3BurstSkill = 6,
    Zoom = 7,
    OnFullBurst = 8,
    KillMonster = 9,
    OnDestroyMonsterPart = 10,
    LaunchMonsterProjectile = 11,
    OnCancelUI = 12,
    OnBarrier = 13,
    AttackedPlayer = 14,
    MonsterSpawn = 15,
    UseBurstSkill = 16,
    OnChoiceSkillUI = 17
}
public enum SpotTutorialTriggerType
{
    None = 0,
    Time = 1,
    Event = 2
}
public enum HandlerType
{
    None = 0,
    MissionDaily = 1,
    MissionWeekly = 2,
    Achievement = 3,
    Jukebox = 4,
    SubQuest = 5,
    Ranking = 6
}
public enum Trigger
{
    None = 0,
    UserLevel = 1,
    CampaignClear = 2,
    ChapterClear = 3,
    CampaignStart = 4,
    TowerAllStart = 5,
    TowerBasicClear = 6,
    CharacterLevel = 7,
    CharacterGrade = 8,
    CharacterCore = 9,
    CharacterAttractiveLevel = 10,
    MainShopBuy = 11,
    ShopGuildBuy = 12,
    GachaCharacter = 13,
    OutpostBattleReward = 14,
    OutpostFastBattleReward = 15,
    PointRewardDaily = 16,
    PointRewardWeekly = 17,
    ObtainCharacter = 18,
    OutpostBuilding = 19,
    SendFriendShipPoint = 20,
    SendDispatch = 21,
    MainQuestClear = 22,
    ObtainJukeboxTheme = 23,
    SubQuestClear = 24,
    CampaignGroupClear = 25,
    NpcTalk = 26,
    TowerElysionClear = 27,
    TowerMissilisClear = 28,
    TowerTetraClear = 29,
    TowerOverspecClear = 30,
    AchieveRanking1st = 31,
    AchieveRanking5th = 32,
    AchieveRanking10th = 33,
    EventPoint = 34,
    HardChapterClear = 35,
    ObtainCharacterSSR = 36,
    GachaCompany = 37,
    ObtainCharacterNew = 38,
    WinArena = 39,
    SpecialArenaTier = 40,
    PointRewardAchievement = 41,
    ObtainCharacterPilgrim = 42,
    ShopDisassembleBuy = 43,
    CharacterCounsel = 44,
    CharacterAttractivePresent = 45,
    ObtainEquipItemT3T4 = 46,
    ObtainEquipItemT5T6 = 47,
    ObtainEquipItemT7T8 = 48,
    ObtainEquipItemT9 = 49,
    PointRewardEvent = 50,
    MissionClearEvent = 51,
    ObtainMemorialItem = 52,
    LostSectorClear = 53,
    ObtainHarmonyCube = 54,
    HarmonyCubeLevel = 55,
    CooperationEventClear = 56,
    SynchroDeviceSlot = 57,
    ObtainEquipItemALL = 58,
    EquipItemLevel = 59,
    CharacterSkillLevel = 60,
    PickupGachaCharacter = 61,
    ObtainSilverMileage = 62,
    ObtainGoldMileage = 63,
    SendDispatchGrade = 64,
    OutpostBattleBoxLevel = 65,
    GetFriendShipPoint = 66,
    MessageClear = 67,
    RecycleResearchLevel = 68,
    GachaPremium = 69,
    CharacterLevelUpCount = 70,
    CharacterGradeUpCount = 71,
    CharacterLevelMax = 72,
    CharacterGradeMax = 73,
    HarmonyCubeLevelMax = 74,
    CharacterSkillLevelMax = 75,
    CharacterAttractiveLevelMax = 76,
    EquipItemLevelMax = 77,
    ObtainEquipItemT2 = 78,
    FieldObjectCollection = 79,
    SimulationRoomStart = 80,
    InterceptStart = 81,
    EquipItemLevelCount = 82,
    SimulationRoomClear = 83,
    InterceptClear = 84,
    DailyEventClear = 85,
    EventStageClear = 86,
    ObtainEventCurrencyMaterialMiraclesnow = 87,
    EventDungeonStageClear = 88,
    EventSortOutClear = 89,
    EventSortOutPointMax = 90,
    EquipItemLevelUpCount = 91,
    CharacterSkillLevelUpCount = 92,
    FirstPaidGacha_Legecy = 93,
    ObtainCharacterCostume = 94,
    SyncroDeviceLevelMax = 95,
    ObtainEventCurrencyMaterial = 96,
    SimulationRoomClearWithoutCondition = 97,
    EventTextAdventureClear = 98,
    RookieArenaPlayCount = 99,
    EventDicePlayCount = 100,
    EventBBQTycoonDailyRewardCheck = 101,
    EventBBQTycoonHighScore = 102,
    ChampionArenaGambleWinAll = 103,
    ChampionArenaGambleLoseAll = 104,
    EventMiniGameCe002PlayCheck = 105,
    EventMiniGameNKSPlayCheck = 106,
    EventSnowfallOasisDailyRewardCheck = 107,
    EventMiniGameCe003RewardCheck = 108,
    EventTowerDefensePlayCheck = 109,
    EventPlaySodaPlayCheck = 110,
    EventIslandAdventureFishingPlayCheck = 111,
    MiniGameDDCompleteDive = 112,
    MiniGameDDCompleteSushi = 113,
    MiniGameDDTotalGold = 114,
    MiniGameDDSushiPreTurnover = 115,
    MiniGameDDTotalFish = 116,
    MiniGameDDPerUnderwaterEncounter = 117,
    MiniGameDDUnlockEmployeeCount = 118,
    MiniGameDDUnlockNikkeCount = 119,
    MiniGameDDGunLevel = 120,
    MiniGameDDIDiverLevel = 121,
    MiniGameDDUnlockSushiCount = 122,
    MiniGameDDSushiLevel = 123,
    MiniGameDDSushiCookScore = 124,
    MiniGameDDSushiPreTurnoverTotalMax = 125,
    MiniGameDDSushiLevelTotalMax = 126,
    MiniGameDDAllAchievement = 127,
    ComebackPollComplete = 128,
    AliceAccessAttractiveScenario = 129,
    AliceEquipCollectionItemLevel = 130,
    AliceEquipCollectionItemSR = 131,
    AliceEquipItemOverload = 132,
    AliceSkill1Level = 133,
    AliceSkillBurstLevel = 134,
    InterceptNormalClearWithCondition = 135,
    InterceptSpecialClearWithCondition = 136,
    SimulationRoomClearCount1Only = 137,
    TacticAcademyFinish9_4 = 138,
    EventMiniGameCe004RewardCheck = 139,
    EventMVGPlayCheck = 140,
    EventDDRRewardCheck = 141,
    EventPirateCafeRewardCheck = 142,
    BuyPackageListTid300109Check = 143,
    EventMiniGameCe005RewardCheck = 144,
    ObtainCharacter5118 = 145,
    ObtainCharacter5119 = 146,
    ObtainCharacter5120 = 147,
    ActiveComeBackUserEvent = 148,
    EnterEventList = 149,
    EnterEventArchive = 150,
    EnterSideStory = 151,
    EnterArcadeMenu = 152,
    EventEBMPlayCheck = 153,
    EventMiniGameCE006PlayCheck = 154,
    ObtainCharacter5094 = 155,
    ObtainCharacter5095 = 156,
    EventBFGCleanUpRewardCheck = 157,
    EventRopeRunningRewardCheck = 158,
    EventMiniGameCE007RewardCheck = 159
}
public enum MessengerMember
{
    None = 0,
    Nikke = 1,
    NPC = 2
}
public enum Squad
{
    None = 0,
    Counters = 1,
    Absolute = 2,
    Scouting = 3,
    InfinityRail = 4,
    External = 5,
    RecallRelease = 6,
    Matis = 7,
    CafeSweety = 8,
    Triangle = 9,
    Talentum = 10,
    LittleCannon = 11,
    Protocol = 12,
    Unlimited = 13,
    ACPU = 14,
    MightyTools = 15,
    MasterHand = 16,
    SiegePerilous = 17,
    Seraphim = 18,
    Wardress = 19,
    MaidForYou = 20,
    Exotic = 21,
    LifeTonic = 22,
    Pioneer = 23,
    Inherit = 24,
    TheClown = 25,
    _777 = 26,
    UnderworldQueen = 27,
    MMR = 28,
    Replace = 29,
    Humanity = 30,
    Company = 31,
    EventHero01 = 32,
    EventHero02 = 33,
    EventHero03 = 34,
    Archive = 35,
    Weissritter = 36,
    HeavyGram = 37,
    HappyZoo = 38,
    RealKindness = 39,
    Heretic = 40,
    A_F_F_ = 41,
    EnikkChild = 42,
    Aegis = 43,
    BotanicGarden = 44,
    PrimaDonna = 45,
    SchoolCircle = 46,
    Ce_01 = 47,
    Overseer = 48,
    Ce002_01 = 49,
    Ce002_02 = 50,
    Akademeia = 51,
    DazzlingPearl = 52,
    Goddess = 53,
    ElectricShock = 54,
    CE003 = 55,
    Rewind = 56,
    CE004 = 57,
    BestSeller = 58,
    OldTales = 59,
    CE005 = 60,
    CookingOil = 61,
    Incubator = 62,
    CE006_01 = 63,
    CE006_02 = 64,
    CE006_03 = 65,
    OverTheHorizon = 66,
    CE007 = 67
}
public enum MessengerRoom
{
    None = 0,
    Nikke = 1,
    Quest = 2,
    Group = 3
}
public enum SpotObjectRank
{
    Soft = 0,
    Medium = 1,
    Hard = 2
}
public enum TeamType
{
    None = 0,
    Default = 1,
    Profile = 2,
    ArenaDefense = 3,
    ArenaOffense = 4,
    TowerBase = 5,
    TowerElysion = 6,
    TowerMissilis = 7,
    TowerTetra = 8,
    TowerOverspec = 9,
    LostSector = 10,
    DummySquad = 11,
    SpecialArenaDefense = 12,
    SpecialArenaOffense = 13,
    ShootingRange = 14,
    InterceptNormal = 15,
    InterceptSpecial = 16,
    UnionRaid = 17,
    SimulationRoom = 18,
    ChampionArena = 19,
    StoryEvent = 20,
    ChallengeModeEvent = 21,
    SoloRaid = 22,
    EventArchive = 23,
    ShootingRangeFire = 24,
    ShootingRangeWind = 25,
    ShootingRangeIron = 26,
    ShootingRangeElectronic = 27,
    ShootingRangeWater = 28,
    SideStory = 29,
    InterceptAnomalous = 30,
    SoloRaidMuseum = 31
}
public enum CorporationTowerType
{
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    OVERSPEC = 4,
    ALL = 5
}
public enum ColType
{
    None = 0,
    Break = 1,
    Counter = 2,
    Choice = 3
}
public enum FunctionValueType
{
    None = 0,
    Integer = 1,
    Percent = 2,
    Id = 3
}
public enum StatType
{
    None = 0,
    Atk = 1,
    Hp = 2,
    Defence = 3,
    EnergyResist = 4,
    MetalResist = 5,
    BioResist = 6
}
public enum Condition_type
{
    None = 0,
    Character = 1,
    Costume = 2,
    FavoriteItem = 3
}
public enum Sub_type
{
    None = 0,
    Scenario = 1,
    Event = 2
}
public enum Livewallpaper_type
{
    None = 0,
    Scenario = 1,
    SkillCutScene = 2,
    Event = 3,
    FavoriteItem = 4
}
public enum InteractionObjectIsDestroyable
{
    None = 0,
    Soft = 1,
    Hard = 2
}
public enum FieldInteractionObjectState
{
    None = 0,
    Ignite = 1,
    Hacking = 2
}
public enum BalloonEndType
{
    None = 0,
    QuestEnd = 1,
    Talk = 2
}
public enum BalloonPlayType
{
    None = 0,
    Random = 1
}
public enum ScenarioPlayType
{
    None = 0,
    Ones = 1,
    Always = 2
}
public enum StageType
{
    None = 0,
    Main = 1,
    Sub = 2,
    Emergency = 3,
    EventQuest = 4,
    FavoriteItemQuest = 5
}
public enum ChapterMod
{
    Normal = 0,
    Hard = 1
}
[MemoryPackable]
public partial class OpenConditionData
{
    public ContentsOpenCondition OpenConditionType;
    public Int32 OpenConditionValue;
}

public enum ContentsOpenCondition
{
    None = 0,
    Preparing = 1,
    UserLevel = 2,
    StageClear = 3,
    MainQuest = 4,
    GuildLevel = 5,
    MaxGachaCount = 6,
    MaxGachaPremiumCount = 7,
    PlayTutorialGacha = 8,
    SimulationRoomClear = 9
}
public enum ContentsOpen
{
    None = 0,
    Tower = 1,
    Shop = 2,
    Collection = 3,
    Summon = 4,
    Outpost = 5,
    ArkSector = 6,
    LostSector = 7,
    Guild = 8,
    GuildShop = 9,
    ArenaShop = 10,
    Arena = 11,
    SpecialArena = 12,
    ChampionArena = 13,
    CompanyTower = 14,
    Ranking = 15,
    Album = 16,
    Chatting = 17,
    HarmonyCube = 18,
    TrainingRoom = 19,
    CustomizeGacha = 20,
    ContentsOpen_SynchroDevice = 21,
    ContentsOpen_RecycleRoom = 22,
    ContentsOpen_TacticAcademy = 23,
    Raid = 24,
    InterceptNormalLevel2 = 25,
    InterceptSpecial = 26,
    EmergencyQuest = 27,
    Lobby = 28,
    Mission = 29,
    Spot_BurstGauge = 30,
    Spot_BattleRetreat = 31,
    Spot_AutoControl = 32,
    Friend = 33,
    Mail = 34,
    Messenger = 35,
    Inventory = 36,
    SubMenu = 37,
    Nikke_LevelUp = 38,
    Nikke_GradeUp = 39,
    Nikke_Equip = 40,
    Nikke_Cube = 41,
    Event = 42,
    Spot_GoHome = 43,
    Nikke_SkillLevelUp = 44,
    Library_Costume = 45,
    MyLobby = 46,
    CompanyGacha = 47,
    FriendPointGacha = 48,
    Campaign_Hard = 49,
    OutpostBattle = 50,
    Lobby_OutpostBattle = 51,
    DispatchBoard = 52,
    SubQuest = 53,
    Summon_WishList = 54,
    Shortcut_Counseling = 55,
    Nikke = 56,
    PartySet = 57,
    Shortcut_StageDefeatBtn = 58,
    GachaPremium = 59,
    SimulationRoom = 60,
    UnionRaid = 61,
    InterceptNormalLevel1 = 62,
    CashShop = 63,
    AwakenEquipmentOptionRoll = 64,
    AwakenEquipmentOptionFix = 65,
    Liberate = 66,
    Liberate_Search = 67,
    Solo_Raid = 68,
    GachaPickup = 69,
    GachaCharge = 70,
    GachaStepup = 71,
    SimulationRoomOC = 72,
    SupportCharacter = 73,
    ArenaQuickBattle = 74,
    SpecialArenaQuickBattle = 75,
    SideStory = 76,
    FavoriteItem = 77,
    InterceptAnomalous = 78,
    ShopTrade = 79,
    Arcade = 80,
    SimulationRoomSimple = 81,
    CampaignQuickBattle = 82,
    SoloRaidMuseum = 83
}
public enum ContentsTutorialTextLocation
{
    None = 0,
    Top = 1,
    Middle = 2,
    Bottom = 3
}
public enum ContentsTutorialTriggerValue
{
    None = 0,
    EnterField = 1,
    DiscoverHiddenItem = 2,
    CloseRewardPopup = 3,
    FinishLobbyAnimation = 4,
    FinishGacha = 5,
    FinishPartySetAnimation = 6,
    EncounterMonster = 7,
    EncounterStageClear = 8,
    GetHiddenItem = 9,
    BackButtonTouch = 10,
    SummonButtonTouch = 11,
    GachaButtonTouch = 12,
    ConfirmButtonTouch = 13,
    PartySetTouch = 14,
    PartySetSlotTouch = 15,
    CharacterSelect = 16,
    CharacterSelectCancel = 17,
    TeamPresetTouch = 18,
    FinishEventStageAnimation = 19,
    EnterChapter1 = 20,
    EnterPartySetView = 21,
    ChangeTeamPreset = 22,
    FinishCharacterSelect = 23,
    FinishCharacterSelectCancel = 24,
    StartEventStageAnimation = 25,
    IntroPlayEvent = 26,
    EnterLostSecterStageView = 27,
    EnterCharacterAttractiveView = 28,
    EnterUnitView = 29,
    EnterCharacterDetailView = 30,
    EnterLevelUpPopup = 31,
    EnterCubeDetailView = 32,
    EnterDispatchBoardView = 33,
    EnterOutpost = 34,
    EnterOutpostBattlePopup = 35,
    EnterBuildingListPopup = 36,
    EnterTowerStageSelectView = 37,
    EnterSynchroDeviceView = 38,
    EnterRecycleRoomView = 39,
    EnterAcademyView = 40,
    UnlockWishList = 41,
    UnitButtonTouch = 42,
    LevelUpButtonTouch = 43,
    LevelUp = 44,
    CloseButtonTouch = 45,
    EasyEquipButtonTouch = 46,
    OutpostBattleShortCutTouch = 47,
    ReceiveRewardButtonTouch = 48,
    BuildingSlotTouch = 49,
    BuildingButtonTouch = 50,
    CompleteBuildingTouch = 51,
    OutpostButtonTouch = 52,
    SynchroDeviceTouch = 53,
    BuildingEnterButtonTouch = 54,
    ConstructionComplete = 55,
    EnterBuildingPopup = 56,
    EnterSummonView = 57,
    StartConstruction = 58,
    EnterAlertPopup = 59,
    EnterStageSelectView = 60,
    TouchBattleEntry = 61,
    EnterStageClearView = 62,
    EnterStructureLevelup = 63,
    WishListButtonTouch = 64,
    EnterWishListPopup = 65,
    StartLevelUpBuilding = 66,
    EnterMissionPopup = 67,
    TouchMainMissionTab = 68,
    TouchAllReceiveButton = 69,
    EnterWeakElementPopup = 70,
    EnterEffectiveRangePopup = 71,
    EnterLostSectorField = 72,
    TouchPartySetButton = 73,
    TouchAutoSettingButton = 74,
    TouchExplorationButton = 75,
    TouchSavePartySetButton = 76,
    EnterSimulationRoomTitleView = 77,
    TouchSimulationRoomLevelButton = 78,
    EnterSimulationRoomLevelPopup = 79,
    TouchSimulationRoomStartButton = 80,
    EnterSimulationRoomStageView = 81,
    TouchSimulationEventSlot = 82,
    TouchTemaPresetSlot = 83,
    TouchFastBattleButton = 84,
    EnterBuffSelectPopup = 85,
    TouchBuffSlot = 86,
    TouchConfirmButton = 87,
    TouchArkButton = 88,
    EnterArkView = 89,
    TouchSimulationRoomButton = 90,
    TouchLostSectorButton = 91,
    EnterLostSectorMainView = 92,
    TouchLostSectorStageButton = 93,
    EnterLostSectorStagePopup = 94,
    TouchLostSectorExplorationButton = 95,
    OpenLostSectorHud = 96,
    EnterLostSectorPartySetView = 97,
    EnterSimulationRoomPartySetView = 98,
    EquipSlotTouch = 99,
    EnterEquipInfoPopup = 100,
    EquipLevelupButtonTouch = 101,
    EnterEquipLevelupPopup = 102,
    AutoSelectButtonTouch = 103,
    EquipExpLevelupButtonTouch = 104,
    SynchroDeviceShortCutButtonTouch = 105,
    EnterFieldStart = 106,
    EnterSimulationRoomResultPopup = 107,
    TouchResultPopupConfirmButton = 108,
    TouchLobbyButton = 109,
    TouchAutoSetButton = 110,
    TouchSquadSetSaveButton = 111,
    EnterSkillInfoPopup = 112,
    TouchSkillLevelUpButton = 113,
    EnterSkillLevelUpPopup = 114,
    EnterChapter1FieldStart = 115,
    EnterArenaSelectView = 116,
    TouchRookieArenaButton = 117,
    EnterRookieArenaView = 118,
    TouchArenaSquadSettingButton = 119,
    EnterRookieArenaSquadSettingView = 120,
    TouchDefensePartySetButton = 121,
    TouchSpecialArenaButton = 122,
    EnterSpecialArenaView = 123,
    CommonDialogOpen = 124,
    EnterCooperationEventView = 125,
    AchievementCharacterHurdleLevel = 126,
    AchievementSynchroHurdleLevel = 127,
    LobbyButtonTouch = 128,
    TouchArkMarkerButton = 129,
    TouchGiveUpButton = 130,
    TouchLobbyStartButton = 131,
    TouchCommanderCenterShortCutButton = 132,
    TouchMissionPopupCloseButton = 133,
    ScenarioEnd = 134,
    TouchBuffLegacySlot = 135,
    TouchBuffLegacyConfirmButton = 136,
    CloseContentsOpenPopup = 137,
    TouchSimulationOverClockModeBtn = 138,
    FinishSimulationOverClockModeAnimation = 139,
    EnterSimulationOverClockModeOptionPopup = 140,
    SelectOverClockOption = 141,
    EnterSoloRaidMainView = 142,
    TouchArchiveCategoryBtn = 143,
    OnHintRing = 144,
    EnterCampaignPartySetView = 145,
    EnterCollectionView = 146,
    EnterCollectionSelectPopup = 147,
    EnterCollectionInfoView = 148,
    EnterCollectionManagementUI = 149,
    EnterCollectionCombinePopup = 150,
    EnterCollectionChangeView = 151,
    ScenarioStart = 152,
    TouchSimulationRoomButtonNoEntry = 153,
    FinishContentsOpenAnimation = 154,
    EnterChapter6FieldStart = 155,
    EnterChapter6 = 156,
    EnterCampaignStageSelectView = 157,
    TouchOutpostBattlePopupCloseButton = 158,
    AutoPositionButtonTouch = 159,
    AutoUpgradeButtonTouch = 160,
    HomeButtonTouch = 161
}
public enum ContentsTutorialSubGroup
{
    None = 0,
    Attractive = 1,
    Cube = 2,
    OutpostHUD = 3,
    OutpostBattle = 4,
    Dispatch = 5,
    SynchroDevice = 6,
    RecycleRoom = 7,
    Academy = 8,
    Tower = 9,
    CooperationEvent = 10,
    Nikke = 11,
    SynchroDeviceLimitLevel = 12,
    OverClock = 13,
    Archive = 14,
    SoloRaid = 15
}
[MemoryPackable]
public partial class RewardEntry
{
    public Int32 RewardPercent;
    public PercentDisplayType PercentDisplayType;
    public RewardType RewardType;
    public Int32 RewardId;
    public Int32 RewardValue;
}

public enum ScenarioType
{
    None = 0,
    FieldTalk = 1,
    Dialog = 2,
    Balloon = 3
}
public enum Category
{
    Campaign_View = 0,
    Outpost_View = 1,
    Ark_View = 2,
    Lobby_Enter = 3,
    Campaign_Enter = 4,
    Outpost_Building_Enter = 5,
    Ark_Marker = 6,
    Campaign_Clear = 7,
    Outpost_Select = 8,
    Tribe_Tower_Clear = 9,
    Tribe_Tower_Enter = 10,
    Tribe_Tower_View = 11,
    Run_Gacha = 12,
    Npc_Talk = 13,
    FieldObject_Collection = 14,
    End = 15,
    LostSector_View = 16,
    LostSector_Clear = 17,
    SimulationRoom_View = 18,
    EventQuest_Stage_Enter = 19,
    EventQuest_Stage_Clear = 20,
    EventQuest_Stage_Group_Clear = 21,
    EventQuest_Popup_Enter = 22,
    Normal_Chapter_View = 23,
    Field_Interaction_Action_Trigger = 24,
    FavoriteItemQuest_Stage_Enter = 25,
    FavoriteItemQuest_Stage_Clear = 26,
    FavoriteItemQuest_Stage_Group_Clear = 27,
    SimulationRoom_Select = 28
}
public enum CameraFocusType
{
    None = 0,
    Squard1 = 1,
    Squard2 = 2,
    Squard3 = 3,
    Squard4 = 4,
    Squard5 = 5,
    Target = 6
}
public enum PortraitPositionType
{
    Left = 0,
    Right = 1
}
public enum DialogPositionType
{
    Top = 0,
    Middle = 1,
    Bottom = 2
}
public enum ScenarioFadeType
{
    None = 0,
    Black = 1,
    White = 2,
    Black_without_dialogue = 3,
    White_without_dialogue = 4
}
public enum FilterType
{
    None = 0,
    Red = 1,
    Grey = 2,
    Black = 3,
    Blur_High = 4,
    Blur_Middle = 5,
    Blur_Low = 6,
    Vignetting = 7
}
[MemoryPackable]
public partial class ScenarioEffectData
{
    public String? PlayEffectId;
    public String? StopEffectId;
    public String? SetEffectPosition;
    public Boolean IsEffectMovable;
}

[MemoryPackable]
public partial class ScenarioCharacterData
{
    public String? ShowCharId;
    public String? HideCharId;
    public String? SetCharPosition;
    public String? SetCharAnim;
}

