// This file was automatically generated by a tool. Please do not modify.
namespace EpinelPS.Data;
using MemoryPack;
[MemoryPackable]
public partial class ScenarioDialogRecord
{
    public string? Id;
    public string? GroupId;
    public string? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public string? Highlight;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public bool PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public string? SetBackground;
    public string? SetLight;
    public string? ConversationId;
    public string? SetImage;
    public string? SetObject;
    public string? SetObjectPosition;
    public string? SetStartCamera;
    public string? SetEndCamera;
    public double SetCameraDuration;
    public string? PlayMovie;
    public string? PlaySound;
    public string? PlayAmbient;
    public int AmbientVolume;
    public string? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public string? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public string? JumpTarget;
    public ScenarioFadeType Fade;
    public bool IsExitScenario;
}

[MemoryPackable]
public partial class AttractiveScenarioDialogRecord
{
    public string? Id;
    public string? GroupId;
    public string? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public string? Highlight;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public bool PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public string? SetBackground;
    public string? SetLight;
    public string? ConversationId;
    public string? SetImage;
    public string? SetObject;
    public string? SetObjectPosition;
    public string? SetStartCamera;
    public string? SetEndCamera;
    public double SetCameraDuration;
    public string? PlaySound;
    public string? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public string? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public string? JumpTarget;
    public ScenarioFadeType Fade;
    public bool IsExitScenario;
}

[MemoryPackable]
public partial class AttractiveCounselDialogRecord
{
    public string? Id;
    public string? GroupId;
    public string? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public int AttractivePoint;
    public string? Highlight;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public bool PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public string? SetBackground;
    public string? SetLight;
    public string? ConversationId;
    public string? SetImage;
    public string? SetObject;
    public string? SetObjectPosition;
    public string? SetStartCamera;
    public string? SetEndCamera;
    public double SetCameraDuration;
    public string? PlaySound;
    public string? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public string? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public string? JumpTarget;
}

[MemoryPackable]
public partial class EventScenarioDialogRecord
{
    public string? Id;
    public int EventId;
    public string? GroupId;
    public string? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public string? Highlight;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public bool PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public string? SetBackground;
    public string? SetLight;
    public string? ConversationId;
    public string? SetImage;
    public string? SetObject;
    public string? SetObjectPosition;
    public string? SetStartCamera;
    public string? SetEndCamera;
    public double SetCameraDuration;
    public string? PlayMovie;
    public string? PlaySound;
    public string? PlayAmbient;
    public int AmbientVolume;
    public string? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public string? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public string? JumpTarget;
    public ScenarioFadeType Fade;
    public bool IsExitScenario;
}

[MemoryPackable]
public partial class SideStorySpotDialogRecord
{
    public string? Id;
    public string? GroupId;
    public string? PortraitId;
    public string? NameLocalkey;
    public string? ScenarioLocalkey;
    public string? PlayVoice;
    public DialogPositionType SetDialogPosition;
    public PortraitPositionType SetPortraitPosition;
    public CameraFocusType SetCameraFocus;
    public string? SetCameraShake;
}

[MemoryPackable]
public partial class SideStoryScenarioDialogRecord
{
    public string? Id;
    public string? GroupId;
    public string? TitleLocalkey;
    public SpeechWindowType SpeechWindow;
    public string? Highlight;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public bool PlayLipSync;
    public List<ScenarioCharacterData>? Characters;
    public string? SetBackground;
    public string? SetLight;
    public string? ConversationId;
    public string? SetImage;
    public string? SetObject;
    public string? SetObjectPosition;
    public string? SetStartCamera;
    public string? SetEndCamera;
    public double SetCameraDuration;
    public string? PlayMovie;
    public string? PlaySound;
    public string? PlayAmbient;
    public int AmbientVolume;
    public string? PlayBgm;
    public List<ScenarioEffectData>? Effects;
    public string? SetCameraShake;
    public FilterType SetFilter01;
    public FilterType SetFilter02;
    public string? JumpTarget;
    public ScenarioFadeType Fade;
    public bool IsExitScenario;
}

[MemoryPackable]
public partial class MainQuestRecord
{
    public int Id;
    public int GroupId;
    public Category Category;
    public int ConditionId;
    public string? ConditionUiLocalkey;
    public string? ShortcutType;
    public int ShortcutValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int NextMainQuestId;
    public int RewardId;
    public ScenarioType ScenarioType;
    public string? EpisodeId;
    public int TargetChapterId;
    public string? HeaderBgResourceId;
}

[MemoryPackable]
public partial class RewardRecord
{
    public int Id;
    public int UserExp;
    public int CharacterExp;
    public List<Reward_Data>? Rewards;
}

[MemoryPackable]
public partial class ConfigBattleRecord
{
    public string? Id;
    public string? Value;
}

[MemoryPackable]
public partial class MailSenderRecord
{
    public int Id;
    public string? NameLocaltable;
    public string? NameLocalkey;
    public int ResourceId;
}

[MemoryPackable]
public partial class LanguageRecord
{
    public string? Key;
    public int Order;
    public string? NameLocalkey;
}

[MemoryPackable]
public partial class ContentsTutorialRecord
{
    public int Id;
    public int VersionGroup;
    public int GroupId;
    public ContentsTutorialSubGroup SubGroupId;
    public bool IsShow;
    public int ClearedStageId;
    public int CloseStageId;
    public ContentsTutorialTriggerValue TriggerValue;
    public string? TriggerValueExtraKey;
    public ContentsTutorialTriggerValue CloseValue;
    public string? CloseValueExtraKey;
    public string? CharResourceId;
    public string? TitleTextLocale;
    public string? TextLocale;
    public ContentsTutorialTextLocation TextLocation;
    public int Background;
    public List<string>? AddonResource;
    public bool FieldMovingRouteControl;
    public List<string>? MarkHiddenItemId;
    public string? HiddenItemMarkResource;
    public bool UnmaskControl;
    public List<string>? UnmaskKeyList;
    public string? UnmaskTextLocale;
    public bool UnmaskInputControl;
    public int NextId;
    public bool SaveTutorial;
    public int ReconnectionTutorialId;
    public ContentsTutorialTriggerValue ReconnectionTriggerValue;
    public bool SkipButtonControl;
}

[MemoryPackable]
public partial class ContentsOpenRecord
{
    public ContentsOpen Id;
    public ContentsOpenCondition ViewConditionType;
    public int ViewConditionValue;
    public List<OpenConditionData>? OpenCondition;
    public string? ConditionLocalkey;
    public bool EnableUnlockPlayPopup;
    public bool EnableUnlockPlayButton;
}

[MemoryPackable]
public partial class NpcRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? NpcPrefab;
    public int InteractionDistance;
    public ChapterMod ChapterMod;
    public int ShortCut;
    public StageType QuestType;
    public int InteractionQuestId;
    public int ShowConditionQuestId;
    public int HideConditionQuestId;
    public ScenarioType ScenarioType;
    public string? ScenarioId;
    public ScenarioPlayType ScenarioPlayType;
    public ScenarioType FixedScenarioType;
    public string? FixedScenarioId;
    public string? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public int BalloonAlwaysCycle;
    public BalloonEndType BalloonAlwaysEndCondition;
}

[MemoryPackable]
public partial class InteractionObjectRecord
{
    public int Id;
    public string? InteractionobjectPrefab;
    public int InteractionDistance;
    public FieldInteractionObjectState ChangeState;
    public bool IsPassable;
    public bool IsUseTrigger;
    public int MemberCount;
    public InteractionObjectIsDestroyable IsDestroyable;
    public bool IsPickupable;
    public bool IsExplosive;
    public int ExplosiveRange;
    public int ExplosiveDelay;
    public bool IsHackable;
    public bool IsHackingOnLoad;
    public int HackedTime;
    public bool IsHackingTrigger;
    public bool IsRespawnObject;
    public int RespawnTime;
}

[MemoryPackable]
public partial class QuestObjectRecord
{
    public int Id;
    public string? QuestobjectPrefab;
    public int InteractionDistance;
    public float InteractionTime;
    public ChapterMod ChapterMod;
    public int ShortCut;
    public StageType QuestType;
    public int InteractionQuestId;
    public int ShowConditionQuestId;
}

[MemoryPackable]
public partial class LiveWallpaperRecord
{
    public int Id;
    public Livewallpaper_type LivewallpaperType;
    public Sub_type SubType;
    public int Order;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? LiveWallpaperResourceId;
    public string? ThumbnailResourceId;
    public string? SiResourceId;
    public string? BgmResourceId;
    public bool IsSecret;
    public Condition_type ConditionType;
    public int ConditionResourceId;
    public int ConditionId;
}

[MemoryPackable]
public partial class BaseDefenseRecord
{
    public string? PresetName;
    public int UserGainPoint;
    public int EnemyGainPointStep1;
    public int EnemyGainPointStep2;
    public int ThrashPoint;
    public int MinionPoint;
    public int ElitePoint;
    public int CenturionPoint;
}

[MemoryPackable]
public partial class ShakeDataRecord
{
    public int Id;
    public float Duration;
    public int FrequencyX;
    public float AmplitudeX;
    public int FrequencyY;
    public float AmplitudeY;
    public int FrequencyZ;
    public float AmplitudeZ;
    public int RenewalPercent;
    public float SizeCorrectionMedium;
    public float SizeCorrectionLarge;
    public float SizeCorrectionHuge;
}

[MemoryPackable]
public partial class LoadingTipRecord
{
    public int Id;
    public int Group;
    public string? Tip;
}

[MemoryPackable]
public partial class BuffRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public StatType StatType;
    public FunctionValueType FunctionValueType;
    public int StatValue;
    public string? BuffIcon;
}

[MemoryPackable]
public partial class StageStatIncreaseRecord
{
    public int Id;
    public int GroupId;
    public int BattlePowerRatioMin;
    public int BattlePowerRatioMax;
    public int StatIncrease;
    public string? Textcolor;
}

[MemoryPackable]
public partial class QTEColPresetTableRecord
{
    public int Id;
    public int GroupId;
    public int ColIndex;
    public int TimeLimit;
    public ColType ColType;
    public int Order;
    public List<int>? Chain;
    public int DelayTime;
    public bool FirstCol;
    public List<double>? ColPosition;
    public int HpRatio;
    public int DefRatio;
}

[MemoryPackable]
public partial class QuickTimeEventRecord
{
    public int Id;
    public List<long>? MonsterId;
    public string? QtePrefab;
    public List<int>? GroupId;
    public bool RandomPreset;
    public int TimeLimit;
    public int FirstColAnimTime;
    public int ElementId;
}

[MemoryPackable]
public partial class TransformationRecord
{
    public int Id;
    public int ResourceId;
    public int NumberOfStep;
}

[MemoryPackable]
public partial class TowerInfoRecord
{
    public CorporationTowerType Id;
    public string? Name;
    public string? NameEnglish;
    public int Order;
    public TeamType TeamType;
    public List<int>? DayOfWeek;
    public int ClearLimit;
    public string? CoreResource;
    public string? CorpIcon;
}

[MemoryPackable]
public partial class MonsterStatEnhanceRecord
{
    public int Id;
    public int GroupId;
    public int Lv;
    public long LevelHp;
    public int LevelAttack;
    public int LevelDefence;
    public int LevelStatdamageratio;
    public int LevelEnergyResist;
    public int LevelMetalResist;
    public int LevelBioResist;
    public int LevelProjectileHp;
    public long LevelBrokenHp;
}

[MemoryPackable]
public partial class ObjectStatEnhanceRecord
{
    public int Id;
    public SpotObjectRank Grade;
    public int Lv;
    public long LevelHp;
    public int LevelDefence;
}

[MemoryPackable]
public partial class CoverStatEnhanceRecord
{
    public int Id;
    public int Lv;
    public long LevelHp;
    public int LevelDefence;
}

[MemoryPackable]
public partial class GuildEmblemRecord
{
    public int Id;
    public int Grade;
    public int ResourceId;
}

[MemoryPackable]
public partial class MessengerRoomRecord
{
    public string? Id;
    public MessengerRoom Type;
    public Squad UnlockConditionSquad;
    public int UnlockConditionCharacter;
    public string? NameLocale;
    public string? ThumbnailImage;
    public List<string>? Members;
}

[MemoryPackable]
public partial class MessengerMemberRecord
{
    public string? Id;
    public MessengerMember Type;
    public string? NameLocale;
    public string? StatusMessageLocale;
    public string? ProfileImage;
    public string? BackgroundImage;
}

[MemoryPackable]
public partial class TriggerRecord
{
    public int Id;
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
    public int BeforeTriggerId;
    public HandlerType HandlerType;
    public bool PrintValue;
    public string? ShortcutType;
    public int ShortcutValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int PointValue;
    public int RewardId;
}

[MemoryPackable]
public partial class JukeboxThemeRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int Order;
    public string? ThemeResource;
    public string? BgColor;
}

[MemoryPackable]
public partial class SpotTutorialRecord
{
    public int Id;
    public int WaveNum;
    public bool SpotTimeControl;
    public bool NoinputControl;
    public SpotTutorialTriggerType TriggerType;
    public int TriggerTimeValue;
    public SpotTutorialTriggerValue TriggerEnumValue;
    public long TriggerEnumValueId;
    public SpotTutorialCloseType CloseType;
    public int CloseTimeValue;
    public SpotTutorialCloseValue CloseValue;
    public TutorialFunctionType TutorialFunctionType;
    public string? CharResourceId;
    public string? TitleTextLocale;
    public string? TextLocale;
    public SpootTutorialTextLocation TextLocation;
    public int Background;
    public string? AddonResource;
    public List<string>? UnmaskKeyList;
    public List<string>? UnmaskKeyListNoinput;
    public long MarkMonsterId;
    public string? MonsterMarkResource;
    public string? EffectList;
    public bool SkipButtonControl;
    public SpotKeyBoardInputTrigger KeyBoardInputTrigger;
    public int NextId;
}

[MemoryPackable]
public partial class FieldTutorialRecord
{
    public int Id;
    public int ClearedStageId;
    public int CloseStageId;
    public string? CharResourceId;
    public string? TitleTextLocale;
    public string? TextLocale;
    public int Background;
    public List<string>? AddonResource;
    public bool FieldMovingRouteControl;
    public List<string>? MarkHiddenItemId;
    public string? HiddenItemMarkResource;
    public bool UnmaskControl;
    public List<string>? UnmaskKeyList;
    public bool UnmaskInputControl;
    public int NextId;
    public int ReconnectionTutorialId;
}

[MemoryPackable]
public partial class AutoChargeRecord
{
    public int Id;
    public RewardType ItemType;
    public int ItemId;
    public int AutoChargePlus;
    public int AutoChargeMax;
}

[MemoryPackable]
public partial class ItemExchangeRecord
{
    public int Id;
    public RewardType FrequencyItemType;
    public int FrequencyItemId;
    public int FrequencyItemCount;
    public RewardType ExchangeItemType;
    public int ExchangeItemId;
    public int ExchangeItemCount;
    public string? MailKey;
}

[MemoryPackable]
public partial class PassManagerRecord
{
    public int Id;
    public PassType PassType;
    public int EventId;
    public PassCategory PassCategory;
    public int PassPointId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public DateTime SeasonStartDate;
    public DateTime SeasonEndDate;
    public int NextSeasonId;
    public int MidasProductId;
    public int InfracorePoint;
    public string? PassPremiumNameLocalkey;
    public string? PassPremiumDescriptionLocalkey;
    public int RankSkipId;
    public string? PassLogoResourceId;
    public string? PassLobbyButtonResourceId;
    public int ShopNpcResourceId;
    public int NpcCostumeId;
}

[MemoryPackable]
public partial class LobbyPrivateBannerRecord
{
    public int Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public string? PrivateBannerResource;
    public int PrivateBannerOrder;
    public int PrivateBannerShowDuration;
    public int EventId;
}

[MemoryPackable]
public partial class UserExpRecord
{
    public int Level;
    public int Exp;
    public int RewardId;
}

[MemoryPackable]
public partial class UserFrameRecord
{
    public int Id;
    public string? ResourceId;
    public string? SubResourceId;
    public TabType TabType;
    public UserProfileType UserProfileType;
    public UserFrameFilterType FilterType;
    public int Order;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public bool IsSubResourcePrism;
}

[MemoryPackable]
public partial class ScenarioRewardsRecord
{
    public int Id;
    public Condition ConditionType;
    public string? ConditionId;
    public int RewardId;
}

[MemoryPackable]
public partial class ContentsFirstScenarioRecord
{
    public int Id;
    public string? ViewType;
    public int ViewValue;
    public string? EnterScenario;
}

[MemoryPackable]
public partial class MonsterSkillRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? SkillIcon;
    public SkillAniNumberType SkillAniNumber;
    public WeaponType WeaponType;
    public AttackType AttackType;
    public FireType FireType;
    public int ShotCount;
    public ShotTimingType ShotTiming;
    public int Penetration;
    public int ProjectileSpeed;
    public int ProjectileHpRatio;
    public int ProjectileDefRatio;
    public int ProjectileRadiusObject;
    public int ProjectileRadius;
    public int SpotExplosionRange;
    public bool IsDestroyableProjectile;
    public bool RelateAnim;
    public int DecelerationRate;
    public int CastingTime;
    public List<string>? BreakObject;
    public int BreakObjectHpRaito;
    public List<string>? MoveObject;
    public int DelayTime;
    public MonsterSkillValueType SkillValueType01;
    public long SkillValue01;
    public MonsterSkillValueType SkillValueType02;
    public long SkillValue02;
    public int TargetCharacterRatio;
    public int TargetCoverRatio;
    public int TargetNothingRatio;
    public WeaponObjectEnum WeaponObjectEnum;
    public int CallingGroupId;
    public PreferTargetType PreferTarget;
    public bool ShowLockOn;
    public int TargetCount;
    public List<string>? ObjectResource;
    public ObjectPositionType ObjectPositionType;
    public List<double>? ObjectPosition;
    public bool IsUsingTimeline;
    public int ControlGauge;
    public List<PartsType>? ControlParts;
    public CancelType CancelType;
    public PartsType LinkedParts;
}

[MemoryPackable]
public partial class ItemConsumeRecord
{
    public int Id;
    public UseCondition UseConditionType;
    public int UseConditionValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public ItemUseType UseType;
    public int UseId;
    public PercentDisplayType PercentDisplayType;
    public int UseValue;
    public int UseFragCost;
    public bool UseLimitCount;
    public int UseLimitCountValue;
    public int StackMax;
}

[MemoryPackable]
public partial class ItemHarmonyCubeRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int LocationId;
    public string? LocationLocalkey;
    public int Order;
    public int ResourceId;
    public string? Bg;
    public string? BgColor;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public CharacterClassType Class;
    public int LevelEnhanceId;
    public List<HarmonyCubeSkillGroupData>? HarmonycubeSkillGroup;
}

[MemoryPackable]
public partial class ItemHarmonyCubeLevelRecord
{
    public int Id;
    public int LevelEnhanceId;
    public int Level;
    public List<SkillLevelData>? SkillLevels;
    public int MaterialId;
    public int MaterialValue;
    public int GoldValue;
    public int Slot;
    public List<HarmonyCubeStatData>? HarmonycubeStats;
}

[MemoryPackable]
public partial class BundleBoxRecord
{
    public int Id;
    public int UserExp;
    public int CharacterExp;
    public bool IsMail;
    public List<Reward_Data>? Rewards;
}

[MemoryPackable]
public partial class CashShopRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
    public int ProductOrder;
    public int ProductDisplayStep;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
    public CashShopProductType ProductType;
    public int ProductId;
    public int ProductValue;
    public int MidasProductId;
    public int InfracorePoint;
    public bool IsActive;
}

[MemoryPackable]
public partial class CostumeShopRecord
{
    public int Id;
    public int ShopGroupId;
    public int PackageGroupId;
    public DateTime StartDate;
    public DateTime EndDate;
    public CostumePriceType DiscountControl;
    public int CostumeThemeGroupId;
    public int ProductGrade;
    public int CostumeId;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
    public int MidasProductId;
    public bool IsActive;
}

[MemoryPackable]
public partial class MonthlyAmountRecord
{
    public int Id;
    public int OrderGroupId;
    public int ProductEfficiency;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? DailyRewardInfo;
    public string? ProductResourceId;
    public int BuyPackageGroupId;
    public int DailyPackageGroupId;
    public int Period;
    public int PeriodWarningNoticeDay;
    public int InfracorePoint;
    public int MidasProductId;
}

[MemoryPackable]
public partial class CampaignPackageShopRecord
{
    public int Id;
    public int OrderGroupId;
    public int PackageOrder;
    public int PackageGroupId;
    public int ProductEfficiency;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
    public int InfracorePoint;
    public int MidasProductId;
    public string? ShopDescriptionLocalkey01;
    public string? ShopDescriptionLocalkey02;
}

[MemoryPackable]
public partial class CharacterCostumeThemeRecord
{
    public int Id;
    public string? CostumeThemeNameLocale;
    public string? CostumeThemeDescriptionLocale;
}

[MemoryPackable]
public partial class CharacterStatEnhanceRecord
{
    public int Id;
    public int GradeRatio;
    public long GradeHp;
    public int GradeAttack;
    public int GradeDefence;
    public int GradeEnergyResist;
    public int GradeMetalResist;
    public int GradeBioResist;
    public long CoreHp;
    public int CoreAttack;
    public int CoreDefence;
    public int CoreEnergyResist;
    public int CoreMetalResist;
    public int CoreBioResist;
}

[MemoryPackable]
public partial class CharacterShotRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? CameraWork;
    public WeaponType WeaponType;
    public FireType FireType;
    public AttackType AttackType;
    public CounterEnermy CounterEnermy;
    public InputType InputType;
    public bool IsTargeting;
    public PreferTargetType PreferTarget;
    public PreferTargetconditionType PreferTargetCondition;
    public int Damage;
    public int ShotCount;
    public int MuzzleCount;
    public int MultiTargetCount;
    public int CenterShotCount;
    public ShotTimingType ShotTiming;
    public int MaxAmmo;
    public int MaintainFireStance;
    public int UptypeFireTiming;
    public int ReloadTime;
    public int ReloadBullet;
    public int ReloadStartAmmo;
    public int RateOfFireResetTime;
    public int RateOfFire;
    public int EndRateOfFire;
    public int RateOfFireChangePershot;
    public int BurstEnergyPershot;
    public int TargetBurstEnergyPershot;
    public int Penetration;
    public int SpotFirstDelay;
    public int SpotLastDelay;
    public int StartAccuracyCircleScale;
    public int EndAccuracyCircleScale;
    public int AccuracyChangePershot;
    public int AccuracyChangeSpeed;
    public int AutoStartAccuracyCircleScale;
    public int AutoEndAccuracyCircleScale;
    public int AutoAccuracyChangePershot;
    public int AutoAccuracyChangeSpeed;
    public int ZoomRate;
    public int MultiAimRange;
    public int SpotProjectileSpeed;
    public int ChargeTime;
    public int FullChargeDamage;
    public int FullChargeBurstEnergy;
    public int SpotRadiusObject;
    public int SpotRadius;
    public int SpotExplosionRange;
    public string? HomingScript;
    public int CoreDamageRate;
    public List<int>? UseFunctionIdList;
    public List<int>? HurtFunctionIdList;
    public int ShakeId;
    public CameraShakeType ShakeType;
    public int ShakeWeight;
    public string? AimPrefab;
}

[MemoryPackable]
public partial class GachaGradeProbRecord
{
    public int Id;
    public int GroupId;
    public OriginalRareType Rare;
    public int Prob;
    public int ProbMaxCount;
    public int GachaListId;
    public int CustomizeListId;
}

[MemoryPackable]
public partial class MultiRaidRecord
{
    public int Id;
    public string? Name;
    public int PlayerCount;
    public int CharacterSelectTimeLimit;
    public int CharacterLv;
    public int StageLevel;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public int MonsterStageLvChangeGroup;
    public int SpotId;
    public int MonsterStageLvChangeGroupEasy;
    public int SpotIdEasy;
    public int ConditionRewardGroup;
    public int RewardLimitCount;
    public int RankConditionRewardGroup;
}

[MemoryPackable]
public partial class InterceptSpecialRecord
{
    public int Id;
    public int Group;
    public string? Name;
    public string? ShortName;
    public string? Description;
    public string? Thumbnail;
    public string? MonsterSpine;
    public int MonsterSpineScale;
    public int Order;
    public int CharacterLv;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public int MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public int SpotId;
    public int DummySpotId;
    public int AutoChargeId;
    public int TicketCount;
    public int ConditionRewardGroup;
    public int PercentConditionRewardGroup;
    public bool UseRewardPriority;
    public int PriorityGrade;
    public bool UseFixedResult;
    public int FixedDamage;
    public int ResultCharacterResourceId;
}

[MemoryPackable]
public partial class ArenaRewardRecord
{
    public int MinRank;
    public int MaxRank;
    public int DailyRewardId;
    public int SeasonRewardId;
    public int WinRewardValue;
}

[MemoryPackable]
public partial class ArenaRecord
{
    public int Id;
    public ArenaType ArenaType;
    public string? Name;
    public int Order;
    public string? Thumbnail;
    public int FreePlayCount;
    public int TicketId;
    public int TicketValue;
    public int TicketBuyCurrencyType;
    public int TicketBuyCurrencyValue;
    public int RecordMaxCount;
    public int Round;
    public int TimeLimit;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
    public int ConditionRewardGroup;
    public int VerificationTimeServer;
    public int VerificationTimeClient;
}

[MemoryPackable]
public partial class ArenaChampionRecord
{
    public int Id;
    public int CharacterLv;
    public int BettingRewardId;
    public string? BettingRewardMailKey;
    public int TeamCount;
}

[MemoryPackable]
public partial class FieldTalkRecord
{
    public string? Id;
    public string? FieldPosition;
    public string? Position1;
    public string? Position2;
    public string? Position3;
    public string? Position4;
    public string? Position5;
    public string? Position6;
    public string? FieldTalkDialogGroupId;
}

[MemoryPackable]
public partial class AssistSquadRecord
{
    public int Id;
    public string? NameLocalkey;
    public AssistSquadType AssistsquadType;
    public int AssistsquadDistance;
    public int AssistsquadMembercount;
    public string? AssistsquadPrefab;
    public AssistSquadMoveType AssistsquadMovetype;
    public AssistSquadControlType AssistsquadControltype;
    public int AssistsquadSpeedRatio;
    public int MarkerPosition;
}

[MemoryPackable]
public partial class OutpostBuildingSlotRecord
{
    public int Id;
    public List<BuildingCategory>? BanBuildingCategory;
}

[MemoryPackable]
public partial class OutpostBattleRecord
{
    public int Id;
    public int BattleBoxLevel;
    public int MainStageClearCount;
    public int RewardId;
    public int Credit;
    public int TimeCredit;
    public int CharacterExp1;
    public int TimeCharexp1;
    public int UserExp;
    public int TimeUserExp;
    public int CharacterExp2;
    public int TimeCharexp2;
    public List<OutpostBattle_Data>? OutpostRewardList;
}

[MemoryPackable]
public partial class OutpostBattleBoxSettingRecord
{
    public int Id;
    public int RewardStepTime;
    public string? BuildingResourceId;
}

[MemoryPackable]
public partial class TacticAcademyFunctionRecord
{
    public int Id;
    public int GroupId;
    public string? NameLocalkey;
    public string? FunctionLocalkey;
    public LessonType LessonType;
    public List<LessonRewardData>? LessonReward;
    public int CharacterConditionValue1;
    public int CharacterConditionValue2;
    public int CharacterConditionValue3;
    public List<LessonConditionData>? LessonCondition;
    public int CurrencyId;
    public int CurrencyValue;
}

[MemoryPackable]
public partial class TacticAcademyClassRecord
{
    public int Id;
    public string? NameLocalkey;
}

[MemoryPackable]
public partial class LiberateTypeRecord
{
    public int Id;
    public string? Name;
    public TypeOpenCondition TypeOpenCondition;
    public int TypeOpenConditionId;
    public int TypeOpenConditionValue;
    public string? ScenarioId;
    public bool IsHidden;
}

[MemoryPackable]
public partial class AlbumInfoRecord
{
    public int Id;
    public int CategoryGroupId;
    public int SubCategoryId;
    public string? SubCategoryNameLocaltable;
    public string? SubCategoryNameLocalkey;
    public string? SubCategoryThumbnail;
    public string? AlbumListThumbnail;
    public bool IsHidden;
    public bool IsPlayNextScenario;
}

[MemoryPackable]
public partial class OutpostConditionTriggerRecord
{
    public int Id;
    public List<TriggerData>? TriggerList;
    public EventType EventType;
    public int Tid;
    public int ResourceId;
    public string? NameLocalkey;
    public string? EnterScenarioId;
    public string? ExitScenarioId;
    public int StaminaValue;
    public int RewardId;
}

[MemoryPackable]
public partial class ArenaFieldResourceRecord
{
    public int Id;
    public ArenaType ArenaType;
    public int TimeLimit;
    public string? FieldResource;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
}

[MemoryPackable]
public partial class CooperationEventDailyRecord
{
    public int Id;
    public int Group;
    public int Day;
    public List<buff_data>? BuffData;
}

[MemoryPackable]
public partial class CooperationEventReportRecord
{
    public int Id;
    public CooperationEventReportType ReportType;
    public int ReportCheckTime;
    public int ReportTotalTime;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDatingSimDialogConditionRecord
{
    public string? Id;
    public int ManagerId;
    public string? EventPortraitResource;
    public List<DialogAppearDialogConditionListData>? DialogAppearDialogConditionList;
    public List<DialogAppearSelectionConditionListData>? DialogAppearSelectionConditionList;
    public string? DialogEventId;
    public bool IsShowStaminaConsumeIcon;
    public bool IsTurnOffOtherEvents;
}

[MemoryPackable]
public partial class EventDatingSimSelectionEventRecord
{
    public string? Id;
    public int ManagerId;
    public string? DialogEventId;
    public string? SelectionDialogGroupId;
    public string? SelectionDialogId;
    public bool IsConsumeStamina;
    public bool IsUseSelectCondition;
    public List<SelectConditionListData>? SelectConditionList;
    public List<SelectDialogConditionListData>? SelectDialogConditionList;
    public EventDatingSimSelectionEventType SelectionEventType;
    public List<SelectionEventValueListData>? SelectionEventValueList;
}

[MemoryPackable]
public partial class ArchiveProgressEventRecord
{
    public int Id;
    public int GroupId;
    public int EventId;
    public FieldProgressEventTarget EventTarget;
    public int ConditionMissionclear;
    public int ConditionStageclear;
    public DateTime ConditionTime;
    public FieldProgressEventType EventType;
    public string? EventValue;
    public FieldProgressEventCheckCondition EventCheckCondition;
}

[MemoryPackable]
public partial class EventFieldNPCRecord
{
    public int Id;
    public int ListButtonIndex;
    public int EventFieldId;
    public string? NpcLocalkeyName;
    public string? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public int ResourceId;
    public int CostumeIndex;
    public string? ForcedNameTagResource;
    public List<EventFieldNPCEventData>? EventFieldNpcEventDataList;
    public EventFieldNPCInteractionType InteractionType;
    public int InteractionDistance;
    public string? ForcedInteractionMarker;
    public bool IsInteractionAfterEnd;
    public int ProgressEventGroupId;
    public bool IsUseBalloonTalk;
    public string? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public int BalloonAlwaysCycle;
}

[MemoryPackable]
public partial class ProgressEventRecord
{
    public int Id;
    public int GroupId;
    public int EventId;
    public FieldProgressEventTarget EventTarget;
    public int ConditionMissionclear;
    public int ConditionStageclear;
    public DateTime ConditionTime;
    public FieldProgressEventType EventType;
    public string? EventValue;
    public FieldProgressEventCheckCondition EventCheckCondition;
}

[MemoryPackable]
public partial class AlbumCategoryRecord
{
    public int Id;
    public int Group;
    public bool IsOutpost;
    public string? CategoryNameLocalkey;
    public string? CategoryDescriptionLocalkey;
    public string? NameTagLocalkey;
    public bool IsShowTotalCount;
}

[MemoryPackable]
public partial class AlbumResourceRecord
{
    public int Id;
    public int SubCategoryId;
    public string? ScenarioNameLocaltable;
    public ScenarioDialogTableType OverwriteScenarioDialogTableType;
    public string? ScenarioNameLocalkey;
    public string? ScenarioGroupId;
    public int TargetChapter;
    public bool IsHidden;
    public DialogType Dialogtype;
}

[MemoryPackable]
public partial class ArcadeConfigRecord_Raw
{
    public string? Id;
    public string? Value;
}

[MemoryPackable]
public partial class ArcadeManagerRecord_Raw
{
    public int Id;
    public int TimeReferenceIdForActivate;
    public int Order;
    public bool HasUnionRanking;
    public string? GameButtonResourceId;
    public string? GameImageResourceId;
    public string? GameUnionBannerResourceId;
    public string? GameTitleLocale;
    public ArcadeGameType GameType;
    public int GameManagerId;
}

[MemoryPackable]
public partial class ArchiveEventDungeonDifficultRecord
{
    public int Id;
    public int Group;
    public int Order;
    public string? Name;
    public EventDungeonOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public int StageGroup;
}

[MemoryPackable]
public partial class ArchiveEventDungeonSpotBattleRecord
{
    public int Id;
    public List<EventDungeonOpenConditionObject>? OpenConditionList;
    public string? ShortName;
    public RewardType TicketItemType;
    public int TicketItemId;
    public int TicketItemCount;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public bool SpotAutocontrol;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public int SpotId;
    public int FirstClearRewardId;
    public int ClearRewardId;
    public string? EnterScenario;
    public string? ExitScenario;
    public int FixedPlayCharacterId;
    public int CharacterLv;
    public QuickBattleType QuickBattleType;
    public int QuickBattleTryMaxCount;
}

[MemoryPackable]
public partial class ArchiveEventDungeonStageRecord
{
    public int Id;
    public int Group;
    public int Step;
    public string? StageName;
    public EventDungeonContentsType StageContentsType;
    public int StageId;
    public bool IsRepeatClear;
    public bool IsGuideFieldChange;
    public string? MapChangeGuideLocalkey;
    public string? NpcChangeGuideLocalkey;
}

[MemoryPackable]
public partial class ArchiveEventDungeonRecord
{
    public int Id;
    public string? PartName;
    public int DifficultGroup;
}

[MemoryPackable]
public partial class ArchiveEventFieldCharCustomRecord
{
    public int Id;
    public string? VoiceFieldGoSoundCue;
    public string? VoiceFieldTouchSoundCue;
}

[MemoryPackable]
public partial class ArchiveEventFieldCooperationRecord
{
    public int Id;
    public string? MonsterNameLocalkey;
    public string? MonsterImage;
    public int ElementId;
}

[MemoryPackable]
public partial class ArchiveEventFieldFixedSDCharRecord
{
    public int Id;
    public int GroupId;
    public EventFieldSDCharacterUsageType UsageType;
    public int Slot;
    public FieldFixedSDCharacterReferenceType TableReferenceType;
    public int ResourceId;
    public int CostumeIndex;
    public string? ScenarioCharacterId;
    public int CharacterCustomId;
}

[MemoryPackable]
public partial class ArchiveEventFieldNPCRecord
{
    public int Id;
    public int ListButtonIndex;
    public int EventFieldId;
    public string? NpcLocalkeyName;
    public string? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public int ResourceId;
    public int CostumeIndex;
    public string? ForcedNameTagResource;
    public List<ArchiveEventFieldNPCEventData>? EventFieldNpcEventDataList;
    public EventFieldNPCInteractionType InteractionType;
    public int InteractionDistance;
    public string? ForcedInteractionMarker;
    public bool IsInteractionAfterEnd;
    public bool IsNotUsedInArchive;
    public int ProgressEventGroupId;
    public bool IsUseBalloonTalk;
    public string? BalloonAlwaysId;
    public BalloonPlayType BalloonAlwaysPlayType;
    public int BalloonAlwaysCycle;
}

[MemoryPackable]
public partial class ArchiveEventFieldRecord
{
    public int Id;
    public int EventId;
    public string? FieldDesignMap;
    public string? FieldArtMapStandard;
    public string? FieldHud;
    public string? FieldFirstEntryResource;
    public int LinkEventPassId;
    public int ProgressEventGroupId;
    public bool IsUseRoamingNpc;
    public int RoamingNpcLimit;
    public EventFieldRoamingNPCType RoamingNpcType;
    public int RoamingNpcFixedSdCharacterGroupId;
    public int RoamingNpcSpeedMinimum;
    public int RoamingNpcSpeedMaximum;
    public FieldPlayerSquadType PlayerSquadType;
    public int PlayerSquadValue;
    public int PlayerSquadSpeed;
    public int SdCharacterSize;
    public int EventMissionGroup;
    public int RecollectionHubGroupId;
    public string? FieldEnterScenario;
    public int FieldEnterScenarioStoryArchiveId;
    public List<EventFieldCurrencyData>? EventFieldCurrencyList;
}

[MemoryPackable]
public partial class ArchiveEventManagerRecord
{
    public int Id;
    public EventSystemType EventSystemType;
    public bool HasArcadeShortcutWithoutField;
    public int ArcadeManagerId;
    public string? EventShortcutId;
    public int ArchiveMatchEventId;
    public int ArchiveStoryProgressGroupOrder;
    public string? ArchiveStoryProgressLocale;
    public DateTime EventStartDate;
    public DateTime EventEndDate;
    public int ParentsEventId;
}

[MemoryPackable]
public partial class ArchiveEventMapChangePresetRecord
{
    public int Id;
    public string? ArtMapChangeValue;
    public string? HudChangeValue;
    public string? InteractionMarkerChangeValue;
    public string? NameTagChangeValue;
    public string? SkyBoxChangeValue;
    public string? PpChangeValue;
}

[MemoryPackable]
public partial class ArchiveEventQuestManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EventNameLocalkey;
    public int AlbumCategoryGroupId;
    public string? UiPrefab;
}

[MemoryPackable]
public partial class ArchiveEventQuestRecord_Raw
{
    public int Id;
    public int EventQuestManagerId;
    public Category ConditionType;
    public int ConditionValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int NextQuestId;
    public string? EndScenarioId;
}

[MemoryPackable]
public partial class ArchiveEventStoryRecord
{
    public int Id;
    public int EventId;
    public string? PrologueScenario;
    public int DungeonId;
    public int AlbumCategoryGroup;
    public string? UiPrefab;
    public int ArchiveTicketItemId;
    public int ArchiveCurrencyItemId;
}

[MemoryPackable]
public partial class ArchiveIncludedContentsGroupRecord
{
    public int Id;
    public int GroupId;
    public string? ContentTypeLocale;
    public int Order;
    public int TagInfoMinigameTutorialId;
    public string? TagResourceId;
    public string? UseRecommendedIconId;
}

[MemoryPackable]
public partial class ArchiveMessengerConditionRecord
{
    public int Id;
    public int ArchiveMessengerGroupId;
    public List<ArchiveMessengerConditionObject>? ArchiveMessengerConditionList;
    public string? Tid;
}

[MemoryPackable]
public partial class ArchiveRecommendedStoryListRecord
{
    public int Id;
    public int ListId;
    public string? RecommendedStoryTitleLocale;
    public ShortCutsInteractionType ShortcutsInteractionType;
    public int StoryAlbumInfoId;
    public int StoryArchiveRecordId;
}

[MemoryPackable]
public partial class ArchiveRecordManagerRecord
{
    public int Id;
    public ArchiveRecordType RecordType;
    public string? RecordTitleLocale;
    public int RecordMainArchiveEventId;
    public int RecordListOrder;
    public int UnlockTicketId;
    public int UnlockTicketCount;
    public int RewardInfoListId;
    public int EventQuestClearRewardId;
    public int RecommendedStoryListId;
    public int MessengerGroupId;
    public int IncludedContentsGroupId;
    public string? RecordSlotBgAddressable;
    public string? EventQuestBannerTable;
    public string? EventQuestBannerId;
    public string? RecordUnlockBgAddressable;
}

[MemoryPackable]
public partial class ArchiveRewardInfoListRecord
{
    public int Id;
    public int ListId;
    public string? RewardInfoTabLocale;
    public RewardDataLoadType RewardDataLoadType;
    public int RewardDataLoadSubId;
}

[MemoryPackable]
public partial class ArenaChampionTotalRankRecord
{
    public int Id;
    public int Priority;
    public ArenaChampionTotalRankConditionType ConditionType;
    public int ConditionValue;
    public string? Description;
    public int RewardId;
    public string? MailKey;
}

[MemoryPackable]
public partial class ArenaChampionUnionRankRecord
{
    public int Id;
    public int Priority;
    public ArenaChampionUnionRankConditionType Condition;
    public string? Description;
    public int RewardId;
    public string? MailKey;
}

[MemoryPackable]
public partial class AttractiveCounselCharacterRecord_Raw
{
    public int Id;
    public int NameCode;
    public int CollectRewardId;
    public string? CollectCharacterExpression;
}

[MemoryPackable]
public partial class AttractiveCounselRecord
{
    public int Id;
    public int NameCode;
    public int AttractiveLevelMin;
    public int AttractiveLevelMax;
    public string? CounselGroupId;
    public string? CounselNameLocalkey;
}

[MemoryPackable]
public partial class AttractiveLevelRewardRecord
{
    public int Id;
    public int NameCode;
    public int AttractiveLevel;
    public string? ConditionScenarioGroupId;
    public string? ScenarioTitleLoacle;
    public string? AttractiveScenarioGroupId;
    public int RewardId;
    public int Costume;
}

[MemoryPackable]
public partial class AttractiveLevelRecord
{
    public int Id;
    public int AttractiveLevel;
    public int AttractivePoint;
    public int AttackerHpRate;
    public int AttackerAttackRate;
    public int AttackerDefenceRate;
    public int AttackerEnergyResistRate;
    public int AttackerMetalResistRate;
    public int AttackerBioResistRate;
    public int DefenderHpRate;
    public int DefenderAttackRate;
    public int DefenderDefenceRate;
    public int DefenderEnergyResistRate;
    public int DefenderMetalResistRate;
    public int DefenderBioResistRate;
    public int SupporterHpRate;
    public int SupporterAttackRate;
    public int SupporterDefenceRate;
    public int SupporterEnergyResistRate;
    public int SupporterMetalResistRate;
    public int SupporterBioResistRate;
}

[MemoryPackable]
public partial class BannerRecord
{
    public int Id;
    public BannerSystemType BannerSystemType;
    public string? BannerSystemSubId;
    public DateTime BannerVisibleDate;
    public DateTime BannerStartDate;
    public DateTime BannerEndDate;
    public DateTime BannerDisableDate;
    public string? BannerThumbnailResourceTable;
    public string? BannerThumbnailResourceId;
    public string? BannerResourceTable;
    public string? BannerResourceId;
    public int EventOrder;
    public BannerPrintType BannerPrintType;
    public string? BannerThumbnailColor;
}

[MemoryPackable]
public partial class EventBBQTycoonCartoonCutSceneRecord
{
    public int Id;
    public int GroupId;
    public string? CartoonCutscene;
    public string? CartoonCutsceneDescription;
    public bool IsAppearInFRank;
    public bool IsAppearInDRank;
    public bool IsAppearInCRank;
    public bool IsAppearInBRank;
    public bool IsAppearInARank;
    public bool IsAppearInSRank;
}

[MemoryPackable]
public partial class EventBBQTycoonCustomerRecord
{
    public int Id;
    public int GroupId;
    public string? CustomerNameLocalkey;
    public string? CustomerResourcePrefab;
    public int CustomerDifficulty;
    public int CustomerLimitTime;
    public EventBBQTycoonCustomerBonusType BonusType;
    public int CustomerAppearanceRate;
    public int ConditionStageEventId;
    public int CustomerAppearanceStageCondition;
    public int SkewerStuffId1;
    public int SkewerStuffId2;
    public int SkewerStuffId3;
    public int SkewerStuffId4;
    public int SkewerStuffId5;
}

[MemoryPackable]
public partial class EventBBQTycoonManagerRecord
{
    public int Id;
    public int EventId;
    public string? UiPrefab;
    public int CustomerGroupId;
    public int SkewerStuffGroupId;
    public int TimeLimit;
    public int CustomerVisitRate;
    public int CustomerVisitRateDifficulty1Ratio;
    public int CustomerVisitRateDifficulty2Ratio;
    public int CustomerVisitRateDifficulty3Ratio;
    public int PointStandard;
    public int PointGradeRatioGreat;
    public int PointGradeRatioGood;
    public int PointGradeRatioBad;
    public int FeverTargetGauge;
    public int FeverStandardIncrease;
    public int FeverGradeRatioGreat;
    public int FeverGradeRatioGood;
    public int FeverGradeRatioBad;
    public int FeverTime;
    public int FeverSkewerRoastDelay;
    public int FirepowerIncreasePerTouch;
    public int FirepowerDecreasePerSecond;
    public int MaxFirepower;
    public int MaxFirepowerRoastSpeedRatio;
    public int TimeToBurnSkewer;
    public int GrillMaxOverheatingTime;
    public int GameStartActionTimeControl;
    public int FeverStartActionTimeControl;
    public int EndImminentAlertStartTime;
    public int DailyRewardTargetPoint;
    public int DailyRewardId;
    public int StepUpRewardGroupId;
    public int Difficulty2StartPoint;
    public int Difficulty3StartPoint;
    public int DRankTargetPoint;
    public int CRankTargetPoint;
    public int BRankTargetPoint;
    public int ARankTargetPoint;
    public int SRankTargetPoint;
    public string? FirstEnterScenarioGroupId;
    public int CartoonCutsceneGroupId;
    public int AlbumCategoryId;
    public string? AlbumDescriptionLocalkey;
    public int ScenarioGroupId;
    public int CustomerLimitExpireAlertTime;
    public int CustomerExitDelayTime;
    public int CustomerExitTime;
    public int TutorialGroupId;
}

[MemoryPackable]
public partial class EventBBQTycoonScenarioRecord
{
    public int Id;
    public int GroupId;
    public string? ScenarioDialogGroupId;
    public int ScenarioOutputCondition;
}

[MemoryPackable]
public partial class EventBBQTycoonSkewerStuffRecord
{
    public int Id;
    public int GroupId;
    public int UiIndex;
    public string? StuffNameLocalkey;
    public string? UiPortraitImage;
    public string? StuffResourcePrefab;
}

[MemoryPackable]
public partial class EventBBQTycoonStepUpRewardRecord
{
    public int Id;
    public int GroupId;
    public int Step;
    public int TargetPoint;
    public int RewardId;
}

[MemoryPackable]
public partial class EventBBQTycoonTutorialRecord
{
    public int Id;
    public int GroupId;
    public string? TutorialResource;
    public string? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class BGMShopRecord_Raw
{
    public int Id;
    public BGMShopType Shop;
    public string? BgmLoop;
}

[MemoryPackable]
public partial class BGMSpotThemeRecord
{
    public int Id;
    public ThemeType Theme;
    public string? BgmLoop;
}

[MemoryPackable]
public partial class BGMTriggerRecord
{
    public int Id;
    public BGMType BgmType;
    public BGMSubType BgmSubType;
    public string? TypeValue;
    public int EventId;
    public bool Default;
    public BGMTriggerEventType BgmTriggerEventType;
    public int BgmTriggerEventValue;
    public string? BgmLoop;
}

[MemoryPackable]
public partial class BonusRewardCharacterRecord
{
    public int Id;
    public int Group;
    public int Order;
    public int CharacterNameCode;
    public int BonusPercent;
}

[MemoryPackable]
public partial class BotCharacterRecord
{
    public int Id;
    public int GroupId;
    public BotCategory BotCategory;
    public int Slot;
    public int CharacterId;
    public int CharacterLevel;
    public int AttractiveLevel;
    public List<bot_equipment_data>? EquipmentArray;
    public int HarmonycubeId;
    public int HarmonycubeLevel;
    public int SkillLevel1;
    public int SkillLevel2;
    public int SkillLevel3;
    public int RecycleLevelPersonal;
    public int RecycleLevelCorporation;
    public int RecycleLevelClass;
    public int UserLevel;
    public int NormalStageInfo;
    public int HardStageInfo;
    public int TowerInfo;
}

[MemoryPackable]
public partial class CampaignChapterRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int World;
    public int Chapter;
    public OpenType OpenType;
    public DateTime OpenTime;
    public ChapterGuideType ChapterGuide;
    public string? ChapterImage;
    public string? HardChapterImage;
    public string? FieldId;
    public string? HardFieldId;
}

[MemoryPackable]
public partial class CampaignPackageGroupRecord
{
    public int Id;
    public int PackageGroupId;
    public CampaignPackageRewardType RewardType;
    public int RewardOrder;
    public bool IsGoal;
    public Trigger Trigger;
    public int TriggerConditionId;
    public int TriggerConditionValue;
    public RewardType ProductType;
    public int ProductId;
    public int ProductValue;
}

[MemoryPackable]
public partial class CampaignStageRecord
{
    public int Id;
    public int ChapterId;
    public ChapterMod ChapterMod;
    public int ParentsId;
    public int GroupId;
    public string? NameLocalkey;
    public StageCategory StageCategory;
    public StageType StageType;
    public bool SpotAutocontrol;
    public int EnterCondition;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public int FieldMonsterId;
    public int SpotId;
    public int RewardId;
    public ScenarioType EnterScenarioType;
    public string? EnterScenario;
    public ScenarioType ExitScenarioType;
    public string? ExitScenario;
    public int CurrentOutpostBattleId;
    public int ClearedOutpostBattleId;
    public int FixedPlayCharacterId;
    public int CharacterLv;
}

[MemoryPackable]
public partial class CharacterCostumeRecord
{
    public int Id;
    public int CostumeThemeGroupId;
    public int ResourceId;
    public int CostumeIndex;
    public List<string>? AdditionalSkins;
    public CostumeGrade CostumeGradeId;
    public string? CostumeNameLocale;
    public string? CostumeDescriptionLocale;
    public CostumeShopType CostumeShopType;
    public int CostumeShopPriceId;
    public bool IsHidden;
}

[MemoryPackable]
public partial class CharacterLevelRecord
{
    public int Level;
    public CharacterLevelType Type;
    public int NeedSynchroLvMin;
    public int Gold;
    public int CharacterExp;
    public int CharacterExp2;
}

[MemoryPackable]
public partial class CharacterReactionRecord
{
    public int Id;
    public CharacterReactionType ReactionType;
    public int SpecialLobbyChangeStep;
    public int CameraShake;
    public int AttractiveLevelMin;
    public int AttractiveLevelMax;
    public int ResourceId;
    public int CostumeIndex;
    public int EventlobbyId;
    public string? AnimationClip;
    public string? SpeechLocalkey;
    public string? RectionVoice;
    public double Probability;
}

[MemoryPackable]
public partial class CharacterShotTutorialRecord_Raw
{
    public int Id;
    public WeaponType WeaponType;
    public string? WeaponNameLocalkey;
    public string? WeaponInfoLocalkey;
    public string? TutorialVideo;
    public string? MaxLoadInfoLocalkey;
    public string? ReloadTimeInfoLocalkey;
    public string? ShotSpeedInfoLocalkey;
    public string? EffectiveRangeInfoLocalkey;
    public string? OperationTypeInfoLocalkey;
}

[MemoryPackable]
public partial class CharacterSkillRecord
{
    public int Id;
    public AttackType AttackType;
    public CounterType CounterType;
    public PreferTargetType PreferTarget;
    public PreferTargetconditionType PreferTargetCondition;
    public int SkillCooltime;
    public CharacterSkillType SkillType;
    public List<SkillValueData>? SkillValueData;
    public DurationType DurationType;
    public int DurationValue;
    public List<int>? BeforeUseFunctionIdList;
    public List<int>? BeforeHurtFunctionIdList;
    public List<int>? AfterUseFunctionIdList;
    public List<int>? AfterHurtFunctionIdList;
    public string? ResourceName;
    public int ShakeId;
    public string? Icon;
}

[MemoryPackable]
public partial class CharacterStatRecord
{
    public int Id;
    public int Group;
    public int Level;
    public long LevelHp;
    public int LevelAttack;
    public int LevelDefence;
    public int LevelEnergyResist;
    public int LevelMetalResist;
    public int LevelBioResist;
}

[MemoryPackable]
public partial class CharacterRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ResourceId;
    public List<string>? AdditionalSkins;
    public int NameCode;
    public int Order;
    public OriginalRareType OriginalRare;
    public int GradeCoreId;
    public int GrowGrade;
    public int StatEnhanceId;
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public CharacterClassType Class;
    public int SurfaceCategory;
    public List<int>? ElementId;
    public int CriticalRatio;
    public int CriticalDamage;
    public int ShotId;
    public int BonusrangeMin;
    public int BonusrangeMax;
    public BurstStep UseBurstSkill;
    public BurstStep ChangeBurstStep;
    public int BurstApplyDelay;
    public int BurstDuration;
    public int UltiSkillId;
    public int Skill1Id;
    public TableType Skill1Table;
    public int Skill2Id;
    public TableType Skill2Table;
    public CategoryType EffCategoryType;
    public int EffCategoryValue;
    public CategoryType CategoryType1;
    public CategoryType CategoryType2;
    public CategoryType CategoryType3;
    public string? CvLocalkey;
    public Squad Squad;
    public int PieceId;
    public bool IsVisible;
    public bool PrismIsActive;
    public bool IsDetailClose;
}

[MemoryPackable]
public partial class CharacterVoiceCategoryRecord
{
    public int Id;
    public int Order;
    public string? CategoryDescription;
}

[MemoryPackable]
public partial class CharacterVoiceGroupRecord
{
    public int Id;
    public int SpeechGroupId;
    public int CategoryGroup;
    public int Order;
    public bool IsTeaser;
    public string? VoiceDescription;
    public int ConditionAttractiveLevel;
    public string? SpeechId;
    public string? SpeechLocalkey;
}

[MemoryPackable]
public partial class CharacterVoiceRecord
{
    public int Id;
    public VoiceTargetType VoiceType;
    public int ResourceId;
    public int CostumeIndex;
}

[MemoryPackable]
public partial class ConditionRewardRecord
{
    public int Id;
    public int Group;
    public int Priority;
    public RewardConditionType Type;
    public long ValueMin;
    public long ValueMax;
    public int RewardId;
}

[MemoryPackable]
public partial class ContentsShopCurrencyOrderRecord_Raw
{
    public int Id;
    public int Group;
    public int Order;
    public PriceType PriceType;
    public int PriceId;
}

[MemoryPackable]
public partial class ContentsShopInfoRecord
{
    public int Id;
    public int GroupId;
    public ContentsShopDescriptionType DescriptionType;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class ContentsShopProductRecord
{
    public int Id;
    public int BundleId;
    public int ProductOrder;
    public int ProductProb;
    public bool IsLimit;
    public int BuyLimitCount;
    public RewardType GoodsType;
    public int GoodsId;
    public int GoodsValue;
    public PriceType PriceType;
    public int PriceId;
    public int PriceValue;
    public int DiscountProbId;
    public add_mark AddMark;
}

[MemoryPackable]
public partial class ContentsShopRenewRecord
{
    public int Id;
    public int RenewGroupId;
    public int RenewStep;
    public CurrencyType PriceId;
    public int PriceValue;
}

[MemoryPackable]
public partial class ContentsShopRecord
{
    public int Id;
    public ShopType ShopType;
    public ShopCategoryType ShopCategory;
    public int ShopNpcResourceId;
    public string? PriceColorNormal;
    public bool CurrencyInfoDisplayControl;
    public ContentsOpen OpenContents;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public RenewType RenewType;
    public int RenewValue;
    public int RenewGroupId;
    public bool IsRenewTimeDisplay;
    public int StageId;
    public int BundleId;
    public int ShopInfoGroupId;
    public string? LogoResourceId;
    public string? BgResourceId;
    public bool IsBatchPurchase;
    public int CurrencyOrderGroupId;
}

[MemoryPackable]
public partial class CooperationEventRecord
{
    public int Id;
    public int EventId;
    public string? Thumbnail;
    public CooperationEventContentsType ContentsType;
    public int ContentsValue;
    public int CooperationDailyGroup;
    public List<int>? CurrencyId;
    public string? UiPrefab;
}

[MemoryPackable]
public partial class CorporationInfoRecord
{
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public string? CorporationName;
    public string? CorporationDescription;
    public string? ResourceId;
}

[MemoryPackable]
public partial class CostRecord
{
    public int Id;
    public List<CostData>? Costs;
}

[MemoryPackable]
public partial class CurrencyRecord
{
    public CurrencyType Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ResourceId;
    public bool IsVisibleToInventory;
    public long MaxValue;
}

[MemoryPackable]
public partial class CustomPackageGroupRecord
{
    public int Id;
    public int CustomGroupId;
    public int SlotNumber;
    public RewardType ProductType;
    public int ProductId;
    public int ProductValue;
}

[MemoryPackable]
public partial class CustomPackageShopRecord
{
    public int Id;
    public int CustomShopId;
    public int CustomOrder;
    public int PackageGroupId;
    public int CustomGroupId;
    public int CustomGroupCount;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
    public bool IsFree;
    public int MidasProductId;
}

[MemoryPackable]
public partial class DailyEventRecord
{
    public int Id;
    public int EventId;
    public EventPhaseType EventPhaseType;
    public int EventPhaseGroupId;
    public EventTargetType TargetType;
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
    public bool IgnoreEventPeriod;
    public bool IsStack;
    public EventSystemType ShortcutType;
    public int ShortcutId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int PointValue;
    public int RewardId;
    public bool IsMain;
}

[MemoryPackable]
public partial class DailyMissionEventSettingRecord_Raw
{
    public int Id;
    public int EventId;
    public int OpenConditionDailyEventId;
    public string? LocaleButtonText;
    public string? ViewPrefabId;
}

[MemoryPackable]
public partial class DispatchBoardRecord
{
    public int Id;
    public DispatchType DispatchType;
    public int DispatchBoardLv;
    public string? DispatchBoardDescription;
    public int DispatchMax;
    public List<DispatchBoardData>? DispatchList;
}

[MemoryPackable]
public partial class DispatchRecord
{
    public int Id;
    public DispatchType DispatchType;
    public int DispatchGroup;
    public SelectType SelectType;
    public int SelectOrder;
    public int DispatchGradeId;
    public string? DispatchName;
    public string? DispatchDescription;
    public int SlotMax;
    public List<DispatchGrade_Data>? DispatchSlotArray;
    public int RewardId;
    public int TimeMin;
}

[MemoryPackable]
public partial class DrawRewardPoolRecord_Raw
{
    public int Id;
    public int PoolId;
    public RewardType RewardType;
    public int RewardId;
    public int RewardCnt;
    public int Weight;
    public int MaxCnt;
    public int MaxDrawCnt;
}

[MemoryPackable]
public partial class EchoDialogFieldTriggerRecord_Raw
{
    public int Id;
    public EchoDialogFieldType FieldType;
    public EchoDialogFieldDifficultyType FieldDifficulty;
    public int FieldId;
    public bool IsArchiveData;
    public EchoDialogTriggerType TriggerType;
    public bool IsShowApproachSignal;
    public string? MarkerResource;
    public string? DialogFilterResource;
    public int DialogGroupId;
    public int DialogGroupStartDelay;
    public int DialogGroupEndDelay;
    public bool IsAwakeLoad;
    public int SpawnConditionStage;
    public int ConditionCheckStageEventId;
    public DateTime SpawnConditionTime;
    public int SpawnConditionEchoTrigger;
    public bool IsChangeJukebox;
    public int JukeboxId;
    public int JukeboxStartPosition;
    public int EnvironmentalSoundDecrease;
}

[MemoryPackable]
public partial class EchoDialogNPCRecord_Raw
{
    public string? Id;
    public string? NpcPrefab;
    public string? NpcName;
    public bool IsAlwaysSpawn;
    public string? NpcSpawnEffect;
    public string? NpcDespawnEffect;
}

[MemoryPackable]
public partial class EchoDialogRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? EchoDialogNpcId;
    public string? NameTagColor;
    public string? DialogLocalkey;
    public int DialogPrintTiming;
    public string? BalloonResource;
    public string? Voice;
    public string? PlaySfx;
}

[MemoryPackable]
public partial class ElementRecord
{
    public int Id;
    public AttackType Element;
    public int GroupId;
    public int WeakElementId;
    public string? ElementNameLocalekey;
    public string? ElementCodeNameLocalekey;
    public string? ElementDescLocalekey;
    public string? ElementIcon;
    public string? ElementDescSurfaceLocalekey;
}

[MemoryPackable]
public partial class EquipmentOptionCostRecord
{
    public int Id;
    public int CostGroupId;
    public int CostLevel;
    public int DisposableFixCostLevel;
    public int CostId;
    public int DisposableFixCostId;
}

[MemoryPackable]
public partial class EquipmentOptionRecord
{
    public int Id;
    public string? DescriptionLocalkey;
    public int EquipmentOptionGroupId;
    public int OptionGroupRatio;
    public int StateEffectGroupId;
    public List<StateEffectList>? StateEffectList;
    public int OptionRatio;
}

[MemoryPackable]
public partial class EventBBQTycoonArcadeManagerRecord_Raw
{
    public int Id;
    public int ArcadeEventId;
    public int ExistManagerId;
    public int StepUpRewardGroupId;
    public int HelpTipViewSubId;
}

[MemoryPackable]
public partial class EventBBQTycoonArchiveManagerRecord
{
    public int Id;
    public int EventId;
    public int ExistManagerId;
    public int HelpTipViewSubId;
}

[MemoryPackable]
public partial class EventBHBackGroundRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? BackgroundResource;
    public List<string>? UseFog;
    public string? BarricadeResource;
    public int ChangeBackgroundWaveId;
}

[MemoryPackable]
public partial class EventBHCharacterLevelRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Lv;
    public bool MinLv;
    public bool MaxLv;
    public int Exp;
    public int LevelUpSelectPassiveId;
}

[MemoryPackable]
public partial class EventBHCharacterRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? UiCharacterResource;
    public string? CharacterResource;
    public string? CharacterWeaponResource;
    public string? NameLocale;
    public string? SkillNameLocale;
    public string? SkillDescriptionLocale;
    public string? SkillIcon;
    public int OpenDate;
    public string? OpenConditionLocale;
    public int StartHp;
    public int CharacterExpGroup;
    public BHCharacterSkillType SkillType;
    public List<BHSkillValueData_Raw>? SkillValue;
    public List<SkillResourceData_Raw>? SkillResource;
    public bool SkillInfinity;
    public int SkillUseCount;
    public int SkillCooltime;
    public int DefaultWeapon;
    public int InventoryGroupId;
}

[MemoryPackable]
public partial class EventBHCollectionRecord_Raw
{
    public int Id;
    public int GroupId;
    public int WeaponId;
    public int Order;
}

[MemoryPackable]
public partial class EventBHInGamePassiveRecord_Raw
{
    public int Id;
    public List<int>? FirstSlotUsePassiveGroupId;
    public List<int>? SecondSlotUsePassiveGroupId;
    public List<int>? ThirdSlotUsePassiveGroupId;
    public List<int>? FourthSlotUsePassiveGroupId;
}

[MemoryPackable]
public partial class EventBHInventoryRecord_Raw
{
    public int Id;
    public int GroupId;
    public int RowNumber;
    public List<InventorySlotData_Raw>? Slot;
}

[MemoryPackable]
public partial class EventBHManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EnterScenario;
    public bool IsArchive;
    public int CharacterGroupId;
    public int UseWaveGroupId;
    public int BackgroundGroupId;
    public string? BarricadeResource;
    public string? BackgroundFogResource;
    public int CharacterMonsterMinDistance;
    public int DefaultExpRatio;
    public int MinionExp;
    public int EliteExp;
    public int BossExp;
    public int MinionPoint;
    public int ElitePoint;
    public int BossPoint;
    public int MinionDropGold;
    public int EliteDropGold;
    public int BossDropGold;
    public int CriticalProbability;
    public int CriticalDamageRatio;
    public int SameWeaponGroupShootDelay;
    public int DefaultShopItemCount;
    public int MaximumKeepWeaponCount;
    public int DefaultRerollCount;
    public int GoldRerollUseGold;
    public int DefaultBanWeaponCount;
    public int MinReloadCooltime;
    public int EnhanceGroupId;
    public int CollectionGroupId;
    public int IngamePassiveSelectRow;
    public int IngamePassiveAddRow;
    public string? StartBackgroundResource;
    public int MinionKnockBackCooltime;
    public int EliteKnockBackCooltime;
    public int BossKnockBackCooltime;
    public int DailyMissionPoint;
    public int DailyMissionReward;
    public int ScoreLimitPerGame;
}

[MemoryPackable]
public partial class EventBHMissionRecord_Raw
{
    public int Id;
    public int ManagerId;
    public EventBHConditionType ConditionType;
    public int ConditionId;
    public int ConditionValue;
    public string? NameLocalkey;
    public int Order;
    public int RewardId;
}

[MemoryPackable]
public partial class EventBHMonsterRecord_Raw
{
    public int Id;
    public string? MonsterResource;
    public int MonsterSize;
    public BHMonsterType MonsterType;
    public BHMonsterAttackType MonsterAtkType;
    public BHMonsterSkillType MonsterSkillType;
    public List<MonsterSkillValueData_Raw>? MonsterSkillValue;
    public string? ProjectileResource;
    public int ProjectileSpeed;
    public int MonsterMoveSpeed;
    public int MonsterHp;
    public bool ShowHp;
    public int MonsterAtk;
    public int MonsterDef;
    public int MonsterAtkCooltime;
    public int MonsterAtkRange;
    public string? DeadFxResource;
}

[MemoryPackable]
public partial class EventBHOutGamePassiveRecord_Raw
{
    public int Id;
    public int GroupId;
    public int UsePassiveGroupId;
}

[MemoryPackable]
public partial class EventBHPassiveRecord_Raw
{
    public int Id;
    public int GroupId;
    public BHPassiveType PassiveType;
    public string? PassiveIcon;
    public string? NameLocale;
    public BHPassiveSkillType SkillType;
    public List<PassiveSkillValueData_Raw>? PassiveSkillValue;
    public string? SkillLocale;
    public List<int>? LinkWeaponGroupId;
    public int PassiveLevel;
    public bool MaxLevel;
    public int LevelUpCost;
    public bool RepeatedAcquisition;
    public int AppearanceAbleCharacterLevel;
    public int AppearanceValue;
    public int AddAppearanceValue;
}

[MemoryPackable]
public partial class EventBHShopRecord_Raw
{
    public int Id;
    public int GroupId;
    public int UseWeaponId;
    public int WeaponAppearanceValue;
    public int Level1AppearanceValue;
    public int Level2AppearanceValue;
    public int Level3AppearanceValue;
    public int Level4AppearanceValue;
    public int AddWeaponAppearanceValue;
}

[MemoryPackable]
public partial class EventBHTutorialRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int TutorialPageId;
    public BHTutorialOutputType TutorialOutputType;
    public int TutorialOutputValue;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class EventBHWavePresetRecord_Raw
{
    public int Id;
    public int GroupId;
    public int SpawnMonsterId;
    public bool RandomSpawn;
    public int SpawnPoint;
    public bool BossSpawn;
    public int MonsterSpawnTime;
    public int MonsterHpRatio;
    public int MonsterAtkRatio;
    public int MonsterDefRatio;
    public int MonsterMoveSpeedRatio;
}

[MemoryPackable]
public partial class EventBHWaveRecord_Raw
{
    public int Id;
    public int GroupId;
    public bool IsSettingStep;
    public bool IsFinalWave;
    public int WaveOrder;
    public int WavePresetGroupId;
    public bool WaveRepeat;
    public int WaveRepeatCount;
    public bool IsInventoryUpgrade;
    public int InventoryUpgradePoint;
    public bool IsOpenShop;
    public int ShopGroupId;
    public int PointAndGoldRatio;
}

[MemoryPackable]
public partial class EventBHWeaponShapeRecord_Raw
{
    public int Id;
    public int GroupId;
    public int RowNumber;
    public List<SlotData_Raw>? Slot;
}

[MemoryPackable]
public partial class EventBHWeaponRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? NameLocale;
    public string? DescriptionLocale;
    public string? WeaponResource;
    public string? WeaponIcon;
    public int WeaponSize;
    public int WeaponOpenDate;
    public int WeaponLevel;
    public bool MaxLevel;
    public EventBHWeaponType WeaponType;
    public EventBHFocusTargetType FocusTargetType;
    public EventBHWeaponAtkType WeaponAtkType;
    public EventBHWeaponTagType WeaponTag;
    public string? ProjResource;
    public string? ProjHitResource;
    public int ProjLifeTime;
    public int ProjSpeed;
    public int ProjSize;
    public int OneShotProjAmount;
    public int TotalProjAmount;
    public int ProjAtkTerm;
    public bool ProjPierce;
    public int ProjKnockbackValue;
    public bool ContactExplosion;
    public int ExplosionRange;
    public string? ExplosionResource;
    public string? RangeAtkResource;
    public int RangeAtkRange;
    public int RangeAtkDuration;
    public int RangeAtkTerm;
    public int RangeAtkAngle;
    public int WeaponAtk;
    public int WeaponReloadTime;
    public int AtkStartRange;
    public List<SkillData01_Raw>? SkillData01;
    public List<SkillData02_Raw>? SkillData02;
}

[MemoryPackable]
public partial class EventBoxGachaPriceRecord
{
    public int Id;
    public int Group;
    public int Count;
    public RewardType ItemType;
    public int ItemId;
    public int ItemCount;
}

[MemoryPackable]
public partial class EventBoxGachaProbRecord
{
    public int Id;
    public int Group;
    public int Count;
    public int Order;
    public int Rate;
}

[MemoryPackable]
public partial class EventBoxGachaRewardRecord
{
    public int Id;
    public int Group;
    public int Order;
    public int Tier;
    public RewardType ItemType;
    public int ItemId;
    public int ItemCount;
}

[MemoryPackable]
public partial class EventBoxGachaRecord
{
    public int Id;
    public int EventId;
    public string? Name;
    public string? Description;
    public bool OnInfo;
    public string? InfoDescription;
    public RewardType EventItemType;
    public int FreeTicketItemId;
    public int EventItemId;
    public int PriceGroup;
    public int ProbGroup;
    public int GachaRewardGroup;
    public int ShopId;
    public string? UiPrefab;
    public string? GachaMovie;
    public string? RemainPeriodTextColor;
}

[MemoryPackable]
public partial class EventBTGBgRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int Order;
    public string? BgConditionMapId;
    public string? BgMiResourceId;
    public string? BgResourceId;
    public string? BgNameLocalkey;
    public string? BgDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventBTGConfigRecord_Raw
{
    public string? Id;
    public string? Value;
}

[MemoryPackable]
public partial class EventBTGCutSceneRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int Order;
    public CutSceneConditionType CutsceneConditionType;
    public string? CutsceneResourceId;
    public string? CutsceneNameLocalkey;
    public string? CutsceneDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventBTGManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EnterScenario;
    public int DailyRewardPoint;
    public int DailyRewardId;
    public int TutorialId;
    public int CGradeMin;
    public int BGradeMin;
    public int AGradeMin;
    public int SGradeMin;
    public int BtgScoreLimitPerGame;
    public string? UiPrefab;
}

[MemoryPackable]
public partial class EventBTGMapRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int ConditionValue;
    public int Order;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public string? SiResourceId;
    public int Size;
}

[MemoryPackable]
public partial class EventBTGMissionRecord_Raw
{
    public int Id;
    public int ManagerId;
    public EventBTGMissionConditionType ConditionType;
    public int ConditionId;
    public int ConditionValue;
    public string? NameLocalkey;
    public int Order;
    public int RewardId;
}

[MemoryPackable]
public partial class EventBTGMuzzleSetRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int SetScore;
    public List<ObjectId_Raw>? ObjectIdList;
}

[MemoryPackable]
public partial class EventBTGObjectInfoRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int ChangeTo;
    public int MergePoint;
    public int Size;
    public int WeightLevel;
    public int SkillBTargetLevel;
    public string? ResourceId;
    public int Bounciness;
    public bool IsStratched;
}

[MemoryPackable]
public partial class EventBTGSkillRecord_Raw
{
    public int Id;
    public int ManagerId;
    public BTGSkillType SkillType;
    public int SkillUseValue;
}

[MemoryPackable]
public partial class EventBubbleMarchAdvantageDamageRecord_Raw
{
    public int Id;
    public int AdvantageCharacterGroup;
    public int AdvantageMonsterGroup;
    public int AdvantageDamageValue;
}

[MemoryPackable]
public partial class EventBubbleMarchBuffRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? BuffDescriptionLocalkey;
    public string? ResourceId;
    public int SlotOrder;
    public int BuffLevel;
    public EBMBuffType BuffType;
    public int BuffValue;
    public int UpgradeCostCurrencyId;
    public int UpgradeCostCurrencyValue;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterLevelRecord_Raw
{
    public int Id;
    public int LevelGroup;
    public int LevelMin;
    public int LevelMax;
    public int SummonCost;
    public int NeedCost;
    public int IncreaseAttack;
    public int IncreaseHp;
    public int BubbleCount;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterSkillRecord_Raw
{
    public int Id;
    public int SkillGroup;
    public string? DescriptionLocalkey;
    public int BattleRadius;
    public EBMCharacterSkillTargetType Target;
    public EBMCharacterSkillTargetPositionType TargetPosition;
    public int TargetPositionValue1;
    public int TargetPositionValue2;
    public EBMCharacterSkillType SkillType;
    public int SkillValue;
    public int SkillHitCount;
    public int KnockBackDamage;
    public int ProjectileSpeed;
    public int ProjectileParabolaHeight;
    public int RemainTime;
    public int CoolTime;
    public string? AnimationSkill;
    public int AnimationSkillSpeed;
    public string? EffectMuzzle;
    public string? EffectProjectile;
    public string? EffectSkill;
    public string? EffectImpact;
    public int EffectImpactScale;
    public string? EffectHit;
    public string? EffectHitDefault;
    public EBMCharacterSkillAreaType AreaType;
    public int AreaRemainTime;
    public int AreaActionTime;
    public EBMCharacterSkillType AreaSkillType;
    public int AreaSkillValue;
    public string? EffectArea;
    public int EffectAreaScale;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterRecord_Raw
{
    public int Id;
    public int CharacterGroup;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public EBMCharacterType CharacterType;
    public EBMCharacterGradeType Grade;
    public int TeamSetOrder;
    public string? ResourceId;
    public string? CharacterPrefab;
    public int LevelGroup;
    public int SkillGroup;
    public int AdvantageGroup;
    public int Attack;
    public int Hp;
    public int KnockBackMax;
    public int MoveSpeed;
    public int SummonCooltime;
    public int SummonStack;
    public int Scale;
    public int ShadowScale;
    public int PrefabHeightPosition;
    public EBMSearchTargetType SearchTargetType;
    public int SearchRadius;
    public EBMCharacterDiscoverType DiscoverType;
    public int DiscoverValue;
    public string? AnimationSummon;
    public string? AnimationStand;
    public string? AnimationMove;
    public int AnimationMoveSpeed;
    public string? AnimationKnockBack;
    public int AnimationKnockBackDistance;
    public string? AnimationDeath;
    public string? EffectSummon;
    public string? EffectDeath;
    public string? EffectEdge;
}

[MemoryPackable]
public partial class EventBubbleMarchCharacterUnlockRecord_Raw
{
    public int Id;
    public int CategoryGroupId;
    public string? CategoryLocalkey;
    public int SlotOrder;
    public bool UseUnlockCondition;
    public int UnlockCharacterId;
    public int UnlockConditionCharacter;
    public int UnlockConditionDay;
    public int UnlockCurrencyId;
    public int UnlockCurrencyValue;
}

[MemoryPackable]
public partial class EventBubbleMarchCurrencyLevelRecord_Raw
{
    public int Id;
    public int LevelGroup;
    public int LevelMin;
    public int LevelMax;
    public int NeedCost;
    public int IncreaseCurrencyCount;
}

[MemoryPackable]
public partial class EventBubbleMarchCurrencyRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public bool IsServer;
}

[MemoryPackable]
public partial class EventBubbleMarchLoadingRecord_Raw
{
    public int Id;
    public string? LoadingTipLocalkey;
    public int Order;
}

[MemoryPackable]
public partial class EventBubbleMarchManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public MiniGameSystemType MinigameType;
    public string? UiPrefab;
    public string? EnterScenario;
    public int HelptipHubGroup;
    public int SummonCurrencyId;
    public int SummonCurrencyLevelGroup;
    public int SummonCurrencyCount;
    public int TimeScale;
    public int ZoomInValue;
    public int SingleTargetMissRange;
    public int StageManagerGroup;
    public int CharacterGroup;
    public int MissionGroup;
    public int ChallengeLastWaveOrder;
    public int ChallengeRepeatWaveOrder;
    public int ChallengeWaveMax;
    public int ChallengeRepeatSummonTimeStartWave;
    public int ChallengeRepeatSummonTimeGroup;
    public int ChallengeRepeatSummonTimeValue;
    public bool IsStackMinion;
}

[MemoryPackable]
public partial class EventBubbleMarchMissionRecord_Raw
{
    public int Id;
    public int MissionGroup;
    public EventBubbleMarchMissionType MissionType;
    public EventBubbleMarchMissionConditionType ConditionType;
    public int ConditionId;
    public int ConditionValue;
    public string? NameLocalkey;
    public int PointValue;
    public int Order;
    public int RewardId;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterLevelRecord_Raw
{
    public int Id;
    public int LevelGroup;
    public int LevelMin;
    public int LevelMax;
    public int SummonCurrencyReward;
    public int IncreaseAttack;
    public int IncreaseHp;
    public int BubbleCount;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterSkillRecord_Raw
{
    public int Id;
    public int SkillGroup;
    public int BattleRadius;
    public EBMCharacterSkillTargetType Target;
    public EBMCharacterSkillTargetPositionType TargetPosition;
    public int TargetPositionValue1;
    public int TargetPositionValue2;
    public EBMCharacterSkillType SkillType;
    public int SkillValue;
    public int SkillHitCount;
    public int KnockBackDamage;
    public int ProjectileSpeed;
    public int ProjectileParabolaHeight;
    public int RemainTime;
    public int CoolTime;
    public string? AnimationSkill;
    public int AnimationSkillSpeed;
    public string? EffectMuzzle;
    public string? EffectProjectile;
    public string? EffectSkill;
    public string? EffectImpact;
    public int EffectImpactScale;
    public string? EffectHit;
    public string? EffectHitDefault;
    public EBMCharacterSkillAreaType AreaType;
    public int AreaRemainTime;
    public int AreaActionTime;
    public EBMCharacterSkillType AreaSkillType;
    public int AreaSkillValue;
    public string? EffectArea;
    public int EffectAreaScale;
}

[MemoryPackable]
public partial class EventBubbleMarchMonsterRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public EBMMonsterType MonsterType;
    public EBMMonsterPositionType MonsterPosition;
    public int HeightPosition;
    public EBMMonsterAttackType MonsterAttackType;
    public string? ResourceId;
    public string? MonsterPrefab;
    public int LevelGroup;
    public int SkillGroup;
    public int AdvantageGroup;
    public int Attack;
    public int Hp;
    public int KnockBackMax;
    public int MoveSpeed;
    public int Scale;
    public int ShadowScale;
    public int PrefabHeightPosition;
    public EBMSearchTargetType SearchTargetType;
    public int SearchRadius;
    public EBMCharacterDiscoverType DiscoverType;
    public int DiscoverValue;
    public string? AnimationSummon;
    public string? AnimationStand;
    public string? AnimationMove;
    public int AnimationMoveSpeed;
    public string? AnimationKnockBack;
    public int AnimationKnockBackDistance;
    public string? AnimationDeath;
    public string? EffectSummon;
    public string? EffectDeath;
}

[MemoryPackable]
public partial class EventBubbleMarchSpawnPositionRecord_Raw
{
    public int Id;
    public int XPosition;
    public int YPosition;
}

[MemoryPackable]
public partial class EventBubbleMarchStageManagerRecord_Raw
{
    public int Id;
    public int StageManagerGroup;
    public EBMDifficultyType DifficultyType;
    public int DifficultyGroupId;
    public string? NameLocalkey;
    public int OpenConditionStage;
    public int OpenConditionDay;
}

[MemoryPackable]
public partial class EventBubbleMarchStageSummonSeedRecord_Raw
{
    public int Id;
    public int SeedGroup;
    public List<EBMSummonGroupData_Raw>? EbmSummonGroupData;
}

[MemoryPackable]
public partial class EventBubbleMarchStageSummonTimeRecord_Raw
{
    public int Id;
    public int SummonTimeGroup;
    public EBMSummonTimeRepeatType RepeatType;
    public int TimeCondition;
    public int SeedGroup;
    public EBMSummonSeedType SummonSeedType;
}

[MemoryPackable]
public partial class EventBubbleMarchStageRecord_Raw
{
    public int Id;
    public int DifficultyGroupId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int StageOrder;
    public int WaveGroup;
    public int MonsterLevelBase;
    public int CharacterMaxLevel;
    public int SummonCurrencyMaxLevel;
    public int SummonCurrencyGetSecond;
    public int TimeLimit;
    public int FriendlyTowerId;
    public int FriendlyTowerLevel;
    public int OpenConditionStage;
    public int OpenConditionDay;
    public int FirstRewardCurrencyId;
    public int FirstRewardCurrencyValue;
    public int RepeatRewardCurrencyId;
    public int RepeatRewardCurrencyValue;
    public int TutorialId;
}

[MemoryPackable]
public partial class EventBubbleMarchStageWaveRecord_Raw
{
    public int Id;
    public int WaveGroup;
    public int WaveOrder;
    public string? WaveResourcePrefab;
    public string? WaveFrontResource;
    public int WaveResourceLength;
    public int SummonCurrencyGetValue;
    public int WaveSkipConditionStage;
    public int WaveSkipGiveCurrency;
    public int SummonTimeGroup;
    public int SummonMaxCount;
    public EBMEnemyTargetType EnemyTargetType;
    public int EnemyTargetId;
    public int EnemyTargetLevelAdd;
    public int MonsterLevelAdd;
    public int FriendlyTowerLevelAdd;
}

[MemoryPackable]
public partial class EventBubbleMarchTutorialRecord_Raw
{
    public int Id;
    public int HelptipId;
    public EventBubbleMarchTutorialCondition HelptipActiveCondition;
}

[MemoryPackable]
public partial class EventCanCollectListRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int FieldItemId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? IconResource;
    public int Order;
    public int CollectRank;
    public int PlayAnim1;
    public int PlayAnim1Ratio;
    public int PlayAnim2;
    public int PlayAnim2Ratio;
    public int PlayAnim3;
    public int PlayAnim3Ratio;
    public int PlayAnim4;
    public int PlayAnim4Ratio;
    public int PlayAnim5;
    public int PlayAnim5Ratio;
    public int CamBlendTime;
    public int CamEndDelay;
    public string? CollectSpawnHint;
}

[MemoryPackable]
public partial class EventCanCollectProgressRewardRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int Order;
    public int GoalValue;
    public int RewardId;
    public string? RewardDescription;
}

[MemoryPackable]
public partial class EventCatchCoinChallengeStageRecord
{
    public int Id;
    public int CharacterId;
    public int TimeDifficultGroup;
    public int Life;
    public string? Resource;
    public int PointLimit;
}

[MemoryPackable]
public partial class EventCatchCoinCharacterRecord
{
    public int Id;
    public string? Resource;
    public int MoveSpeed;
    public int DashRange;
    public int DashSpeed;
}

[MemoryPackable]
public partial class EventCatchCoinObjectGroupRecord
{
    public int Id;
    public int Group;
    public int ObjectId;
    public int SpawnRate;
}

[MemoryPackable]
public partial class EventCatchCoinObjectRecord
{
    public int Id;
    public string? Resource;
    public EventCatchCoinObjectType Type;
    public int TypeValue;
    public int BaseFallSpeed;
}

[MemoryPackable]
public partial class EventCatchCoinStoryStageRecord
{
    public int Id;
    public int CharacterId;
    public int ClearPoint;
    public string? ClearConditionDesc;
    public int TimeDifficultGroup;
    public int Life;
    public string? Resource;
}

[MemoryPackable]
public partial class EventCatchCoinTimeDifficultRecord
{
    public int Id;
    public int Group;
    public int Lv;
    public int PlayTimeMin;
    public int PlayTimeMax;
    public int SpawnTick;
    public int SpawnGroup;
    public int SpawnCountMin;
    public int SpawnCountMax;
    public int ObjectFallSpeedRate;
}

[MemoryPackable]
public partial class EventCE002MiniGameArchiveRecord
{
    public int Id;
    public int GroupId;
    public string? ArchiveName;
    public string? ArchiveDescription;
    public string? ArchiveImageResource;
}

[MemoryPackable]
public partial class EventCE002MiniGameDataRecord
{
    public int Id;
    public int GroupId;
    public List<EventCE002MiniGameDataOpenConditionObject>? OpenConditionList;
    public string? Ce002MinigameDataName;
    public int FieldNpcId;
    public string? FieldNpcLocationName;
    public string? FieldNpcHintResource;
    public int IndicatorDelayTime;
    public int StageId;
    public int EndArchive;
}

[MemoryPackable]
public partial class EventCE002MiniGameManagerRecord
{
    public int Id;
    public int EventId;
    public string? UiPrefab;
    public string? EnterScenario;
    public int Ce002MinigameDataGroup;
    public int EndAlertStartTime;
    public string? PlayerFullResource;
    public string? PlayerHit1Resource;
    public string? PlayerHit2Resource;
    public int PlayerHp;
    public int PlayerSizeRatio;
    public int PlayerMoveSpeed;
    public int PlayerAngleRotationalPerSec;
    public int EnermySearchDistance;
    public int HitDamageImmuneTime;
    public int PlayerProjectileDamage;
    public int PlayerProjectilePerSec;
    public int PlayerProjectileSpeed;
    public int PlayerProjectileDuration;
    public bool EnermyProjectileAutotarget;
    public int TutorialGroupId;
}

[MemoryPackable]
public partial class EventCE002MiniGameMonsterRecord
{
    public int Id;
    public string? MonsterResource;
    public CE002MiniGameMonsterType Ce002MinigameMonsterType;
    public int MonsterSizeRatio;
    public int MonsterHp;
    public int MoveSpeed;
    public int AngleRotationalPerSec;
    public bool FocusMuzzleTarget;
    public int EnermySearchDistance;
    public int EnermyShotDistance;
    public bool AutoTarget;
    public string? HitEffect;
    public string? DeadEffect;
    public CE002MiniGameProjectileType ProjectileType;
    public int ProjectileDamage;
    public int ProjectileSpeed;
    public int ProjectileHp;
    public int ProjectileDuration;
    public ShotTimingType ShotTiming;
    public int Cooltime;
    public int ShotDelay;
}

[MemoryPackable]
public partial class EventCE002MiniGameNPCRecord
{
    public int Id;
    public int EventFieldId;
    public string? ResourceId;
    public int InteractionDistance;
    public string? InteractionMarker;
    public int StageId;
    public int ConditionQuestId;
    public int MinimapHintRadius;
    public int MoveXCoordinate;
    public int MoveZCoordinate;
}

[MemoryPackable]
public partial class EventCE002MiniGameStageRecord
{
    public int Id;
    public int GroupId;
    public int StageIndex;
    public string? StagePrefab;
    public int TimeLimit;
    public int WaveDataId;
    public int ClearRewardId;
}

[MemoryPackable]
public partial class EventCE002MiniGameTutorialRecord
{
    public int Id;
    public int GroupId;
    public string? TutorialResource;
    public string? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventCE002MiniGameWaveDataRecord
{
    public int Id;
    public int WaveId;
    public int SpawnerIndex;
    public int MonsterGroup;
    public int MonsterId;
    public bool TargetMonster;
    public int SpawnMonsterGroupDead;
    public int SpawnAreaCondition;
    public int DespawnMonsterGroupDead;
    public int DelayTime;
}

[MemoryPackable]
public partial class EventCE003MiniGameCharacterRecord
{
    public int Id;
    public int GroupId;
    public string? ResourceId;
    public string? SiResourceId;
    public int MoveSpeed;
    public int ServingMoveSpeed;
    public int Hp;
    public int HpAutoRecoverConditionTime;
    public int HpAutoRecoverValue;
    public int HpZeroStunTime;
    public int HpZeroStunRecoverConditionTime;
    public int HpZeroStunRecoverValue;
    public int CharacterReturnTime;
    public int CharacterLocationIndex;
}

[MemoryPackable]
public partial class EventCE003MiniGameEventGameNoteRecord
{
    public int Id;
    public int GroupId;
    public int GoodNoteStart;
    public int GreatNoteStart;
    public int PerfectNoteStart;
    public int PerfectNoteEnd;
    public int GreatNoteEnd;
    public int GoodNoteEnd;
}

[MemoryPackable]
public partial class EventCE003MiniGameEventGameRecord
{
    public int Id;
    public int GroupId;
    public int NoteSet1;
    public int NoteSet2;
    public int NoteSet3;
    public int PerfectConditionPoint;
    public int GreatConditionPoint;
    public int GoodConditionPoint;
    public int AdditionalPoint;
    public int PerfectGetPoint;
    public int PerfectGetHp;
    public int GreatGetPoint;
    public int GreatGetHp;
    public int GoodGetPoint;
    public int GoodGetHp;
    public int StartIdleCount;
    public int TimingBarMoveTime;
    public int EndIdleCount;
    public int Ratio;
}

[MemoryPackable]
public partial class EventCE003MiniGameHelpTipRecord
{
    public int Id;
    public string? ViewId;
    public string? PrefabId;
    public int GroupId;
    public int PageNumber;
    public string? HelpTipTitle;
    public string? HelpTipImage;
    public string? HelpTipDescription;
}

[MemoryPackable]
public partial class EventCE003MiniGameManagerRecord
{
    public int Id;
    public int EventId;
    public string? UiPrefab;
    public int DailyRewardConditionValue;
    public int DailyRewardId;
    public string? FirstEnterScenarioGroupId;
    public int HelpTipGroupId;
    public int CookSpeedSet;
    public int EventGamePerfectPoint;
    public int EventGameGreatPoint;
    public int EventGameGoodPoint;
    public int StartCutSceneStartTime;
    public int EventGameStartCutSceneTime;
    public int EventGameEndCutSceneTime;
    public int GameEndAlertStartTime;
    public int DefaultCookSlotCount;
    public int MaidCallRatioValue;
}

[MemoryPackable]
public partial class EventCE003MiniGameMenuGroupRecord
{
    public int Id;
    public int GroupId;
    public int MenuId;
    public bool IsEventGameActive;
    public int OrderRatio;
}

[MemoryPackable]
public partial class EventCE003MiniGameMenuRecord
{
    public int Id;
    public string? ResourceId;
    public int CookTime;
}

[MemoryPackable]
public partial class EventCE003MiniGameMissionRecord
{
    public int Id;
    public EventCe003MiniGameMissionType MissionType;
    public EventCE003MiniGameConditionsType ConditionType;
    public int ConditionValue;
    public string? NameLocalkey;
    public int Order;
    public int RewardId;
}

[MemoryPackable]
public partial class EventCE003MiniGameNpcSpawnGroupRecord
{
    public int Id;
    public int GroupId;
    public int CoolTimeSetStartTime;
    public int VisitCoolTimeMin;
    public int VisitCoolTimeMax;
    public int EventNpcActiveProb;
    public int EventNpcForceVisitLimitTime;
    public int EventNpcForceVisitProb;
    public int CoolTimeSetEndTime;
    public int CallNpcGroupId;
    public int CallEventNpcGroupId;
}

[MemoryPackable]
public partial class EventCE003MiniGameNpcRecord
{
    public int Id;
    public int GroupId;
    public NpcType NpcType;
    public string? ResourceId;
    public int OrderMenuGroup;
    public int MoveSpeed;
    public int WaitTimeServing;
    public int WaitTimeEating;
    public int ServingReduceHpValue;
    public int ServingGreatReactionGetPoint;
    public int ServingGoodReactionGetPoint;
    public int ServingBadReactionGetPoint;
}

[MemoryPackable]
public partial class EventCE003MiniGameSkillRecord
{
    public int Id;
    public int SkillRank;
    public int ActiveConditionValue;
    public EventCE003MiniGameSkillType SkillType;
    public int SkillValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventCE003MiniGameStageRecord
{
    public int Id;
    public int StageLevel;
    public int EnterConditionValue;
    public string? StageLevelName;
    public string? StageLevelDesc;
    public string? StageLevelImg;
    public int TimeLimit;
    public int UseMaidGroup;
    public int NpcVisitSetGroupId;
    public int EventNpcVisitUpgradeSetGroupId;
    public int EventGameGroupId;
    public int CleanRatio;
    public int CleanReduceHpValue;
    public int CleanGetPoint;
    public int CleanTime;
}

[MemoryPackable]
public partial class EventCE004MiniGameBuffRecord_Raw
{
    public int Id;
    public int ManagerId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public CE004BuffCategory Category;
    public int Slot;
    public int BuffGroup;
    public int BuffLevel;
    public CE004BuffType BuffType;
    public int BuffValue;
    public int NeedUpgradeCurrency;
    public int ConditionSkillId;
}

[MemoryPackable]
public partial class EventCE004MiniGameCharacterRecord_Raw
{
    public int Id;
    public int ManagerId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? NameShortLocalkey;
    public string? ResourceId;
    public string? CharacterPrefab;
    public string? FailSpeechBubble;
    public int Attack;
    public int Hp;
    public int SkillGroup;
    public int EventDay;
    public int MiniGameStageClear;
}

[MemoryPackable]
public partial class EventCE004MiniGameChaSkillRecord_Raw
{
    public int Id;
    public int SkillGroup;
    public CE004SkillType SkillType;
    public int SkillDamage;
    public string? MuzzleEffect;
    public string? SkillEffect;
    public string? HitEffect;
    public int HitCount;
    public HitTiming HitTiming;
    public CE004MonsterPosition TargetPosition;
    public string? CutscenePrefab;
}

[MemoryPackable]
public partial class EventCE004MiniGameHelpTipListRecord_Raw
{
    public int Id;
    public int ManagerId;
    public int HelpTipGroupId;
    public string? HelpTipTitleLocalkey;
}

[MemoryPackable]
public partial class EventCE004MiniGameManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? UiPrefab;
    public string? EnterScenario;
    public int HelpTipId;
    public int DailyRewardPoint;
    public int DailyRewardId;
    public string? UpgradeCurrencyResource;
    public string? UpgradeCurrencyName;
    public string? UpgradeCurrencyDescription;
    public string? CharacterSpawnPosition;
    public int BurstMax;
    public int BurstChargeMin;
    public int BurstChargeMax;
    public int BurstPushTime;
    public int ChargingIncreaseAttack;
    public int ChallengeLastStageLevel;
    public int ChallengeRepeatStageLevel;
    public int ChallengeIncreaseMonsterAttack;
    public int ChallengeIncreaseMonsterHp;
    public int ChallengeWaveInterval;
    public int SkillMixCondition;
    public int SkillMixValue;
    public int SkillMixTime;
    public int SpeedControlStage;
    public int MaxPoint;
    public int HintBetweenTime;
    public bool IsArchive;
}

[MemoryPackable]
public partial class EventCE004MiniGameMissionRecord_Raw
{
    public int Id;
    public int ManagerId;
    public string? MissionLocalkey;
    public CE004MissionCategory MissionCategory;
    public CE004MissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public CE004MissionRewardType RewardType;
    public int RewardValue;
}

[MemoryPackable]
public partial class EventCE004MiniGameMonSkillRecord_Raw
{
    public int Id;
    public int SkillGroup;
    public CE004SkillType SkillType;
    public int SkillDamage;
    public string? SkillEffect;
    public string? HitEffect;
    public string? HintEffect;
    public CE004MonsterPosition HintPosition;
}

[MemoryPackable]
public partial class EventCE004MiniGameMonsterRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? MonsterPrefab;
    public int Attack;
    public int Hp;
    public int SkillGroup;
    public string? DeadEffect;
}

[MemoryPackable]
public partial class EventCE004MiniGameSkillPositionRecord_Raw
{
    public int Id;
    public int Group;
    public int Order;
    public string? PositionLocalkey;
    public List<CE004SkillPositionGroupData_Raw>? Ce004SkillPositionGroupData;
}

[MemoryPackable]
public partial class EventCE004MiniGameSkillTypeRecord_Raw
{
    public int Id;
    public CE004SkillCategory Category;
    public CE004SkillType SkillType;
    public string? NameLocalkey;
    public string? ResourceId;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageSeedRecord_Raw
{
    public int Id;
    public int Group;
    public int HintCount;
    public List<CE004SeedSkillTypeGroupData_Raw>? Ce004SeedSkillTypeGroupData;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageRecord_Raw
{
    public int Id;
    public int ManagerId;
    public CE004StageDifficulty StageDifficulty;
    public int StageLevel;
    public string? ButtonLocalkey;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public string? StagePrefab;
    public string? MainCamera;
    public string? EnemyCamera;
    public int BattleActionZoomInFov;
    public int OutQuadTime;
    public List<CE004OpenConditionTypeGroupData_Raw>? Ce004OpenConditionTypeGroupData;
    public string? MonsterSpawnPosition;
    public int SpawnMonsterId;
    public int SpawnMonsterScale;
    public int ClearRewardCount;
    public int DelayTime;
    public int HintTime;
    public int BattleTime;
    public int BurstTime;
    public int TimeGroup;
    public CE004StageSeedType SeedType;
    public int SeedGroup;
    public int HelpTipId;
    public int SkillPositionGroup;
}

[MemoryPackable]
public partial class EventCE004MiniGameStageTimeRecord_Raw
{
    public int Id;
    public int Group;
    public CE004StageSeedRepeatType RepeatType;
    public int BattleCountCondition;
    public int HintTimeValue;
    public int BattleTimeValue;
    public int BurstTimeValue;
}

[MemoryPackable]
public partial class EventClimbingChallengeStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public float DefaultObjectSpeed;
    public int DefaultObtainPoint;
    public int Life;
    public int HitImmuneTimeMs;
    public int JumpMotionLengthMs;
    public float JumpHeight;
    public int AutoIncreaseDifficultySecond;
    public int FirstObjectGenerateDistance;
}

[MemoryPackable]
public partial class EventClimbingStoryStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public int ClearTimeSecond;
    public float DefaultObjectSpeed;
    public int DefaultObtainPoint;
    public int Life;
    public int HitImmuneTimeMs;
    public int JumpMotionLengthMs;
    public float JumpHeight;
    public int AutoIncreaseDifficultySecond;
    public int FirstObjectGenerateDistance;
    public string? ClearConditionDesc;
}

[MemoryPackable]
public partial class EventClimbingTimeDifficultRecord
{
    public int Id;
    public int GroupId;
    public int DifficultyStep;
    public int PlayTimeMin;
    public int PlayTimeMax;
    public int SpawnDistanceMin;
    public int SpawnDistanceMax;
    public int SpawnLine0Ratio;
    public int SpawnLine1Ratio;
    public int SpawnLine2Ratio;
    public float DifficultyPlaySpeed;
    public float AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventCollectManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public FieldCollectContentsType ContentsType;
    public string? UiPrefab;
}

[MemoryPackable]
public partial class EventDatingSimAlbumRecord
{
    public int Id;
    public int ManagerId;
    public int Order;
    public EventDatingSimAlbumCategory Category;
    public int CategoryValue;
    public string? AlbumName;
    public string? AlbumDescription;
}

[MemoryPackable]
public partial class EventDatingSimArchiveManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public int ExistManagerId;
}

[MemoryPackable]
public partial class EventDatingSimDialogEventRecord
{
    public string? Id;
    public int ManagerId;
    public int Order;
    public EventDatingSimDialogEventType DialogEventType;
    public EventDatingSimDialogSceneType DialogType;
    public string? ScenarioTitleLocalkey;
    public string? ScenarioDialogId;
    public string? CutsceneImageForUi;
    public int SpawnLostItemId;
    public int HeroineAlbumId;
}

[MemoryPackable]
public partial class EventDatingSimDialogScheduleRecord
{
    public int Id;
    public int ManagerId;
    public int Day;
    public string? Location;
    public string? DialogEventAppearDaytime;
    public string? DialogEventAppearEvening;
    public string? DialogEventAppearNight;
}

[MemoryPackable]
public partial class EventDatingSimHelpMessageRecord
{
    public string? Id;
    public int ManagerId;
    public EventDatingSimHelpMessagePageType PageType;
    public EventDatingSimHelpMessageType HelpMessageType;
    public string? HelpMessageIconResource;
    public string? HelpMessageLocale;
}

[MemoryPackable]
public partial class EventDatingSimHeroineAlbumRecord
{
    public int Id;
    public int GroupId;
    public int ManagerId;
    public int Order;
    public bool IsHeroineGroup;
    public string? TargetHeroineId;
    public int CompleteReward;
}

[MemoryPackable]
public partial class EventDatingSimHeroineConditionRecord
{
    public string? Id;
    public int ManagerId;
    public bool IsHeroineGroup;
    public string? TargetHeroineId;
    public int EventConditionDay;
    public EventDatingSimTime EventConditionTime;
    public string? EventConditionLocation;
    public int EventConditionRelationLvMin;
    public int EventConditionRelationLvMax;
    public string? EventConditionDialogEvent;
    public string? EventConditionSelectionEvent;
    public string? DialogEventId;
}

[MemoryPackable]
public partial class EventDatingSimHeroineGroupRecord
{
    public string? Id;
    public int ManagerId;
    public string? HeroineGroupName;
    public string? HeroineGroupPortraitResource;
    public string? HeroineGroupPortraitSmallResource;
    public string? GroupIcon;
    public List<HeroineIdListData>? HeroineIdList;
    public List<IsGroupEventRelationLVListData>? IsGroupEventRelationLvList;
    public bool IsGroupEventHiddenEnding;
}

[MemoryPackable]
public partial class EventDatingSimHeroineLVRecord
{
    public int Id;
    public int ManagerId;
    public int RelationLevel;
    public int TargetRelationPoint;
}

[MemoryPackable]
public partial class EventDatingSimHeroineScheduleRecord
{
    public int Id;
    public int ManagerId;
    public int Day;
    public string? Location;
    public bool IsHeroineGroupDaytime;
    public string? HeroineAppearDaytime;
    public bool IsHeroineGroupEvening;
    public string? HeroineAppearEvening;
    public bool IsHeroineGroupNight;
    public string? HeroineAppearNight;
}

[MemoryPackable]
public partial class EventDatingSimHeroineRecord
{
    public string? Id;
    public int ManagerId;
    public int Order;
    public string? PortraitResource;
    public string? SmallPortraitResource;
    public string? HeroineName;
    public int MaxRelationLv;
    public int RelationOverflowTargetPoint;
    public bool IsContainInGroup;
    public string? RelationSubtitleLv0;
    public List<RelationSubtitleLVListData>? RelationSubtitleLvList;
    public string? RelationSubtitleLvMax;
}

[MemoryPackable]
public partial class EventDatingSimLocationRecord
{
    public string? Id;
    public int ManagerId;
    public int Index;
    public string? LocationName;
    public string? LocationResource;
    public string? LocationOpenDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimLostItemRecord
{
    public int Id;
    public int ManagerId;
    public string? LostItemName;
    public string? LostItemDescription;
    public string? LostItemHint;
    public string? LostItemResource;
    public string? LostItemFieldResource;
    public int InteractionDistance;
    public string? InteractionMarker;
    public int MinimapGuideRadius;
    public int MinimapGuideTransformXCoordinate;
    public int MinimapGuideTransformYCoordinate;
}

[MemoryPackable]
public partial class EventDatingSimManagerRecord
{
    public int Id;
    public int EventId;
    public string? UiPrefabKeyword;
    public string? EventTransition;
    public int TotalDay;
    public DateTime StartDateForUi;
    public int StaminaAutoChargeId;
    public DateTime InfinityModActiveRealtime;
    public int DailyRewardRequireStamina;
    public int DailyRewardId;
    public string? SpecialCutscenePrefab;
    public int SpecialCutsceneCompleteRewardWallpaperId;
    public string? FirstEnterScenario;
    public string? DefaultDialogEvent;
    public string? ForcedMyroomReturnDialogEvent;
    public string? DefaultMyroomHomecomingDialogEvent;
    public string? EpilogueDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimMyroomScheduleRecord
{
    public int Id;
    public int ManagerId;
    public int Day;
    public string? MyroomEventAwake;
    public string? MyroomEventOuting;
    public string? MyroomEventHomecoming;
}

[MemoryPackable]
public partial class EventDatingSimPhotoAlbumRecord
{
    public int Id;
    public int GroupId;
    public int ManagerId;
    public int Order;
    public string? CutsceneResource;
    public string? CutsceneTitleLocalkey;
    public string? UnlockConditionDialogEvent;
}

[MemoryPackable]
public partial class EventDatingSimRelationConditionRecord
{
    public string? Id;
    public int ManagerId;
    public bool IsConsumeStamina;
    public bool IsHeroineGroup;
    public string? TargetHeroineId;
    public List<RelationAppearHeroineConditionListData>? RelationAppearHeroineConditionList;
    public List<RelationAppearDialogConditionListData>? RelationAppearDialogConditionList;
    public List<RelationAppearSelectionConditionListData>? RelationAppearSelectionConditionList;
    public int ForcedAppearStartDay;
    public string? ForcedAppearLocation;
    public EventDatingSimTime ForcedAppearTime;
    public string? DialogEventId;
    public bool IsUseLostItem;
    public int LostItemId;
    public string? LostItemOccurDialogEventId;
    public string? LostItemRequireDialogEventId;
    public EventDatingSimRelationResultEventType RelationResultEventType;
}

[MemoryPackable]
public partial class EventDatingSimSpecialCutSceneRecord
{
    public int Id;
    public int ManagerId;
    public int Index;
    public string? HeroineResourceStep2ChangeCondition;
    public string? HeroineResourceStep3ChangeCondition;
}

[MemoryPackable]
public partial class EventDatingSimTutorialPageRecord
{
    public int Id;
    public int GroupId;
    public int ManagerId;
    public int ArchiveManagerId;
    public int PageOrder;
    public string? ImageResource;
    public string? PageTitleLocalkey;
    public string? TutorialLocalkey;
}

[MemoryPackable]
public partial class EventDatingSimTutorialRecord
{
    public int Id;
    public int ManagerId;
    public int ArchiveManagerId;
    public int TutorialPageGroupId;
    public EventDatingSimTutorialType TutorialType;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class EventDessertRushManagerRecord
{
    public int Id;
    public int EventId;
    public bool IsArchiveEvent;
    public int OpenCondition;
    public string? EnterScenario;
    public int DailyRewardPoint;
    public int DailyRewardId;
    public int StepUpRewardGroupId;
    public int TutorialGroupId;
    public int TimeLimit;
    public int GainPoint;
    public int GainPointX2Combo;
    public int GainPointX3Combo;
    public int GainPointX4Combo;
    public int GainPointX5Combo;
    public int GainFeverGauge;
    public int MaxFeverGauge;
    public int DecreaseFeverGauge;
    public int NextFeverNeedCount;
    public int FeverLv1Ratio;
    public int FeverLv2Ratio;
    public int FeverLv3Ratio;
    public int FeverLv4Ratio;
    public int PenaltyTime;
    public int SpecialSpawnCount;
    public int SpecialSpawnPrepare;
    public int SpawnSpecialId;
    public int SpecialChangeDessertCount;
    public int EndImminentAlertStartTime;
    public int Level01StartComboCount;
    public int Level01WaveId;
    public int Level02StartComboCount;
    public int Level02WaveId;
    public int Level03StartComboCount;
    public int Level03WaveId;
    public int Level04StartComboCount;
    public int Level04WaveId;
    public int Level05StartComboCount;
    public int Level05WaveId;
    public int DRankTargetPoint;
    public int CRankTargetPoint;
    public int BRankTargetPoint;
    public int ARankTargetPoint;
    public int SRankTargetPoint;
}

[MemoryPackable]
public partial class EventDessertRushObject
{
    public int Id;
    public int Group;
    public string? ResourceId01;
    public string? ResourceId02;
}

[MemoryPackable]
public partial class EventDessertRushStepUpRewardRecord
{
    public int Id;
    public int GroupId;
    public int Step;
    public int TargetPoint;
    public int RewardId;
}

[MemoryPackable]
public partial class EventDessertRushTutorialRecord
{
    public int Id;
    public int GroupId;
    public string? TutorialResource;
    public string? TutorialDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDessertRushWaveRecord
{
    public int Id;
    public int Object01Id;
    public int Object01AppearanceProbability;
    public int Object02Id;
    public int Object02AppearanceProbability;
    public int Object03Id;
    public int Object03AppearanceProbability;
    public int Object04Id;
    public int Object04AppearanceProbability;
    public int Object05Id;
    public int Object05AppearanceProbability;
    public int Object06Id;
    public int Object06AppearanceProbability;
    public int Object07Id;
    public int Object07AppearanceProbability;
    public int Object08Id;
    public int Object08AppearanceProbability;
    public int Object09Id;
    public int Object09AppearanceProbability;
}

[MemoryPackable]
public partial class EventDiceBoardRecord
{
    public int Id;
    public int GroupId;
    public int SlotId;
    public DiceEventRotationType MoveRotation;
    public DiceEventRotationType MoveRotationReverse;
    public DiceEventEventType EventType;
    public int GoTo;
    public int RewardId;
    public int GetHeropower1;
    public int GetHeropower2;
    public int GetHeropower3;
    public int GetHeropower1Rate;
    public int GetHeropower2Rate;
    public int GetHeropower3Rate;
}

[MemoryPackable]
public partial class EventDiceResourceRecord
{
    public int Id;
    public int GroupId;
    public string? SlotType;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? AniResource;
    public string? ImageResource;
}

[MemoryPackable]
public partial class EventDiceRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? AlbumName;
    public string? AlbumDescription;
    public bool IsArchive;
    public int BoardId;
    public int ResourceId;
    public int EventId;
    public string? UiPrefab;
    public string? FirstEnterScenarioGroupId;
    public int EventItemId;
    public int AlbumCategoryGroup;
    public int HelpTipViewSubId;
    public int MaxGauge;
    public int MaxClear;
    public int DiceConsume;
    public int PlayerMoveTime;
    public int BoardFinishGauge;
    public List<DiceClearRewardData>? DiceClearRewardList;
    public int ClearRewardIdRepeat;
    public List<DiceClearScenarioGroupData>? DiceClearScenarioGroupList;
    public string? MaxgaugeStepLocalkey;
    public string? MaxgaugeStepRepeatLocalkey;
}

[MemoryPackable]
public partial class EventDiceTileLocaleRecord
{
    public int Id;
    public int GroupId;
    public string? SlotType;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventDragonDungeonRunCharacterRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? NameLocale;
    public string? OutgameCharacterResource;
    public string? CharacterResource;
    public string? SkillNameLocale;
    public string? SkillDescriptionLocale;
    public string? CharacterIcon;
    public string? SkillIcon;
    public int OpenDate;
    public EventDragonDungeonRunCharacterUnlockType OpenCondition;
    public int OpenConditionValue;
    public string? OpenConditionLocale;
    public int StartHp;
    public EventDragonDungeonRunCharacterSkillType SkillType;
    public int SkillUseCount;
    public int SkillFadeInTime;
    public int SkillDuration;
    public int SkillFadeOutTime;
    public int SkillCooltime;
    public string? SkillFxResource;
    public string? ProjectileResource;
    public int ProjectileSpeed;
}

[MemoryPackable]
public partial class EventDragonDungeonRunCutSceneRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? CutsceneResource;
    public string? CutsceneName;
    public string? CutsceneDescription;
    public EventDragonDungeonRunCutScenePrintTiming CutscenePrintTiming;
    public EventDragonDungeonRunDeadCutScenePrintType CutscenePrintType;
    public bool IsAppearInFRank;
    public bool IsAppearInDRank;
    public bool IsAppearInCRank;
    public bool IsAppearInBRank;
    public bool IsAppearInARank;
    public bool IsAppearInSRank;
}

[MemoryPackable]
public partial class EventDragonDungeonRunManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EnterScenario;
    public int DailyRewardPoint;
    public int DailyRewardId;
    public int MissionGroupId;
    public int TutorialId;
    public int CutsceneGroupId;
    public int ScenarioGroupId;
    public int UseCharacterGroupId;
    public int UseWaveGroupId;
    public int SkipEarlyPhase01OpenDate;
    public int SkipEarlyPhase01OpenDistance;
    public int SkipEarlyPhase01AdjustDistance;
    public int SkipEarlyPhase01AdjustGold;
    public int SkipEarlyPhase01StartWave;
    public int SkipEarlyPhase02OpenDate;
    public int SkipEarlyPhase02OpenDistance;
    public int SkipEarlyPhase02AdjustDistance;
    public int SkipEarlyPhase02AdjustGold;
    public int SkipEarlyPhase02StartWave;
    public int CharacterSpeedTilePerSecond;
    public int KnockBackDelayTime;
    public int SkillDelayTime;
    public int InvincibleTime;
    public int ChaseMonsterDeadDistance;
    public int DragonSpawnDistance;
    public int WaitingDragonBreathObjectId;
    public int DragonSpawnTime;
    public int PresetPreWarmTime;
    public int MoveMimicSpeedTilePerSecond;
    public int TrackMonsterDeadTime;
    public int DeadCutscenePrintTime;
    public int DeadCutsceneSkipAbleTime;
    public int DRankTargetPoint;
    public int CRankTargetPoint;
    public int BRankTargetPoint;
    public int ARankTargetPoint;
    public int SRankTargetPoint;
}

[MemoryPackable]
public partial class EventDragonDungeonRunMissionRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? MissionLocalkey;
    public EventDragonDungeonRunMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public int RewardId;
}

[MemoryPackable]
public partial class EventDragonDungeonRunObjectRecord_Raw
{
    public int Id;
    public string? ObjectResource;
    public EventDragonDungeonRunObjectType ObjectType;
    public int ObjectColliderLeftSize;
    public int ObjectColliderRightSize;
    public int ObjectColliderUpSize;
    public int ObjectColliderDownSize;
    public int MovestepstoneSize;
    public int SpawnObjectId;
    public int PreactionTime;
    public int DragonFireTime;
    public int ObjectDamage;
    public EventDragonDungeonRunKnockBackDirection KnockBackDirection;
    public int NeedleUpTime;
    public int NeedleUpToDownTime;
    public int NeedleDownTime;
    public int NeedleDownToUpTime;
    public int GuardRange;
    public int ChaseDelayTime;
    public int GiveGoldAmount;
    public int AppearancePercent;
}

[MemoryPackable]
public partial class EventDragonDungeonRunPresetRecord_Raw
{
    public int Id;
    public int GroupId;
    public int RawOrder;
    public List<string>? TileResource;
    public bool FallableTile;
    public int TileO1UseSpawnerGroupId;
    public int Tile01UseObjectId;
    public int Tile02UseObjectId;
    public int Tile03UseObjectId;
    public int Tile04UseObjectId;
    public int Tile05UseObjectId;
    public int Tile06UseObjectId;
    public int Tile07UseObjectId;
    public int TileO2UseSpawnerGroupId;
}

[MemoryPackable]
public partial class EventDragonDungeonRunScenarioRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? ScenarioDialogGroupId;
    public int ScenarioUnlockDay;
}

[MemoryPackable]
public partial class EventDragonDungeonRunSpawnerRecord_Raw
{
    public int Id;
    public int GroupId;
    public int UseObjectId01;
    public int UseObjectId02;
    public int UseObjectId03;
    public int ObjectSpeedTilePerSecond;
    public bool UseWarningSign;
    public int WarningSignTime;
    public int ObjectRepeatIntervalMin;
    public int ObjectRepeatIntervalMax;
}

[MemoryPackable]
public partial class EventDragonDungeonRunWaveRecord_Raw
{
    public int Id;
    public int GroupId;
    public bool IsInfinity;
    public bool IsRepeat;
    public int RepeatCount;
    public string? LevelUpLocale;
    public List<PresetGroupData_Raw>? PresetGroupData;
}

[MemoryPackable]
public partial class EventDungeonDifficultRecord
{
    public int Id;
    public int Group;
    public int Order;
    public string? Name;
    public EventDungeonOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public int StageGroup;
}

[MemoryPackable]
public partial class EventDungeonSpotBattleRecord
{
    public int Id;
    public List<EventDungeonOpenConditionObject>? OpenConditionList;
    public string? ShortName;
    public RewardType TicketItemType;
    public int TicketItemId;
    public int TicketItemCount;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public bool SpotAutocontrol;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public int SpotId;
    public int FirstClearRewardId;
    public int ClearRewardId;
    public string? EnterScenario;
    public string? ExitScenario;
    public int FixedPlayCharacterId;
    public int CharacterLv;
    public QuickBattleType QuickBattleType;
    public int QuickBattleTryMaxCount;
}

[MemoryPackable]
public partial class EventDungeonStageRecord
{
    public int Id;
    public int Group;
    public int Step;
    public string? StageName;
    public EventDungeonContentsType StageContentsType;
    public int StageId;
    public bool IsRepeatClear;
    public bool IsGuideFieldChange;
    public string? MapChangeGuideLocalkey;
    public string? NpcChangeGuideLocalkey;
}

[MemoryPackable]
public partial class EventDungeonRecord
{
    public int Id;
    public string? PartName;
    public int BonusRewardCharacterGroup;
    public int BonusRewardId;
    public int DifficultGroup;
}

[MemoryPackable]
public partial class EventEvaMiniGameActivityConfigRecord_Raw
{
    public int EventId;
    public int ChgLobbyBgWhenPassStoryId;
    public int DefaultMecha;
    public int DefaultWingman;
    public string? FirstEnterScenarioGroupId;
}

[MemoryPackable]
public partial class EventEvaMiniGameBookProcessRecord_Raw
{
    public int Id;
    public int EventId;
    public EvaBookType BookType;
    public int Num;
    public int RewardId;
}

[MemoryPackable]
public partial class EventEvaMiniGameBookRecord_Raw
{
    public int BookId;
    public int EventId;
    public EvaBookType BookType;
    public int BookGroup;
    public int StageId;
    public int DetailinfoId;
}

[MemoryPackable]
public partial class EventEvaMiniGameCharacterRecord_Raw
{
    public int Id;
    public int EventId;
    public string? Name;
    public string? Description;
    public List<string>? IconAsset;
    public List<string>? CharacterAsset;
    public string? UnlockLevel;
    public string? UnlockDescription;
    public List<string>? WeaponSets;
    public string? CharacterSkill;
    public List<string>? SkillParams;
    public List<int>? SkillPower;
    public double DamageCoefficient;
    public List<double>? FluctuationCoefficient;
}

[MemoryPackable]
public partial class EventEvaMiniGameCollectionRecord_Raw
{
    public int Id;
    public int EventId;
    public string? Name;
    public string? LockName;
    public string? UiDescription;
    public string? UiLockDescription;
    public string? UiIcon;
}

[MemoryPackable]
public partial class EventEvaMiniGameEnemySkillRecord_Raw
{
    public int Id;
    public int EventId;
    public string? UiIcon;
    public string? UiVideo;
    public string? Description;
    public string? GunAsset;
}

[MemoryPackable]
public partial class EventEvaMiniGameEnemyRecord_Raw
{
    public int Id;
    public int EventId;
    public string? Name;
    public string? Description;
    public string? IconAsset;
    public string? CharacterAsset;
    public int UnlockLevel;
    public string? UnlockDescription;
    public bool Boss;
    public string? UiDescription;
    public string? UiIcon;
    public List<int>? Skills;
    public int Hp;
    public int Score;
    public string? ScoreLoot;
    public string? BuffLoot;
    public string? BuffLootWeightAsset;
    public List<string>? PreviewSkillIcons;
    public List<string>? PreviewSkills;
    public List<string>? PreviewSkillNames;
}

[MemoryPackable]
public partial class EventEvaMiniGameItemRecord_Raw
{
    public int ItemId;
    public int EventId;
    public EvaItemType ItemType;
    public string? ItemResource;
    public string? ItemName;
    public string? ItemDescription;
    public string? ItemDescriptionPlay;
    public int UnlockStage;
    public string? UiCode;
    public List<string>? PreviewSkillNames;
}

[MemoryPackable]
public partial class EventEvaMiniGameMissionRecord_Raw
{
    public int MissionId;
    public int EventId;
    public string? MissionLocalkey;
    public EvaMissionCategory MissionCategory;
    public EvaMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public EvaMissionRewardType RewardType;
    public int RewardValue;
}

[MemoryPackable]
public partial class EventEvaMiniGameSkillEffectRecord_Raw
{
    public int Id;
    public EvaSkillEffectType EffectType;
    public int StrengthenSize;
}

[MemoryPackable]
public partial class EventEvaMiniGameSkillRecord_Raw
{
    public int SkillId;
    public int EventId;
    public int SkillGroup;
    public List<need_skill_Raw>? NeedSkillArray;
    public int CostId;
    public int CostNum;
    public int Lv;
    public List<int>? Effect;
    public string? UiName;
    public string? UiDes;
    public string? UiIcon;
}

[MemoryPackable]
public partial class EventEvaMiniGameStageRecord_Raw
{
    public int StageId;
    public int EventId;
    public DateTime StartDate;
    public DateTime EndDate;
    public EvaStageType StageType;
    public int NeedStageId;
    public int OpenConditionEventStoryStage;
    public int OneStarScore;
    public int TwoStarScore;
    public int ThreeStarScore;
    public List<fix_reward_Raw>? FixRewardArray;
    public List<first_reward_Raw>? FirstRewardArray;
    public string? NameLocalkey;
    public string? BossIcon;
    public string? LevelAssetName;
    public string? EnterScenario;
    public string? ExitScenario;
}

[MemoryPackable]
public partial class EventEvaMiniGameTutorialRecord_Raw
{
    public int Id;
    public string? Title;
    public string? Description;
    public string? ShowAsset;
    public int MinUnlockedLevel;
}

[MemoryPackable]
public partial class EventEvaMiniGameWingmanRecord_Raw
{
    public int Id;
    public int EventId;
    public string? CharacterAsset;
    public List<int>? WeaponSets;
}

[MemoryPackable]
public partial class EventEvaMiniGameWingmanTeamRecord_Raw
{
    public int Id;
    public int EventId;
    public string? Name;
    public string? Description;
    public string? IconAsset;
    public string? UnlockLevel;
    public string? UnlockDescription;
    public string? Demonstration;
    public string? Group;
    public double DamageCoefficient;
    public List<double>? FluctuationCoefficient;
}

[MemoryPackable]
public partial class EventFieldCharacterCustomRecord
{
    public int Id;
    public string? VoiceFieldGoSoundCue;
    public string? VoiceFieldTouchSoundCue;
}

[MemoryPackable]
public partial class EventFieldCooperationRecord
{
    public int Id;
    public string? MonsterNameLocalkey;
    public string? MonsterImage;
    public int ElementId;
}

[MemoryPackable]
public partial class EventFieldEventTargetRecord
{
    public int Id;
    public int EventFieldId;
    public string? NpcLocalkeyName;
    public string? NpcLocalkeyContents;
    public EventFieldNPCType NpcType;
    public int ResourceId;
    public int CostumeIndex;
    public string? ForcedNameTagResource;
    public EventTargetEventType ContentsType;
    public int ContentsId;
    public bool DailyRespawn;
    public int DespawnNpcRespawnTime;
    public int InteractionDistance;
    public string? ForcedInteractionMarker;
}

[MemoryPackable]
public partial class EventFieldFixedSDCharacterRecord
{
    public int Id;
    public int GroupId;
    public EventFieldSDCharacterUsageType UsageType;
    public int Slot;
    public FieldFixedSDCharacterReferenceType TableReferenceType;
    public int ResourceId;
    public int CostumeIndex;
    public string? ScenarioCharacterId;
    public int CharacterCustomId;
}

[MemoryPackable]
public partial class EventFieldNoticePopupRecord_Raw
{
    public int Id;
    public int EventFieldId;
    public EventFieldNoticePopupPrintConditionType PrintConditionType;
    public int PrintConditionValue;
    public string? PopupUiPrefab;
    public string? TitleLocalkey;
    public string? SubTitleLocalkey;
    public string? DescriptionLocalkey;
    public string? ImageResource;
}

[MemoryPackable]
public partial class EventFieldRecollectionHubRecord
{
    public int Id;
    public int GroupId;
    public EventFieldRecollectionCategoryType RecollectionCategoryType;
    public EventFieldRecollectionScenarioContentsType ScenarioContentsType;
    public int ScenarioEventId;
    public int ArchiveEventId;
    public int RecollectionValue;
    public string? RecollectionNameLocalkey;
    public string? RecollectionDescriptionLocalkey;
    public string? RecollectionResource;
    public string? AlbumPageResource;
}

[MemoryPackable]
public partial class EventFieldRecollectionMemorialRecord
{
    public int Id;
    public int GroupId;
    public int MemorialSeriesId;
    public MemorialSeriesCategory MemorialCategoryIconResource;
}

[MemoryPackable]
public partial class EventFieldRidingPresetRecord
{
    public int Id;
    public int EventFieldId;
    public int ChangeProgressEvent;
    public int ChangeRidingValue;
}

[MemoryPackable]
public partial class EventFieldRidingRecord
{
    public int Id;
    public NaviType NaviType;
    public bool SquadRidingTogether;
    public string? SquadChangeRidingEffect;
    public string? RidingChangeSquadEffect;
    public FieldPlayerSquadType RidingPlayerSquadType;
    public int RidingPlayerSquadValue;
    public int RidingPlayerSquadSpeed;
    public int RidingSdCharacterSize;
    public int ChangeDelayTime;
    public string? RidingResource;
    public int RidingResourceSize;
    public List<riding_contents_value>? ContentsValue;
}

[MemoryPackable]
public partial class EventFieldRecord
{
    public int Id;
    public int EventId;
    public string? FieldDesignMap;
    public string? FieldArtMapStandard;
    public string? FieldHud;
    public string? FieldFirstEntryResource;
    public int LinkEventPassId;
    public int ProgressEventGroupId;
    public bool IsUseRoamingNpc;
    public int RoamingNpcLimit;
    public EventFieldRoamingNPCType RoamingNpcType;
    public int RoamingNpcFixedSdCharacterGroupId;
    public int RoamingNpcSpeedMinimum;
    public int RoamingNpcSpeedMaximum;
    public FieldPlayerSquadType PlayerSquadType;
    public int PlayerSquadValue;
    public int PlayerSquadSpeed;
    public int SdCharacterSize;
    public int EventMissionGroup;
    public int RecollectionHubGroupId;
    public string? FieldEnterScenario;
    public int FieldEnterScenarioStoryEventId;
    public List<EventFieldCurrencyData>? EventFieldCurrencyList;
}

[MemoryPackable]
public partial class EventGachaBoardBoardRecord_Raw
{
    public int Id;
    public int Group;
    public int HorizontalSlotValue;
    public int VerticalSlotValue;
    public int Number;
    public bool IsRepeat;
    public int SlotRewardGroupId;
    public int RewardId;
}

[MemoryPackable]
public partial class EventGachaBoardfeverRecord_Raw
{
    public int Id;
    public int Group;
    public int Number;
    public int SlotOpenValue;
    public int BonusValue;
}

[MemoryPackable]
public partial class EventGachaBoardManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public int TicketItemId;
    public int TicketItemCount;
    public int BoardGroupId;
    public int BoardChangeCount;
    public int DailyRewardValue;
    public int MissionGroupId;
    public int MultiReceiveCount;
    public string? UiPrefab;
    public int FeverGroupId;
}

[MemoryPackable]
public partial class EventGachaBoardMissionRecord_Raw
{
    public int Id;
    public int Group;
    public int Order;
    public EventGachaBoardMissionMissionCondition MissionCondition;
    public int MissionConditionTarget;
    public int MissionConditionValue;
    public string? DescriptionLocalkey;
    public int RewardId;
}

[MemoryPackable]
public partial class EventGachaBoardRewardRecord_Raw
{
    public int Id;
    public int Group;
    public int Rank;
    public int SlotCount;
    public int Order;
    public int RewardId;
}

[MemoryPackable]
public partial class EventInAppShopProductRecord
{
    public int Id;
    public int Group;
    public int Order;
    public int PackageGroupId;
    public ShopBuyLimitType BuyLimitType;
    public int BuyLimitCount;
    public bool IsFree;
    public int MidasProductId;
}

[MemoryPackable]
public partial class EventInAppShopRecord
{
    public int Id;
    public string? Name;
    public string? Description;
    public RewardType ShopItemType;
    public int ShopItemId;
    public int ProductGroup;
    public string? BgResourceTable;
    public string? BgResourceId;
}

[MemoryPackable]
public partial class EventManagerRecord
{
    public int Id;
    public EventSystemType EventSystemType;
    public string? EventShortcutId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public ScheduleType ScheduleType;
    public string? ScheduleValue;
    public string? EventDisableLocale;
    public string? EventResourceId;
    public string? EventThumbnailResourceTable;
    public string? EventThumbnailResourceId;
    public string? ThumbnailColor;
    public string? EventBannerResourceTable;
    public string? EventBannerResourceId;
    public int EventOrder;
    public bool IsPopup;
    public EventActiveType ActiveType;
    public bool IsHidden;
    public int ParentsEventId;
    public int SetField;
    public BannerPrintType BannerPrintType;
}

[MemoryPackable]
public partial class EventMapChangePresetRecord
{
    public int Id;
    public string? ArtMapChangeValue;
    public string? HudChangeValue;
    public string? InteractionMarkerChangeValue;
    public string? NameTagChangeValue;
    public string? SkyBoxChangeValue;
    public string? PpChangeValue;
}

[MemoryPackable]
public partial class EventMissionCategoryRecord
{
    public int Id;
    public int Group;
    public int Order;
    public string? Name;
    public string? Description;
    public int MissionListGroup;
    public string? PointResource;
    public EventMissionInitType InitType;
}

[MemoryPackable]
public partial class EventMissionInfoRecord
{
    public int Id;
    public string? UiPrefab;
}

[MemoryPackable]
public partial class EventMissionListRecord
{
    public int Id;
    public int Group;
    public bool IsMain;
    public int Order;
    public int Step;
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
    public bool PrintValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int RewardPointValue;
    public int RewardId;
    public bool IsStack;
}

[MemoryPackable]
public partial class EventMVGBalloonRecord_Raw
{
    public int Id;
    public int GroupId;
    public EventMVGBalloonTypeData BalloonType;
    public int Order;
    public bool Randomize;
    public int BalloonShowTime;
    public int WaitTimeAfterEndBalloon;
    public string? LocaleName;
    public string? LocaleKey;
}

[MemoryPackable]
public partial class EventMVGChallengeLevelSettingRecord_Raw
{
    public int Id;
    public int ChallengeStep;
    public int LevelId;
}

[MemoryPackable]
public partial class EventMVGChapterInfoRecord_Raw
{
    public int Id;
    public int ChapterId;
    public string? ChapterName;
    public string? ChapterImg;
}

[MemoryPackable]
public partial class EventMVGCharacterCustomActionRecord_Raw
{
    public int Id;
    public int GroupId;
    public int TimelineValue;
    public EventMVGCharacterCustomActionTypeData ActionType;
    public List<EventMVGCharacterCustomActionValueData_Raw>? ActionValue;
    public string? SetMuzzleFx;
    public EventMVGCharacterCustomActionMuzzleTypeData SetMuzzle;
    public string? ProjResourceId;
    public string? ProjResourceHitId;
    public EventMVGCharacterCustomActionProjectileTypeData ProjType;
    public List<EventMVGCharacterCustomActionProjTypeValueData_Raw>? ProjTypeValue;
    public int ProjAmount;
    public int ProjDuration;
    public string? AfterDurationFx;
    public int ProjAfterCollide;
    public int ProjDmgCount;
    public int ProjDmgDelay;
    public int ProjPierce;
    public double ProjSize;
    public double ProjSpd;
    public int ProjAtk;
}

[MemoryPackable]
public partial class EventMVGCharacterCustomRecord_Raw
{
    public int Id;
    public int GroupId;
    public EventMVGCustomTypeMainData CustomTypeMain;
    public EventMVGCharacterCustomSubTypeData CustomTypeSub;
    public EventMVGCharacterCustomLockTypeData SkillLockType;
    public bool AttackKeep;
    public int Lv;
    public int ActionGroupId;
    public int CoolDownTime;
    public int GlobalCoolDownTime;
    public bool IgnoreGlobalCoolDownTime;
    public List<EventMVGCharacterCustomCustomVariablesData_Raw>? CustomVariablesData;
}

[MemoryPackable]
public partial class EventMVGCharacterSettingRecord_Raw
{
    public int Id;
    public int StatHp;
    public int StatAtk;
    public int MaxAbsorbGauge;
    public int MaxModuleSlot;
    public int SkillCSetSearchPointLength;
    public int DefaultSkillALv;
    public int SkillAIdSet;
    public int SkillBIdSet;
    public int SkillCIdSet;
    public int SkillDIdSet;
    public int SkillBurstAIdSet;
    public int SkillBurstBIdSet;
    public int SkillBurstCIdSet;
    public int SkillBurstDIdSet;
    public string? BurstAnim;
    public string? BurstCharacterFx;
}

[MemoryPackable]
public partial class EventMVGCollectableRecord_Raw
{
    public int Id;
    public EventMVGCollectableCategoryData Category;
    public string? IconResource;
    public int Order;
    public string? CollectableName;
    public string? CollectableDesc;
    public string? CollectableDescShort;
    public string? AdditionalGetInfo;
    public bool IsReset;
}

[MemoryPackable]
public partial class EventMVGCommonSettingsRecord_Raw
{
    public int Id;
    public int EventId;
    public bool IsArchive;
    public int RoomChangeInvincibleTime;
    public double CamMoveEaseTime;
    public double CamZoonAdjustEaseTime;
    public double CamShakeDecreaseTime;
    public int GameStartChapterId;
    public string? GameStartRoomName;
    public int GameStartSocketId;
    public int LaserLimitLength;
    public int TeleportTransitionIn;
    public int TeleportTransitionOut;
    public int DropItemDeleteTime;
    public string? DropObjectDisappearFx;
    public int MapCount;
    public int EndGameStartChapterId;
    public string? EndGameStartRoomName;
}

[MemoryPackable]
public partial class EventMVGCurrencyRecord_Raw
{
    public int Id;
    public EventMVGCurrencyTypeData Category;
    public string? IconResource;
}

[MemoryPackable]
public partial class EventMVGDirectorRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public EventMVGDirectorTimeLineActionTypeData TimelineAction;
    public List<EventMVGDirectorTimelineValueData_Raw>? TimelineValue;
}

[MemoryPackable]
public partial class EventMVGLoadingRecord_Raw
{
    public int Id;
    public string? LoadingTipLocalkey;
    public int Order;
}

[MemoryPackable]
public partial class EventMVGMissionRecord_Raw
{
    public int Id;
    public int MvgId;
    public EventMVGMissionType MissionType;
    public EventMVGMIssionSubType MissionSubType;
    public EventMVGMissionConditionType ConditionType;
    public bool DisplayType;
    public int ConditionId;
    public int ConditionValue;
    public int Order;
    public string? NameLocalkey;
    public int PointValue;
    public bool IsReset;
    public int RewardId;
}

[MemoryPackable]
public partial class EventMVGModuleRecord_Raw
{
    public int Id;
    public EventMVGModuleCategoryData Category;
    public string? IconResource;
    public int Order;
    public string? ModuleName;
    public string? ModuleDesc;
    public string? ModuleDescShort;
    public int ModuleUseValue;
    public int SkillId;
}

[MemoryPackable]
public partial class EventMVGMonsterAttackTierRecord_Raw
{
    public int Id;
    public EventMVGMonsterAttackTiertierTypeData Tier;
    public int AttackPoint;
    public int EnergyEductedTier;
}

[MemoryPackable]
public partial class EventMVGMonsterDropItemRecord_Raw
{
    public int Id;
    public string? Desc;
    public EventMVGCurrencyType CurrencyType;
    public int CurrencyValue;
    public string? CurrencyResource;
}

[MemoryPackable]
public partial class EventMVGMonsterDropListRecord_Raw
{
    public int Id;
    public int ChallengeStep;
    public string? Desc;
    public List<EventMVGMonsterDropListSettingData_Raw>? DropSetting;
}

[MemoryPackable]
public partial class EventMVGMonsterLevelRecord_Raw
{
    public int Id;
    public int StendardAttackTierId;
    public float AttackSpeed;
    public float ChaseSpeed;
    public int Thrash;
    public int Normal;
    public int Elite;
    public int Special;
    public int Centurion;
    public int Boss;
}

[MemoryPackable]
public partial class EventMVGMonsterSettingRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? MonsterModelId;
    public EventMVGMonsterSettinggradeTypeData Grade;
    public EventMVGMonsterSettingmonstertypeTypeData Type;
    public string? DeadEffect;
    public string? Reward;
    public int DeathChargeBurstgauge;
    public int RankPoint;
    public int HpRatio;
    public int EnergyEductedRatio;
    public int AttackSpeedRatio;
    public int FirstRecognitionRange;
    public float RoamingSpeed;
    public float RoamingAcceleration;
    public int ChaseRange;
    public int ChaseSpeedRatio;
    public int ReturnRange;
    public int BattleStartRange;
    public int RespawnTime;
    public string? SpotBt;
    public int SkillId01;
    public int SkillId02;
    public int SkillId03;
    public int SkillId04;
    public int SkillId05;
    public int SkillId06;
    public int SkillId07;
    public int SkillId08;
    public int SkillId09;
    public int SkillId10;
    public int SkillId11;
    public int SkillId12;
    public int SkillId13;
    public int SkillId14;
    public int SkillId15;
}

[MemoryPackable]
public partial class EventMVGMonsterSkillRecord_Raw
{
    public int Id;
    public EventMVGMonsterSkillskilltypeTypeData SkillType;
    public int AttackTierId;
    public int CoolTime;
    public float ProjectileSpeed;
    public int ProjectileHitNum;
    public string? ProjectileModelResource;
    public string? ProjectileMuzResource;
    public string? ProjectileHitResource;
    public string? ProjectileCastingResource;
    public bool Absorbable;
    public int ChargeBurstgauge;
    public bool ProjectileExtinction;
    public int ProjectileHeight;
    public int ProjectileWidth;
    public int ChaseAngle;
    public int ChaseTime;
    public int ShotLineAngle;
    public int LaserAttackDelay;
    public int LaserAttackInterval;
    public int LaserDuration;
    public bool ProjectileExplosive;
    public int ExplosionHeight;
    public int ExplosionWidth;
}

[MemoryPackable]
public partial class EventMVGQuestRecord_Raw
{
    public int Id;
    public MVGQuestTargetType QuestTargetType;
    public MVGQuestType QuestType;
    public int ParentsQuestId;
    public EventMVGQuestConditionType ConditionType;
    public int ConditionId;
    public int ConditionValue1;
    public string? ConditionValue2;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int TimeLineGroupId;
    public int RewardId;
    public int NextQuestId;
}

[MemoryPackable]
public partial class EventMVGResourceSettingRecord_Raw
{
    public int Id;
    public string? ResourceCategory;
    public EventMVGResourceTypeData ResourceType;
    public string? ResourceValue;
    public string? ActiveFxResource;
    public string? AnimGoOn;
    public string? AnimOn;
    public string? AnimGoOff;
    public string? AnimOff;
}

[MemoryPackable]
public partial class EventMVGShopRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public string? Desc;
    public EventMVGShopTypeData ShopType;
    public string? ShopIcon;
    public string? ShopName;
    public string? ShopTxt;
    public int ItemSlot;
    public EventMVGShopItemTypeData ItemType;
    public int ItemId;
    public List<EventMVGShopRequireCurrencyTypeData_Raw>? RequireCurrency;
}

[MemoryPackable]
public partial class EventMVGTeleportRecord_Raw
{
    public int Id;
    public string? RoomAddressableName;
    public int SocketPointId;
    public string? LocaleName;
    public string? ResourceImage;
}

[MemoryPackable]
public partial class EventMVGTutorialConditionRecord_Raw
{
    public int Id;
    public int HelptipId;
    public MVGTutorialConditionType HelptipActiveCondition;
    public int HelptipActiveConditionId;
    public int HelptipActiveConditionValue;
}

[MemoryPackable]
public partial class EventMVGUnlockRecord_Raw
{
    public int Id;
    public EventMVGUnlockFunctionTYpe TargetFunctionType;
    public EventMVGUnlockConditionType UnlockConditionType;
    public int UnlockConditionId;
    public string? UnlockNameLocalkey;
    public string? UnlockDescriptionLocalkey;
    public string? UnlockResourceId;
    public int DisplayHelptipGroupId;
}

[MemoryPackable]
public partial class EventMVGUpgradeShopRecord_Raw
{
    public int Id;
    public EventMVGStatUpgradeType UpgradeType;
    public int UpgradeCount;
    public bool IsMaxLevel;
    public int UpgradeTargetGroupId;
    public int ConditionCurrencyId1;
    public int ConditionCurrencyValue1;
    public int ConditionCurrencyId2;
    public int ConditionCurrencyValue2;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventNewPlayerLotteryRecord_Raw
{
    public int Id;
    public int EventId;
    public int DrawCnt;
    public int DrawCntMax;
    public int RewardPool;
}

[MemoryPackable]
public partial class EventNKSBalloonRecord
{
    public int Id;
    public string? GroupId;
    public EventNKSDialogTypeData DialogType;
    public int Priority;
    public EventNKSDialogPrintTypeData PrintType;
    public string? PortraitId;
    public string? NameLocalkey;
    public string? ScenarioLocalkey;
    public string? PlaySound;
    public int Duration;
    public int ExecuteDelayTime;
    public int ExecuteRate;
    public bool FirstShowCheck;
    public List<BallonConditionData>? ConditionData;
}

[MemoryPackable]
public partial class EventNKSCharacterBurstRecord
{
    public int Id;
    public int CharacterId;
    public int ItemsActionGroupId;
    public int BurstActiveTime;
    public int CooldownTime;
    public int KillCooldownSubTime;
}

[MemoryPackable]
public partial class EventNKSCharacterLevelRecord
{
    public int Id;
    public int Lv;
    public int Exp;
    public bool Loop;
}

[MemoryPackable]
public partial class EventNKSCharacterSkillTreeRecord
{
    public int Id;
    public int GroupId;
    public int TreeLevel;
    public int Line;
    public List<SlotItemData>? SlotData;
}

[MemoryPackable]
public partial class EventNKSCharacterRecord
{
    public int Id;
    public int CommonSettingsId;
    public string? NameLocalkey;
    public string? ResourceId;
    public string? UiResourceId;
    public string? UiLobbyCharacter;
    public int CharacterSkillTreeGroupId;
    public int ReqStgClear;
    public int ReqItemCurrency;
    public int ReqItemId;
    public int StatMvSpd;
    public int MinMvSpd;
    public int StatHp;
    public int MinHp;
    public int StatAtk;
    public int MinAtk;
    public int StatAtkspd;
    public int MinAtkspd;
    public int StatProjSize;
    public int MinProjSize;
    public int StatProjSpd;
    public int MinProjSpd;
    public int StatDef;
    public int MinDef;
    public int StatMagnet;
    public int MinMagnet;
    public List<WeaponDefaultData>? WeaponDefault;
    public List<ModuleDefaultData>? ModuleDefault;
}

[MemoryPackable]
public partial class EventNKSCoinSkillSlotRecord
{
    public int Id;
    public int SlotGroupId;
    public int Grade;
    public int GradeUigauge;
    public int CoinAmount;
}

[MemoryPackable]
public partial class EventNKSCoinSkillStoreRecord
{
    public int Id;
    public int GroupId;
    public int SecondGroupId;
    public int Grade;
    public int GroupRate;
    public EventNKSItemsStatType StatType1;
    public EventNKSItemsStatCalcType StatCalcType1;
    public double StatValue1;
    public string? LocaleName;
    public string? IconResource;
}

[MemoryPackable]
public partial class EventNKSCoinStoreRecord
{
    public int Id;
    public EventNKSCoinStoreType StoreType;
    public int Count;
    public int CoinAmount;
}

[MemoryPackable]
public partial class EventNKSCollectionRecord
{
    public int Id;
    public EventNKSCollectionTypeData CollectionCategory;
    public EventNKSVersionType VersionType;
    public int ItemId;
    public string? Particle;
    public string? CollectionHintLocale;
}

[MemoryPackable]
public partial class EventNKSCommonSettingsRecord
{
    public int Id;
    public int GroupId;
    public int EventId;
    public EventNKSVersionType VersionType;
    public bool IsSpecialMode;
    public bool IsArchiveEvent;
    public int CheckBoss;
    public string? EnterScenario;
    public int FieldItemAutoDisappearTime;
    public int AutoSaveTimer;
    public double ItemCalcWeight;
    public int PcInvincibleTime;
    public int MagnetMoveToPlayerCharacterSpd;
    public string? MonsterCommonAppearEffect;
    public string? MonsterCommonDeathEffectId;
    public int SetBossDeathEffectTime;
    public int MonsterCommonKnockbackDelay;
    public int MonsterCommonWhiteBlinkDelay;
    public int BounceDefaultWidth;
    public int BounceDefaultHeight;
    public int PlayableCharacterBurstFadeTime;
    public double PlayableCharacterBurstInterval;
    public int CoinSkillStoreReRollAmount;
    public int CoinSkillStoreLockAddAmount;
    public int CoinReviveMaxCount;
    public int LevelupSlotMaxRerollCount;
    public int MaxCombineWeapon;
    public int MaxCombineModule;
}

[MemoryPackable]
public partial class EventNKSDialogRecord
{
    public int Id;
    public bool IsDialogFirstPoint;
    public string? GroupId;
    public int Priority;
    public EventNKSDialogPrintTypeData PrintType;
    public string? PortraitId;
    public string? NameLocalkey;
    public string? ScenarioLocalkey;
    public string? PlaySound;
    public string? PlayBgm;
    public int Duration;
    public string? SetBackground;
    public string? HideBackground;
    public int SetBackgroundCordX;
    public int SetBackgroundCordY;
    public double SetBackgroundScale;
    public List<SpineResourceData>? SpineData;
    public EventNKSDialogEffectTypeData ScenarioEffectType;
    public string? ScenarioEffectValue;
    public int ExecuteDelayTime;
    public int ExecuteRate;
    public bool FirstShowCheck;
    public List<DialogConditionData>? ConditionData;
}

[MemoryPackable]
public partial class EventNKSDropListRecord
{
    public int Id;
    public int GroupId;
    public int ItemId;
}

[MemoryPackable]
public partial class EventNKSGachaBoxRecord
{
    public int Id;
    public string? ResourceId;
    public int Grade;
    public int GachaListGroupId;
    public int Rate;
    public int MaxSlot;
    public List<EventNKSGachaBonusData>? BonusSlotData;
}

[MemoryPackable]
public partial class EventNKSGachaListRecord
{
    public int Id;
    public int GroupId;
    public int ItemId;
    public int Rate;
}

[MemoryPackable]
public partial class EventNKSGuideRecord
{
    public int Id;
    public int TutorialViewId;
    public int GroupId;
    public string? GuideResourceId;
    public string? GuideTitleLocalkey;
    public string? GuideSubTitleLocalkey;
    public string? GuideDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventNKSItemsActionRecord
{
    public int Id;
    public int GroupId;
    public bool TimelineLoop;
    public int TimelineLoopDelay;
    public int TimelineValue;
    public string? ProjResourceId;
    public string? ProjResourceHitId;
    public string? ProjType;
    public List<EventNKSProjectileTypeValueData>? ProjTypeValue;
    public string? ProjValueStack;
    public int ProjAmount;
    public int ProjDuration;
    public int ProjAfterDuration;
    public int ProjAfterCollide;
    public int ProjAfterCollideStat;
    public int ProjDmgCount;
    public int ProjDmgDelay;
    public int ProjPierce;
    public double ProjSize;
    public double ProjSpd;
    public List<EventNKSProjectileAtkRangeData>? ProjAtkRange;
    public int ProjKnockbackValue;
}

[MemoryPackable]
public partial class EventNKSItemsStatRecord
{
    public int Id;
    public int StatTimeDuration;
    public string? StatMarkerResourceId;
    public int ProjStatTimeDeath;
    public EventNKSBuffTypeData BuffType;
    public List<NKSStatData>? Stat;
}

[MemoryPackable]
public partial class EventNKSItemsRecord
{
    public int Id;
    public int GroupId;
    public bool IsCombine;
    public List<ItemConditionIdData>? ItemConditionId;
    public int Lv;
    public List<int>? LockCharacterId;
    public List<int>? DisableCharacterId;
    public int LvMax;
    public string? IconResourceId;
    public EventNKSItemCategoryType ItemCategory;
    public double FieldItemScale;
    public EventNKSItemPassiveSpecialTypeData PassiveSpecial;
    public EventNKSFieldItemType FieldItemType;
    public string? ItemNameLocale;
    public string? ItemDescLocale;
    public int ItemRating;
    public int ItemRatio;
    public int ItemStatId;
    public int ItemActionId;
    public int ItemValue;
    public bool LevelUpOnly;
    public bool CanMagnet;
    public int ItemConditionTime;
    public bool IsBonus;
    public int ItemUnlockConditionMissionId;
    public List<DescriptionValueData>? DescriptionValue;
}

[MemoryPackable]
public partial class EventNKSMissionRecord
{
    public int Id;
    public string? NameLocalkey;
    public int CommonSettingsId;
    public EventNKSMissionCategoryData MissionCategory;
    public EventNKSMissionTargetTypeData TargetType;
    public int TargetId;
    public int MissionCount;
    public List<NKSMissionValueData>? MissionValue;
    public EventNKSMissionRewardTypeData RewardType;
    public int RewardValue;
}

[MemoryPackable]
public partial class EventNKSMonsterActionRecord
{
    public int Id;
    public int GroupId;
    public bool TimelineLoop;
    public int TimelineLoopDelay;
    public int TimelineValue;
    public EventNKSMonsterActionType ActionType;
    public bool ActionKnockback;
    public List<ActionValueData>? ActionValue;
    public string? ProjResourceId;
    public string? ProjType;
    public List<EventNKSProjectileTypeValueData>? ProjTypeValue;
    public int ProjAmount;
    public int ProjDuration;
    public int ProjAfterDuration;
    public int ProjAfterCollide;
    public int ProjAfterCollideStat;
    public int ProjDmgCount;
    public int ProjDmgDelay;
    public double ProjSize;
    public double ProjSpd;
    public List<EventNKSProjectileAtkRangeData>? ProjAtkRange;
}

[MemoryPackable]
public partial class EventNKSMonsterRecord
{
    public int Id;
    public string? ResourceId;
    public double MonsterScale;
    public bool IsCollide;
    public EventNKSMonsterColType ColType;
    public EventNKSMonsterGradeType Grade;
    public string? BehaviorTree;
    public int MonsterActionGroupId;
    public double StatMvSpd;
    public int StatHp;
    public int StatAtk;
    public int StatDef;
    public int StatProjSpd;
    public int StatProjSize;
    public int StatColDmg;
    public List<DropItemData>? DropItem;
    public int RandomDropGroupId;
    public int RandomDropAmount;
    public int DropRadius;
    public int DeathActionGroupId;
    public string? SpawnEffectResourceId;
    public string? HitEffectResourceId;
    public string? DeathEffectResourceId;
    public bool ResistanceAttract;
    public bool ResistanceKnockBack;
    public bool ResistanceParalysis;
}

[MemoryPackable]
public partial class EventNKSSpawnGroupRecord
{
    public int Id;
    public int GroupId;
    public int TimelineValue;
    public EventNKSStageTimelineActionType TimelineActionType;
    public List<EventNKSTimeLineActionTypeValue>? TimelineActionTypeValue;
}

[MemoryPackable]
public partial class EventNKSSpawnTimelineRecord
{
    public int Id;
    public int GroupId;
    public int TimelineValue;
    public bool TimelineIsLoop;
    public int TimelineSpawnGroup;
    public int TimelineLoopCount;
    public int TimelineLoopInterval;
    public EventNKSStageTimelineActionType TimelineActionType;
    public List<EventNKSTimeLineActionTypeValue>? TimelineActionTypeValue;
}

[MemoryPackable]
public partial class EventNKSStageRecord
{
    public int Id;
    public int CommonSettingsId;
    public int StageGroup;
    public int StageOpenCondition;
    public bool CanRepeat;
    public bool IsChallenge;
    public int MapWidth;
    public int MapHeight;
    public int TileSetId;
    public int StageTimelineGroupId;
    public int ClearReward;
    public string? EnterScenario;
    public string? LoseScenario;
    public string? WinScenario;
    public string? StageNameLocale;
    public string? StageDescLocale;
    public List<string>? BgMset;
    public int UiDifficult;
    public string? UiTheme;
    public string? UiThemeLocalKey;
    public int DecoTileAmount;
    public int DecoTileXoffset;
    public int DecoTileYoffset;
}

[MemoryPackable]
public partial class EventNKSStageTileSetRecord
{
    public int Id;
    public int GroupId;
    public string? ResourceId;
    public EventNKSTileTypeData TileType;
    public bool BasicTile;
}

[MemoryPackable]
public partial class EventPassManagerRecord
{
    public int Id;
    public int EventId;
    public int PassPointId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int MidasProductId;
    public int InfracorePoint;
    public string? PassPremiumNameLocalkey;
    public string? PassPremiumDescriptionLocalkey;
    public int RankSkipId;
    public string? PassLogoResourceId;
    public string? PassLobbyButtonResourceId;
    public bool IsCharacterActive;
    public int ShopNpcResourceId;
    public int NpcCostumeId;
    public string? ProductInfoDescription;
    public bool UsePlaceholder;
    public string? PrefabId;
    public bool IsDisplayLobby;
}

[MemoryPackable]
public partial class EventPirateCafeCharacterRecord_Raw
{
    public int Id;
    public int GroupId;
    public EventPirateCafeCharacterType CharacterType;
    public string? ResourceId;
    public string? SiResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeDialogGroupRecord_Raw
{
    public int Id;
    public int DialogGroupId;
    public int DialogId;
}

[MemoryPackable]
public partial class EventPirateCafeDialogRecord_Raw
{
    public int Id;
    public string? PortraitId;
    public string? Locale;
    public string? VoiceKey;
}

[MemoryPackable]
public partial class EventPirateCafeManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public int OpenCondition;
    public int DailyRewardConditionValue;
    public int DailyRewardId;
    public string? FirstEnterScenarioGroupId;
    public int MissionGroupId;
    public int SkillGroupId;
    public int HelpTipGroupId;
    public int GameEndAlertStartTime;
    public int FeverDirectionMaidMoveSpeed;
    public int FeverDirectionNpcMoveSpeed;
    public int FeverObjectInvisibleDirectionTime;
    public int FeverDirectionNpcSpawnStartTime;
    public int NpcSpawnCooltime;
    public int SpecialIdleConditionTime;
    public int AnticheatMaxPoint;
}

[MemoryPackable]
public partial class EventPirateCafeMenuRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? TableResourceId;
    public string? ButtonResourceId;
    public string? BubbleResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeMissionRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public EventPirateCafeMissionType MissionType;
    public EventPirateCafeConditionsType ConditionType;
    public int ConditionValue;
    public string? NameLocalkey;
    public int RewardId;
}

[MemoryPackable]
public partial class EventPirateCafeNpcRecord_Raw
{
    public int Id;
    public int GroupId;
    public EventPirateCafeNpcType NpcType;
    public string? ResourceId;
}

[MemoryPackable]
public partial class EventPirateCafeSkillRecord_Raw
{
    public int Id;
    public int GroupId;
    public int SkillRank;
    public int ActiveConditionValue;
    public EventPirateCafeSkillType SkillType;
    public int SkillValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class EventPirateCafeStageRecord_Raw
{
    public int Id;
    public int StageLevel;
    public int EnterConditionValue;
    public string? StageLevelName;
    public string? StageLevelDesc;
    public string? StageLevelImg;
    public int TimeLimit;
    public int FeverGaugeMax;
    public int FeverPlayTime;
    public int UseMaidGroupId;
    public int NormalMaidReturnTime;
    public int FeverMaidReturnTime;
    public int CleanTime;
    public int CleanGetPoint;
    public int NormalMaidServingFailTime;
    public int NormalMaidMoveSpeed;
    public int NormalMaidServingMoveSpeed;
    public int FeverMaidServingFailTime;
    public int FeverMaidMoveSpeed;
    public int FeverMaidServingMoveSpeed;
    public int NormalMenuGroupId;
    public int FeverMenuId;
    public int UseNpcGroupId;
    public int NormalOrder1Weight;
    public int NormalOrder2Weight;
    public int NormalOrder3Weight;
    public int NormalOrder1GetPoint;
    public int NormalOrder2GetPoint;
    public int NormalOrder3GetPoint;
    public int NormalOrder1WaitTimeServing;
    public int NormalOrder2WaitTimeServing;
    public int NormalOrder3WaitTimeServing;
    public int NormalWaitTimeEating;
    public int NormalNpcMoveSpeed;
    public int NormalNpcGetFeverGauge;
    public bool UseEventNpc;
    public int EventNpcTurnCount;
    public int EventOrderCount;
    public int EventOrderGetPoint;
    public int EventWaitTimeServing;
    public int EventWaitTimeEating;
    public int EventNpcMoveSpeed;
    public int EventNpcGetFeverGauge;
    public int FeverOrderGetPoint;
    public int FeverWaitTimeEating;
    public int FeverNpcMoveSpeed;
    public int NormalNpcSpawnTime;
    public int FeverNpcSpawnTime;
    public int FeverEndNpcSpawnTime;
    public int FeverEndNpcSpawnAmount;
    public int FeverOrderCount;
    public int DialogGroup1;
    public int DialogGroup2;
    public int DialogGroup3;
    public int DialogGroup1MaxPoint;
    public int DialogGroup2MaxPoint;
}

[MemoryPackable]
public partial class EventPlaySodaChallengeModeRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public EventDungeonOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public EventPlaySodaGameType GameType;
    public string? GameTitle;
    public string? GameTitleEn;
    public int StageHelptipId;
    public string? StageImage;
    public string? GameModeResource;
    public int StageDataId;
}

[MemoryPackable]
public partial class EventPlaySodaManagerRecord
{
    public int Id;
    public int EventId;
    public MiniGameSystemType MinigameType;
    public int StoryGroupId;
    public int ChallengeGroupId;
    public int PlayHelptipId;
    public int DailyRewardId;
    public int TotalPointRewardGroupId;
    public string? UiPrefabKeyword;
    public int IngamePauseSecond;
}

[MemoryPackable]
public partial class EventPlaySodaPointRewardRecord
{
    public int Id;
    public int GroupId;
    public EventPlaySodaGameType GameType;
    public int Step;
    public int PointValue;
    public int RewardId;
}

[MemoryPackable]
public partial class EventPlaySodaStoryModeRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public EventDungeonOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public EventPlaySodaGameType GameType;
    public string? ShortName;
    public string? GameTitle;
    public int StageHelptipId;
    public string? StageImage;
    public int StageDataId;
    public int ClearRewardId;
    public string? EnterScenario;
    public string? ExitScenario;
}

[MemoryPackable]
public partial class EventQuestManagerRecord
{
    public int Id;
    public int EventId;
    public string? EventNameLocalkey;
    public int AlbumCategoryGroupId;
    public string? EventQuestAlbumDescription;
    public string? UiPrefab;
    public string? HeaderBgResourceId;
    public string? QuestActivateResourceId;
}

[MemoryPackable]
public partial class EventQuestStageRecord
{
    public int Id;
    public int GroupId;
    public EventQuestStageModeType StageMode;
    public EventQuestMiniGameType MinigameType;
    public int MinigameStageId;
    public int ChapterId;
    public ChapterMod ChapterMod;
    public int EventQuestManagerId;
    public int ArchiveEventQuestManagerId;
    public int SpawnConditionEventQuestId;
    public int SpawnConditionArchiveEventQuestId;
    public int SpawnConditionEventQuestStageId;
    public int SpawnConditionCampaignStageId;
    public int EnterConditionEventQuestId;
    public int EnterConditionArchiveEventQuestId;
    public int EnterConditionEventQuestStageId;
    public int EnterConditionCampaignStageId;
    public string? NameLocalkey;
    public StageCategory StageCategory;
    public bool SpotAutocontrol;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public int FieldMonsterId;
    public int SpotId;
    public int RewardId;
    public ScenarioType EnterScenarioType;
    public string? EnterScenario;
    public ScenarioType ExitScenarioType;
    public string? ExitScenario;
    public int FixedPlayCharacterId;
    public int CharacterLv;
}

[MemoryPackable]
public partial class EventQuestRecord
{
    public int Id;
    public int EventQuestManagerId;
    public Category ConditionType;
    public int ConditionValue;
    public string? ConditionUiLocalkey;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int NextQuestId;
    public string? EndScenarioId;
    public int RewardId;
}

[MemoryPackable]
public partial class EventRopeRunningCutSceneRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? CutsceneResource;
    public string? CutsceneName;
    public string? CutsceneDescription;
    public int SpecialAppearCount;
    public string? UnlockConditionDesc;
}

[MemoryPackable]
public partial class EventRopeRunningDifficultyRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Difficulty;
    public int ScrollSpeed;
    public int HpDecreasePerSec;
    public int NextDifficulty;
    public int NeedMeterToNextDifficulty;
    public List<int>? PresetGroupId;
    public bool IsRushMode;
}

[MemoryPackable]
public partial class EventRopeRunningManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EnterScenario;
    public int OpenCondition;
    public int DailyRewardDistance;
    public int DailyRewardId;
    public int MissionGroupId;
    public int StatusPointGroupId;
    public int StatusGroupId;
    public int SpyItemGroupId;
    public int TutorialId;
    public int AlbumCategoryId;
    public int CutSceneGroupId;
    public int ScenarioGroupId;
    public int DifficultyGroupId;
    public int FallDeathDistance;
    public int JumpYSpeed;
    public int GravityValue;
    public int RopeActionFallSpeed;
    public int RopeActionGravityValue;
    public int RopeActionPullForce;
    public int MaxRopeAttachDistance;
    public int MaxRopeAttachHeight;
    public int SpinJumpYSpeed;
    public int SpinJumpGravityValue;
    public int InitialFallDeathSpeed;
    public int FallDeathGravityValue;
    public int RopeAngle;
    public int RopeCooltime;
    public int RopeSpeed;
    public int RopeMaintainTime;
    public int SpeedRatioAfterHit;
    public int SpeedRatioAfterHitTime;
    public int GetSpGoldCoinValue;
    public int GetSpSilverCoinValue;
    public int GetScoreGoldCoinValue;
    public int GetScoreSilverCoinValue;
    public int ShieldTime;
    public int ItemMoveSpeedByMagnet;
    public int DistanceScoreRatio;
    public int RushTime;
    public int RushCountValue;
    public int InvincibleTime;
    public int StartDifficulty;
    public int DRankTargetScore;
    public int CRankTargetScore;
    public int BRankTargetScore;
    public int ARankTargetScore;
    public int SRankTargetScore;
}

[MemoryPackable]
public partial class EventRopeRunningMissionRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? MissionLocaleKey;
    public EventRopeRunningMissionType MissionType;
    public int MissionValue;
    public int RewardId;
}

[MemoryPackable]
public partial class EventRopeRunningObjectGroupRecord_Raw
{
    public int Id;
    public List<EventRopeRunningObjectGroupRatio_Raw>? GroupRatio;
    public bool IsVisible;
}

[MemoryPackable]
public partial class EventRopeRunningObjectRecord_Raw
{
    public int Id;
    public EventRopeRunningObjectType ObjectType;
    public int ObjectColliderX;
    public int ObjectColliderY;
}

[MemoryPackable]
public partial class EventRopeRunningPresetRecord_Raw
{
    public int Id;
    public int PresetGroupId;
    public int Order;
    public int Ceiling;
    public int Object1;
    public int Object2;
    public int Object3;
    public int Object4;
    public int Object5;
    public int Object6;
    public int Object7;
    public int Object8;
    public int Object9;
    public int Object10;
    public int Obstacle;
    public int Land;
}

[MemoryPackable]
public partial class EventRopeRunningScenarioRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? ScenarioDialogGroupId;
    public int ScenarioUnlockDay;
}

[MemoryPackable]
public partial class EventRopeRunningSpyItemRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? ResourceId;
    public string? NameLocaleKey;
    public string? DescLocaleKey;
    public EventRopeRunningSpyItemFunctionType FunctionType;
    public int FunctionValue;
    public EventRopeRunningSpyItemUnlockConditionType UnlockConditionType;
    public int UnlockConditionValue;
    public string? UnlockConditionLocaleKey;
    public int UnlockTime;
}

[MemoryPackable]
public partial class EventRopeRunningStatusPointRecord_Raw
{
    public int Id;
    public int GroupId;
    public int SpCount;
    public int GetCoinPoint;
}

[MemoryPackable]
public partial class EventRopeRunningStatusRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Level;
    public int Hp;
    public int Defence;
    public int Recovery;
}

[MemoryPackable]
public partial class EventRunningChallengeStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public float JumpYPower;
    public float GravityValue;
    public float DefaultObjectSpeed;
    public int DefaultObtainPoint;
    public int Life;
    public int HitImmuneTimeMs;
    public int AutoIncreaseDifficultySecond;
}

[MemoryPackable]
public partial class EventRunningObjectRecord
{
    public int Id;
    public string? ObjectResourceId;
}

[MemoryPackable]
public partial class EventRunningSpawnGroupRecord
{
    public int Id;
    public int GroupId;
    public int SpawnObjectId;
    public int SpawnRatio;
}

[MemoryPackable]
public partial class EventRunningStoryStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public int ClearTimeSecond;
    public float JumpYPower;
    public float GravityValue;
    public float DefaultObjectSpeed;
    public int DefaultObtainPoint;
    public int Life;
    public int HitImmuneTimeMs;
    public int AutoIncreaseDifficultySecond;
    public string? ClearConditionDesc;
}

[MemoryPackable]
public partial class EventRunningTimeDifficultRecord
{
    public int Id;
    public int GroupId;
    public int DifficultyStep;
    public int PlayTimeMin;
    public int PlayTimeMax;
    public int SpawnDistanceMin;
    public int SpawnDistanceMax;
    public int SpawnGroupId;
    public float DifficultyPlaySpeed;
    public float AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventSBCharacterAttackStateRecord_Raw
{
    public int Id;
    public int AnimatorId;
    public SBCharacterAttackType AttackType;
    public string? SkillIcon;
    public SBCharacterSkillUseEnergyType UseEnergyType;
    public int UseEnergyValue;
    public int AnimationSpeedRatio;
    public string? UseEffectResource;
    public int AttackGroupId;
    public bool IsInvincible;
    public int NextAttack;
    public int NextAttackInputStartTime;
    public int NextDefenseMotionMinimumTransitionTime;
    public int NextAttackMinimumTransitionTime;
    public int TimeToIdle;
}

[MemoryPackable]
public partial class EventSBCharacterAttackRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBCharacterSkillType SkillType;
    public List<SBCharacterSkillUseColliderType>? UseColliderType;
    public int ColliderStartTime;
    public int ColliderEndTime;
    public string? ProjectileResource;
    public string? ProjectileHitResource;
    public int ProjectileStartTime;
    public int ProjectileSize;
    public int ProjectileSpeed;
    public int ProjectileLifeTime;
    public int ProjectileRollAxis;
    public int Damage;
    public int DecreaseShieldGauge;
    public int DecreaseBalanceGauge;
    public int GainBetaGauge;
    public int GainBurstGauge;
    public int RecoveryHp;
    public bool IsDown;
}

[MemoryPackable]
public partial class EventSBCharacterEnhanceRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBCharacterEnhanceType EnhanceType;
    public int EnhanceLevel;
    public bool IsMaximum;
    public int EnhanceValue01;
    public int EnhanceValue02;
    public string? EnhanceLevelLocale;
    public SBCurrencyType EnhanceMaterialItemType;
    public int EnhanceMaterialItemValue;
    public string? EnhanceMaterialLocale;
}

[MemoryPackable]
public partial class EventSBCharacterSkillRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBCharacterSkillGroupType SkillGroup;
    public string? SkillIcon;
    public string? SkillNameLocale;
    public string? SkillDescriptionLocale;
    public int SkillToActivation;
    public bool IsDefaultLearn;
    public int PriorSkill;
    public int NeedLearnSkillpoint;
    public List<AffectSkillData_Raw>? AffectSkillData;
}

[MemoryPackable]
public partial class EventSBCharacterRecord_Raw
{
    public int Id;
    public string? CharacterResource;
    public int EnhanceGroupId;
    public int SkillGroupId;
    public int DefaultShieldGauge;
    public int DefaultBurstGauge;
    public int DefaultAttackSkillId;
    public int BetaSkill01StateId;
    public int BetaSkill02StateId;
    public int BetaSkill03StateId;
    public int BetaSkill04StateId;
    public int BurstSkill01StateId;
    public int BurstSkill02StateId;
    public int BurstSkill03StateId;
    public int BurstSkill04StateId;
    public int HaveShieldGaugeGuardDamageRatio;
    public int NoneShieldGaugeGuardDamageRatio;
    public int RecoveryShieldGaugeTime;
    public int RecoveryShieldGaugeAmount;
    public int GuardInputPreventionTime;
    public int GuardMinimumTime;
    public int PerfectGuardDecreaseBalanceGauge;
    public int PerfectGuardGainBetaGauge;
    public int DefaultPerfectGuardTime;
    public int PerfectGuardBulletTime;
    public int NormalParryMaintainTime;
    public int PerfectParryMaintainTime;
    public int DashToNextDefenseMotionMinimumTransitionTime;
    public int DashToNextMotionMinimumTransitionTime;
    public int DashTimeToIdle;
    public int DefaultPerfectDodgeTime;
    public int PerfectDodgeBulletTime;
    public int PerfectDodgeFrontAndBackBulletTime;
    public int PerfectDodgeGainBurstGauge;
    public int PerfectDodgeInvincibleTime;
    public int DodgeToNextDefenseMotionMinimumTransitionTime;
    public int DodgeToNextMotionMinimumTransitionTime;
    public int DodgeTimeToIdle;
    public int DefaultCriticalProbability;
    public int DefaultDamageRatio;
    public int DefaultReviveCount;
    public int CharacterDownHoldTime;
    public int CharacterHitHoldingTime;
    public int CharacterStandUpTime;
    public int BlinkTeleportationTime;
}

[MemoryPackable]
public partial class EventSBCurrencyRecord_Raw
{
    public int Id;
    public SBCurrencyType CurrencyType;
    public string? ItemResource;
    public string? ItemNameLocale;
    public string? ItemDescriptionLocale;
}

[MemoryPackable]
public partial class EventSBInGameGuideRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBInGameGuideOutputType IngameGuideOutputType;
    public int IngameGuideOutputTime;
    public string? IngameGuideLocaleMobile;
    public string? IngameGuideLocalePc;
}

[MemoryPackable]
public partial class EventSBItemRecord_Raw
{
    public int Id;
    public SBItemType ItemType;
    public string? ItemResource;
    public string? ItemNameLocale;
    public string? ItemDescriptionLocale;
    public int ItemLevel;
    public List<SBItemOptionLocale_Raw>? SbItemOptionLocale;
    public List<SBItemOptionData_Raw>? SbItemOption;
}

[MemoryPackable]
public partial class EventSBManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public string? EnterScenario;
    public int StageGroupId;
    public int CharacterId;
    public int CharacterSkillGroupId;
    public int EnhanceGroupId;
    public int ShopGroupId;
    public int MissionGroupId;
    public int TutorialListGroupId;
    public string? BattleFieldResource;
    public int BattleFieldRadius;
    public int HaveShieldGaugeHitDamageRatio;
    public string? RetributionIcon;
    public int RepulseDecreaseShieldGaugeRatio;
    public int SkillBulletTime;
    public int GigasCameraChangeDistance;
    public int AbaddonCameraChangeDistance;
    public int StalkerCameraChangeDistance;
    public int BehemothCameraChangeDistance;
    public int BruteCameraChangeDistance;
    public int DamageChangeScoreRatio;
    public int ChangeLeftTimeToPoint;
    public int BuffSkillAttackStateId;
    public int BuffDuration;
    public int BuffAtkUpValue;
    public int BuffSpeedUpValue;
}

[MemoryPackable]
public partial class EventSBMissionRecord_Raw
{
    public int Id;
    public int GroupId;
    public string? MissionLocalkey;
    public SBMissionCategory MissionCategory;
    public SBMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public SBMissionRewardType RewardType;
    public int RewardValue;
    public int RewardAmount;
}

[MemoryPackable]
public partial class EventSBMonsterAttackStateRecord_Raw
{
    public int Id;
    public int AnimatorId;
    public int AnimationSpeedRatio;
    public string? UseEffectResource;
    public int UseAttackGroupId;
    public bool IsInvincible;
    public int TimeToIdle;
    public bool SkillTutorialUse;
    public int SkillTutorialUseId;
    public int SkillTutorialOutputTime;
}

[MemoryPackable]
public partial class EventSBMonsterAttackRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBMonsterSkillType SkillType;
    public List<SBMonsterSkillUseColliderType>? UseColliderType;
    public int ColliderStartTime;
    public int ColliderEndTime;
    public string? ProjectileResource;
    public string? ProjectileHitResource;
    public int ProjectileStartTime;
    public int ProjectileFireTime;
    public int ProjectileMaximumHeight;
    public int ProjectileSize;
    public int ProjectileSpeed;
    public int ProjectileDirection;
    public int ProjectileLifeTime;
    public int MoveStartTime;
    public int MoveEndTime;
    public int MaximumJumpHeight;
    public int Damage;
    public int DecreaseShieldGauge;
    public bool IsDown;
    public bool EveGuardAble;
    public SBMonsterSpecialSkillType SpecialSkillType;
    public int SpecialSkillWarningTime;
    public int SpecialSkillEveWarningTime;
    public int DodgeSkillDelayTime;
    public bool CanBeCanceledByPerfectParry;
    public SBMonsterParryAniDirectionType ByPerfectParryAniDirection;
    public SBMonsterParryAniDirectionType AttackDirection;
    public bool StrongHit;
    public bool FocusEve;
    public int FocusEveStartTime;
    public int FocusEveEndTime;
}

[MemoryPackable]
public partial class EventSBMonsterRecord_Raw
{
    public int Id;
    public SBMonsterType MonsterType;
    public string? MonsterResource;
    public string? MonsterNameLocale;
    public int MonsterAtk;
    public int MonsterHp;
    public int MonsterShieldGauge;
    public int BalanceGauge;
    public int MonsterRecoveryShieldGaugeTime;
    public string? MonsterBt;
    public string? Phase01Bgm;
    public string? Phase02Bgm;
    public int StartDistanceWithCharacter;
    public int GroggyTime;
    public int DownTime;
    public int RetributionStartDistance;
    public int RetributionResource;
    public int RetributionResourceWithSkill;
    public int RetributionDamage;
    public int RetributionDecreaseShieldGauge;
    public int RetributionDownTime;
    public int FinishResource;
    public List<double>? BlinkCharacterLocation;
    public List<UseSkillData_Raw>? UseSkillData;
}

[MemoryPackable]
public partial class EventSBShopRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBShopItemType ItemGroup;
    public bool IsOpened;
    public List<SBOpenConditionData_Raw>? SbOpenConditionData;
    public int ItemOrder;
    public int ItemPrice;
    public int ItemId;
}

[MemoryPackable]
public partial class EventSBStageRewardRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBRewardType RewardType;
    public int RewardId;
    public int RewardAmount;
    public int ScoreMin;
    public int ScoreMax;
}

[MemoryPackable]
public partial class EventSBStageRecord_Raw
{
    public int Id;
    public int GroupId;
    public SBBossType BossType;
    public SBStageType StageType;
    public string? StageNameLocale;
    public string? StageNameLocaleWithoutLevel;
    public int MonsterId;
    public string? MonsterImage;
    public string? MonsterIcon;
    public int LimitTime;
    public int UnlockDate;
    public int UnlockConditionStage;
    public List<UnlockConditionLocaleData_Raw>? UnlockConditionLocale;
    public int StageFirstClearReward;
    public int StageClearReward;
    public int StageFailureReward;
    public bool IngameGuideUse;
    public int IngameGuideGroupId;
}

[MemoryPackable]
public partial class EventSBTimeLineRecord_Raw
{
    public int Id;
    public SBTimeLineType TimelineType;
    public string? UseEveTimeline;
    public int UseEveAnimatorId;
    public string? UseMonsterTimeline;
    public int UseMonsterAnimatorId;
    public List<double>? TimelineStartCharacterLocation;
    public int TimelinePlayTime;
    public int EveMoveAbleTime;
}

[MemoryPackable]
public partial class EventSBTutorialListRecord_Raw
{
    public int Id;
    public int GroupId;
    public int TutorialPageId;
    public SBTutorialOutputType TutorialOutputType;
    public int TutorialOutputValue;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class EventScenarioControlRecord
{
    public int Id;
    public int EventId;
    public string? ScenarioGroupId;
    public string? ScenarioPlayType;
}

[MemoryPackable]
public partial class EventSmashChallengeStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public int Life;
    public string? Resource;
    public int SpawnSlotCount;
    public int PointLimit;
    public int AppearHitPoint;
    public int IdleHitPoint;
    public int ExitHitPoint;
    public int NoneTargetPassPoint;
}

[MemoryPackable]
public partial class EventSmashCharacterGroupRecord
{
    public int Id;
    public int Group;
    public int CharacterId;
    public int SpawnRate;
}

[MemoryPackable]
public partial class EventSmashCharacterRecord
{
    public int Id;
    public string? Resource;
    public EventSmashCharacterType Type;
    public int TypeValue;
}

[MemoryPackable]
public partial class EventSmashStoryStageRecord
{
    public int Id;
    public int ClearPoint;
    public string? ClearConditionDesc;
    public int TimeDifficultGroup;
    public int Life;
    public string? Resource;
    public int SpawnSlotCount;
    public int AppearHitPoint;
    public int IdleHitPoint;
    public int ExitHitPoint;
    public int NoneTargetPassPoint;
}

[MemoryPackable]
public partial class EventSmashTimeDifficultRecord
{
    public int Id;
    public int Group;
    public int Lv;
    public int PlayTimeMin;
    public int PlayTimeMax;
    public int SpawnGroup;
    public int SpawnCountMax;
    public int SpawnDelayTime;
    public int CharacterWaitTime;
}

[MemoryPackable]
public partial class EventSortOutBoxRecord
{
    public int Id;
    public int GroupId;
    public string? BoxResource;
}

[MemoryPackable]
public partial class EventSortOutMissionRecord_Raw
{
    public int Id;
    public int ManagerId;
    public string? MissionLocalkey;
    public EventSortOutMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public int RewardId;
}

[MemoryPackable]
public partial class EventSortOutRecord
{
    public int Id;
    public int EventManagerId;
    public bool IsArchiveEvent;
    public string? EnterScenario;
    public string? NameLocalkey;
    public int AutoChargeId;
    public int CurrencyTicket;
    public int Time;
    public int Level1Wave;
    public int Level2Wave;
    public int Level3Wave;
    public int Level2StartPoint;
    public int Level3StartPoint;
    public int GainFeverGauge;
    public int MaxFeverGauge;
    public int DecreaseFeverGauge;
    public int CorrectCount;
    public int PenaltyTime;
    public int RankDMinPoint;
    public int RankDMaxPoint;
    public int RankDReward;
    public int RankCMinPoint;
    public int RankCMaxPoint;
    public int RankCReward;
    public int RankBMinPoint;
    public int RankBMaxPoint;
    public int RankBReward;
    public int RankAMinPoint;
    public int RankAMaxPoint;
    public int RankAReward;
    public int RankSMinPoint;
    public int RankSMaxPoint;
    public int RankSReward;
}

[MemoryPackable]
public partial class EventSortOutWaveRecord
{
    public int Id;
    public int Level;
    public int GainPoint;
    public int Box1Id;
    public int Box2Id;
    public int Box3Id;
    public int Box4Id;
    public int Box5Id;
    public int Box6Id;
    public int BoxSpecialId;
    public int BoxFeverId;
}

[MemoryPackable]
public partial class EventStackUpChallengeStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public float CharacterDefaultSpeed;
    public int DefaultObtainPoint;
    public float PerfectActionPointRate;
    public float PerfectActionLength;
    public float ObjectSpawnDistance;
    public int AutoIncreaseDifficultyFloor;
    public float CameraDefaultSpeed;
    public float ObjectDefaultLength;
}

[MemoryPackable]
public partial class EventStackUpStoryStageRecord
{
    public int Id;
    public int TimeDifficultGroup;
    public string? StageResourceId;
    public int ClearNumberFloors;
    public float CharacterDefaultSpeed;
    public int DefaultObtainPoint;
    public float PerfectActionPointRate;
    public float PerfectActionLength;
    public float ObjectSpawnDistance;
    public int AutoIncreaseDifficultyFloor;
    public float CameraDefaultSpeed;
    public float ObjectDefaultLength;
}

[MemoryPackable]
public partial class EventStackUpTimeDifficultRecord
{
    public int Id;
    public int GroupId;
    public int DifficultyStep;
    public int StackFloorMin;
    public int StackFloorMax;
    public float DifficultyPlaySpeed;
    public float AutoIncreasePlaySpeed;
}

[MemoryPackable]
public partial class EventStoryRecord
{
    public int Id;
    public int EventId;
    public StoryEventPartType PartType;
    public string? PrologueScenario;
    public int AutoChargeId;
    public RewardType EventItemType;
    public int EventItemId;
    public int DungeonId1;
    public int DungeonId2;
    public int AlbumCategoryGroup;
    public int MissionGroup;
    public int ContentsShopId;
    public int DiceId;
    public string? UiPrefab1;
    public string? UiPrefab2;
    public string? ChallengeMonsterResource;
}

[MemoryPackable]
public partial class EventTextAdventureEventPageRecord
{
    public int Id;
    public int ManagerId;
    public int FirstSelectId;
    public string? ResourceName;
    public string? ScenarioLocalkey;
    public string? Effect;
    public bool IsBgmTenssionUp;
    public EventTextAdventurePageType PageType;
    public int SelectOptionGroupId;
    public int GetLootItemId;
    public bool IsGoToFirstSelectPage;
    public int NextPageId;
    public string? ScenarioGroupId;
    public EventTextAdventureEndingType EndingType;
    public int EndingNum;
    public string? EndingSubTitleLocalkey;
    public string? EndingHintLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureFirstSelectRecord
{
    public int Id;
    public int FirstSelectGroupId;
    public string? FirstSelectResource;
    public string? FirstSelectLocalkey;
    public string? FirstSelectDescriptionLocalkey;
    public int NextPageId;
    public bool IsUseTimeCondition;
    public DateTime TimeCondition;
    public bool IsUseEndingCondition;
    public int EndingCondition;
    public bool ShowEndingCondition;
    public string? Effect;
    public string? SoundEffect;
    public string? NavigationIcon;
}

[MemoryPackable]
public partial class EventTextAdventureLocaleRecord
{
    public int Id;
    public string? FirstSelectDescriptionLocalkey;
    public string? LootitemNameLocalkey;
    public string? LootitemDescriptionLocalkey;
    public string? LootitemGainMessageLocalkey;
    public string? LootitemAlreadyGainLocalkey;
    public string? OpenConditionTimeLocalkey;
    public string? OpenConditionEndingLocalkey;
    public string? OpenConditionHiddenLocalkey;
    public string? AlbumLocalkey;
    public string? AlbumDescriptionLocalkey;
    public string? RewardDescriptionLocalkey;
    public string? RewardAlreadyReceivedLocalkey;
    public string? QuickEndLocalkey;
    public string? QuickEndStartButtonLocalkey;
    public string? QuickEndDescriptionLocalkey;
    public string? QuickEndAlertLocalkey;
    public string? LootitemButtonLocalkey;
    public string? AlbumButtonLocalkey;
    public string? GameStartButtonLocalkey;
    public string? RevertPageLocalkey;
    public string? DataSavingLocalkey;
    public string? PauseButtonLocalkey;
    public string? PauseLocalkey;
    public string? PauseDescriptionLocalkey;
    public string? EndingCollectAbleLocalkey;
    public string? EndingCollectDisableLocalkey;
    public string? EndingCollectInfinityModLocalkey;
    public string? TouchToGoRewardPageLocalkey;
    public string? TouchToEndLocalkey;
    public string? AdventureLocationLocalkey;
    public string? GameLoadLocalkey;
    public string? ToastCanNotSelectLocalkey;
    public string? ToastCurrencyTicketLackLocalkey;
    public string? ToastQuickEndOpenConditionLocalkey;
    public string? ToastRequireFirstSelectLocalkey;
    public string? ToastRequireEndingLocalkey;
    public string? ToastRequireLootItemLocalkey;
    public string? ToastEndingNotCollectedLocalkey;
    public string? EndingRecordSuccessLocalkey;
    public string? EndingRecordDeniedLocalkey;
    public string? RewardCountLeftLocalkey;
    public string? NoRewardInArchiveLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureLootItemRecord
{
    public int Id;
    public int ManagerId;
    public string? IconResource;
    public string? ItemNameLocalkey;
    public string? ItemDescriptionLocalkey;
}

[MemoryPackable]
public partial class EventTextAdventureManagerRecord
{
    public int Id;
    public int EventId;
    public bool IsArchiveEvent;
    public string? UiPrefab;
    public int FirstSelectGroupId;
    public int TicketAutoChargeId;
    public int RewardTicketAutoChargeId;
    public DateTime InfinityModActiveDate;
    public int RewardId;
    public string? FirstEnterScenarioGroupId;
    public int QuickEndEventPageId;
    public int QuickEndOpenConditionValue;
    public int HelpTipId;
    public int LocaleId;
}

[MemoryPackable]
public partial class EventTextAdventureSelectOptionRecord
{
    public int Id;
    public int GroupId;
    public int ManagerId;
    public string? SelectionLocalkey;
    public EventTextAdventureSelectionOpenType OpenConditionType;
    public int OpenConditionValue;
    public bool IsHidden;
    public int PageId;
    public string? Voice;
    public string? SoundEffect;
}

[MemoryPackable]
public partial class EventTowerDefenseArcadeManagerRecord_Raw
{
    public int Id;
    public int ArcadeEventId;
    public int ExistManagerId;
    public int ArcadeMissionGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseArchiveManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public int ExistManagerId;
}

[MemoryPackable]
public partial class EventTowerDefenseBuffRecord
{
    public int Id;
    public int ManagerId;
    public int BuffPriority;
    public bool IsCanStack;
    public string? BuffName;
    public string? BuffDescription;
    public TowerDefenseBuffTargetType BuffTarget;
    public TowerDefenseBuffEffectType BuffEffectType;
    public int BuffEffectValue;
    public string? BuffEffectResource;
    public string? BuffIconResource;
    public bool IsUseSpriteTint;
    public string? SetSpriteTint;
    public int SetSpriteTintAlphaValue;
    public int SetTransparent;
    public bool IsDefaultBuff;
}

[MemoryPackable]
public partial class EventTowerDefenseBurstDialogRecord
{
    public int Id;
    public int HeroGroupId;
    public string? Speaker;
    public string? ScenarioLocalkey;
    public int NikkeResourceId;
    public int NikkeCostumeIndex;
}

[MemoryPackable]
public partial class EventTowerDefenseCinematicRecord
{
    public int Id;
    public int StageId;
    public TowerDefenseCinematicStartConditionType StartConditionType;
    public int StartConditionValue;
    public int StartDelay;
    public TowerDefenseCinematicType CinematicType;
    public string? CinematicTypeValue;
    public int TowerSpawnDelay;
    public int TimelineActionStartFrame;
    public int TimelineActionEndFrame;
    public bool IsLoopAction;
}

[MemoryPackable]
public partial class EventTowerDefenseDebuffRecord
{
    public int Id;
    public int DebuffPriority;
    public string? DebuffName;
    public string? DebuffDescription;
    public TowerDefenseDebuffEffectType DebuffEffectType;
    public int DebuffEffectValue;
    public string? DebuffEffectResource;
    public bool IsUseSpriteTint;
    public string? SetSpriteTint;
    public int SetSpriteTintAlphaValue;
}

[MemoryPackable]
public partial class EventTowerDefenseManagerRecord
{
    public int Id;
    public int EventId;
    public EventTowerDefenseEventType EventType;
    public string? UiPrefabKeyword;
    public int HeroSlotOpenCost;
    public int HeroSlotOpenCostIncrease;
    public int TowerRefundPercentage;
    public int WaveQuickStartBurstSkillAcceleration;
    public int MonsterLimit;
    public int TowerBuildTime;
    public int TowerDemolishTime;
    public int AreaVerticalDiameter;
    public int UiControlGameSpeedDeceleration;
    public int ZoomMaxValue;
    public int ZoomSpeed;
    public int ResourceDefaultScale;
    public int MonsterDefaultScale;
    public string? UpgradeCurrencyResource;
    public string? UpgradeCurrencyName;
    public string? UpgradeCurrencyDescription;
    public int ToastMessagePrintTime;
    public string? DailyMissionToastMessageTitleLocale;
    public string? DailyMissionToastMessageLocale;
    public string? DailyMissionToastMessageIcon;
    public int DailyMissionToastMessagePrintValue;
    public string? AchievementMissionToastMessageTitleLocale;
    public string? AchievementMissionToastMessageIcon;
    public int IngameDialogPrintSpeed;
    public int BurstDialogPrintTime;
    public int BuffTerminationNoticeTime;
    public int BuffTerminationNoticeBlinkRate;
    public int StageClearDelay;
    public int BurstGuideToastHoldTime;
    public bool IsUse3XSpeed;
    public bool IsUseWaveInfo;
    public string? FirstEntryMessageLocalkey;
}

[MemoryPackable]
public partial class EventTowerDefenseMissionRecord
{
    public int Id;
    public int MinigameManagerId;
    public int ArcadeMissionGroupId;
    public string? MissionLocalkey;
    public EventTowerDefenseMissionCategory MissionCategory;
    public EventTowerDefenseMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public List<missionvaluedata>? MissionValue;
    public EventTowerDefenseMissionRewardType RewardType;
    public int RewardValue;
}

[MemoryPackable]
public partial class EventTowerDefenseMonsterSkillRecord
{
    public int Id;
    public int MonsterSkillOrder;
    public string? MonsterSkillName;
    public string? MonsterSkillDescription;
    public TowerDefenseMonsterSkillActiveType MonsterSkillActiveType;
    public int MonsterSkillActiveValue;
    public int SkillCastTime;
    public TowerDefenseMonsterSkillType MonsterSkillType;
    public List<MonsterSkillTypeValueListData>? MonsterSkillTypeValueList;
    public string? MonsterSkillResourceEffect;
    public int SkillEffectDelay;
    public string? MonsterSkillResourceEffect2;
    public int SkillEffectDelay2;
    public string? MonsterSkillResourceAreaEffect;
}

[MemoryPackable]
public partial class EventTowerDefenseMonsterRecord
{
    public int Id;
    public int ManagerId;
    public TowerDefenseMonsterGradeType MonsterGrade;
    public string? MonsterName;
    public string? MonsterDescription;
    public string? MonsterIcon;
    public string? MonsterResource;
    public int MonsterAnimSpeed;
    public int MonsterScale;
    public int MonsterHitDetectionRadius;
    public int MonsterHp;
    public int MonsterDef;
    public int MonsterSpeed;
    public TowerDefenseMonsterMoveType MoveType;
    public List<MonsterSkillListData>? MonsterSkillList;
    public bool IsUseNextPhase;
    public int NextPhaseMonsterId;
    public int NextPhaseMonsterSpawnCount;
    public int NextPhaseMonsterSpawnRadius;
    public int DefensePointDecrease;
    public int GoldReward;
    public int SkillUnusableTime;
    public int ChallengeScore;
}

[MemoryPackable]
public partial class EventTowerDefenseScenarioGroupRecord
{
    public int Id;
    public int ManagerId;
    public int StageId;
    public TowerDefenseDialogOutputConditionType OutputConditionType;
    public int OutputConditionValue;
    public int DelayTime;
    public int DialogListGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseScenarioListRecord
{
    public int Id;
    public int DialogListGroupId;
    public string? Speaker;
    public TowerDefenseDialogSpeakerPositionType SpeakerPosition;
    public TowerDefenseDialogSpeakerTeamType SpeakerTeam;
    public string? ScenarioLocalkey;
    public string? PrintCutscene;
    public bool IsEndCutscene;
}

[MemoryPackable]
public partial class EventTowerDefenseSpeakerRecord
{
    public string? Id;
    public string? SpeakerName;
    public string? SpeakerPortrait;
}

[MemoryPackable]
public partial class EventTowerDefenseStageRecord
{
    public int Id;
    public int ManagerId;
    public int EventStoryId;
    public TowerDefenseStageType StageType;
    public int StageOrder;
    public string? StageNameLocalkey;
    public string? StageShortNameLocalkey;
    public string? StageDescriptionLocalkey;
    public string? StageInfoImage;
    public bool IsEventStoryStage;
    public string? EventStoryStageLockedAlertMessage;
    public int OpenConditionEventStoryStage;
    public int OpenConditionArchiveEventStoryStage;
    public string? OpenConditionEventStoryStageLocale;
    public int OpenConditionTdStage;
    public DateTime OpenConditionTime;
    public string? TowerDefenseStageMapPrefab;
    public int WaveDataGroupId;
    public int DefensePoint;
    public int StartGold;
    public int MaxHeroSlot;
    public int HeroSlotOpenCount;
    public TowerDefenseClearConditionType StageClearConditionType;
    public int StageClearConditionValue;
    public int StageFirstClearReward;
    public int StageFirstClearUpgradeCurrencyReward;
    public string? EnterScenario;
    public string? ExitScenario;
    public int StageSelectTutorialId;
}

[MemoryPackable]
public partial class EventTowerDefenseTowerSkillRecord
{
    public int Id;
    public int SkillGroupId;
    public TowerDefenseSkillSystemType SkillSystemType;
    public string? SkillName;
    public string? SkillDescription;
    public string? SkillDescriptionShort;
    public string? SkillIcon;
    public string? SkillIconBackground;
    public string? SkillProjectile;
    public TowerDefenseTowerSkillProjectileMuzzleType SkillProjectileMuzzleType;
    public string? SkillFireEffect;
    public string? SkillHitEffect;
    public TowerDefenseSkillHitEffectType SkillHitEffectType;
    public string? SkillAuraEffect;
    public TowerDefenseSkillAuraEffectType SkillAuraEffectType;
    public TowerDefenseTowerSkillAuraEffectTargetType SkillAuraEffectTargetType;
    public int SkillAuraEffectHoldTime;
    public string? SkillAreaEffect;
    public TowerDefenseSkillAreaEffectType SkillAreaEffectType;
    public bool SkillSpineResourceParameterOn;
    public int SkillSpineResourceParameterHoldTime;
    public bool UseSkillSpineAnimation;
    public int SkillLevel;
    public int SkillCost;
    public TowerDefenseSkillUseType SkillUseType;
    public int SkillCoolTime;
    public int SkillUseAttackCount;
    public TowerDefenseSkillType SkillType;
    public TowerDefenseTowerAttackPriorityType SkillTargetSelectPriority;
    public int SkillEffectRange;
    public int SkillInstantEffectApplyDelay;
    public int SkillMissileProjectileCount;
    public int SkillMissileProjectileFireDelay;
    public int SkillProjectileApproachTime;
    public int SkillProjectileMaxHeight;
    public int SkillProjectileMissilePropulsionStartTiming;
    public int SkillAreaHoldTime;
    public int SkillAreaEffectDuration;
    public int SkillNormalAttackEnhanceTime;
    public List<SkillEffectListData>? SkillEffectList;
}

[MemoryPackable]
public partial class EventTowerDefenseTowerRecord
{
    public int Id;
    public int ManagerId;
    public int TowerGroupId;
    public int LinkedGroupId;
    public bool IsForCinematic;
    public TowerDefenseTowerType TowerType;
    public string? TowerName;
    public string? TowerDescription;
    public string? TowerResource;
    public string? TowerProjectile;
    public string? TowerHitEffect;
    public string? TowerIcon;
    public int TowerLevel;
    public int TowerCost;
    public int TowerOpenConditionStageOrder;
    public int TowerOpenConditionStageClear;
    public TowerDefenseTowerReinforceType TowerReinforceType;
    public int TowerReinforceValue01;
    public int TowerReinforceValue02;
    public int AttackRange;
    public TowerDefenseTowerAttackPriorityType AttackPriority01;
    public TowerDefenseTowerAttackPriorityType AttackPriority02;
    public TowerDefenseTowerAttackType AttackType;
    public int AttackEffectRange;
    public int AttackTargetCount;
    public int AttackProjectileApproachTime;
    public int AttackProjectileMaxHeight;
    public int AttackProjectileMissilePropulsionStartTiming;
    public TowerDefenseTowerAttackMovementType AttackMovementType;
    public int TowerStatAtk;
    public int TowerStatDefPenetration;
    public int TowerStatRpm;
    public string? TowerRpmText;
    public int TowerStatCastDelay;
    public int ApplyDebuff;
    public int ApplyChance;
    public int ApplyDebuffHoldTime;
    public TowerDefenseHitEffectPrintType HitEffectPrintType;
    public List<TowerSkillListData>? TowerSkillList;
    public int TowerBurstSkill;
    public int TowerDefaultBuff;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialListRecord
{
    public int Id;
    public int GroupId;
    public int TutorialPageGroupId;
    public EventTowerDefenseTutorialType TutorialType;
    public EventTowerDefenseTutorialButtonType ButtonType;
    public string? ButtonValue;
    public EventTowerDefenseTutorialOutputType TutorialOutputType;
    public int TutorialOutputValue;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialPageRecord
{
    public int Id;
    public int GroupId;
    public EventTowerDefenseTutorialPageType PageType;
    public int PageOrder;
    public bool IsAvailableInArcade;
    public string? ImageResource;
    public string? PageTitleLocalkey;
    public string? TutorialLocalkey;
}

[MemoryPackable]
public partial class EventTowerDefenseTutorialRecord
{
    public int Id;
    public int MinigameManagerId;
    public int TutorialListGroupId;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class EventTowerDefenseUpgradeGroupRecord
{
    public int Id;
    public int ManagerId;
    public int UpgradeGroupOrder;
    public string? UpgradeGroupIcon;
    public TowerDefenseUpgradeTargetType UpgradeTargetType;
    public int UpgradeTargetTowerGroupId;
    public int UpgradeListGroupId;
}

[MemoryPackable]
public partial class EventTowerDefenseUpgradeListRecord
{
    public int Id;
    public int GroupId;
    public int UpgradeListOrder;
    public string? UpgradeName;
    public string? UpgradeDescription;
    public string? UpgradeIcon;
    public int UpgradeCost;
    public TowerDefenseUpgradeType UpgradeEffectType;
    public int UpgradeEffectValue;
}

[MemoryPackable]
public partial class EventTowerDefenseWaveDataRecord
{
    public int Id;
    public int WaveDataGroupId;
    public int WaveOrder;
    public int WaveStartWaitingTime;
    public int WaveFastStartRewardGold;
    public int NextWaveCallTime;
    public int NextWaveCallMonsterKillId;
    public TowerDefenseWaveType WaveType;
    public int WavePathGroupId;
    public int WaveRepresentMonster;
    public int ChallengeScore;
}

[MemoryPackable]
public partial class EventTowerDefenseWavePathRandomRecord
{
    public int Id;
    public int RandomGroupId;
    public int WavePathGroupId;
    public int RandomChance;
    public int WaveRepresentMonster;
}

[MemoryPackable]
public partial class EventTowerDefenseWavePathRecord
{
    public int Id;
    public int WavePathGroupId;
    public int SpawnStartTime;
    public int SpawnMonsterId;
    public int SpawnCount;
    public int SpawnDelay;
    public string? StartingPointGroup;
    public TowerDefenseStartingPointType StartingPointType;
    public int StartingPointMinOrder;
    public int StartingPointMaxOrder;
    public int ForcedStartingPointIndex;
}

[MemoryPackable]
public partial class EventYXMiniGameProfileRecord_Raw
{
    public EventSystemType EventSystemType;
    public string? ProfleAddressable;
}

[MemoryPackable]
public partial class ExtraStageListRecord
{
    public int Id;
    public int CampaignStageId;
    public int Chapter;
    public int ExtraOpenCondition;
}

[MemoryPackable]
public partial class FavoriteItemExpRecord
{
    public int Id;
    public FavoriteItemRare FavoriteRare;
    public int Level;
    public int NeedExp;
}

[MemoryPackable]
public partial class FavoriteItemLevelRecord
{
    public int Id;
    public int LevelEnhanceId;
    public int Grade;
    public int Level;
    public List<FavoriteItemStatData>? FavoriteitemStatData;
    public List<CollectionItemSkillLevelData>? CollectionSkillLevelData;
}

[MemoryPackable]
public partial class FavoriteItemProbabilityRecord
{
    public int Id;
    public int ProbabilityGroup;
    public int LevelMin;
    public int LevelMax;
    public int NeedItemId;
    public int NeedItemCount;
    public int Exp;
    public int GreatSuccessRate;
    public int GreatSuccessLevel;
}

[MemoryPackable]
public partial class FavoriteItemQuestStageRecord
{
    public int Id;
    public int GroupId;
    public int ChapterId;
    public ChapterMod ChapterMod;
    public int NameCode;
    public int SpawnConditionFavoriteitemQuestId;
    public int SpawnConditionFavoriteitemQuestStageId;
    public int SpawnConditionCampaignStageId;
    public int EnterConditionFavoriteitemQuestId;
    public int EnterConditionFavoriteitemQuestStageId;
    public int EnterConditionCampaignStageId;
    public string? NameLocalkey;
    public StageCategory StageCategory;
    public bool SpotAutocontrol;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public int FieldMonsterId;
    public int SpotId;
    public int StateEffectFunctionId;
    public int RewardId;
    public ScenarioType EnterScenarioType;
    public string? EnterScenario;
    public ScenarioType ExitScenarioType;
    public string? ExitScenario;
    public int FixedPlayCharacterId;
    public int CharacterLv;
}

[MemoryPackable]
public partial class FavoriteItemQuestRecord
{
    public int Id;
    public int NameCode;
    public Category ConditionType;
    public int ConditionValue;
    public string? ConditionUiLocalkey;
    public string? QuestThumbnailResourceId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int NextQuestId;
    public string? EndScenarioId;
    public int RewardId;
}

[MemoryPackable]
public partial class FavoriteItemRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? IconResourceId;
    public string? ImgResourceId;
    public string? PropResourceId;
    public int Order;
    public FavoriteItemRare FavoriteRare;
    public FavoriteItemType FavoriteType;
    public WeaponType WeaponType;
    public int NameCode;
    public int MaxLevel;
    public int LevelEnhanceId;
    public int ProbabilityGroup;
    public List<CollectionSkillGroupData>? CollectionSkillGroupData;
    public List<FavoriteItemSkillGroupData>? FavoriteitemSkillGroupData;
    public int AlbumcategoryId;
}

[MemoryPackable]
public partial class FieldInteractionActionTriggerRecord
{
    public int Id;
    public bool IsArchiveData;
    public FieldInteractionActionTriggerFieldType FieldType;
    public int FieldId;
    public FieldInteractionActionTriggerFieldDifficultyType FieldDifficulty;
    public List<StoryEventIdListData_Raw>? StoryEventIdList;
    public FieldInteractionActionTriggerType TriggerType;
    public string? TriggerTypeValue;
    public FieldInteractionActionQuestType QuestType;
    public bool IsAwakeLoad;
    public bool IsUseSpawnCondition;
    public DateTime SpawnConditionTime;
    public int SpawnConditionStage;
    public int SpawnConditionMission;
    public int SpawnConditionInteractionActionTrigger;
    public int SpawnConditionFieldItem;
    public bool IsUseDespawnCondition;
    public DateTime DespawnConditionTime;
    public int DespawnConditionStage;
    public int DespawnConditionMission;
    public int DespawnConditionInteractionActionTrigger;
    public int DespawnConditionFieldItem;
    public FieldInteractionActionActiveType TriggerActiveType;
    public FieldInteractionActionActionType TriggerActionType;
    public int TriggerActionValue;
    public string? InteractionMarkerResource;
    public bool IsRepeatStopOnOverlap;
    public bool IsUseCameraAction;
    public bool IsUseHudHide;
    public bool IsUseFadeInOut;
    public int FadeInOutDelay;
    public int OutroFadeInOutStartTime;
}

[MemoryPackable]
public partial class FieldItemRecord
{
    public int Id;
    public FieldItemType ItemType;
    public int TypeValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? FielditemPrefab;
    public ObtainContentsType ObtainContents;
    public int ObtainLocation;
    public FieldItemObtainDifficulty Difficulty;
    public string? ObtainScenario;
    public bool IsFinalReward;
    public int BlueprintId;
    public DateTime SpawnTime;
    public DateTime DespawnTime;
    public bool IsArchiveFieldItem;
    public int SpawnConditionStage;
    public int StoryEventId;
    public int SpawnConditionItem;
    public int SpawnConditionInteractionActionTrigger;
    public int SpawnDelayInteractionActionTrigger;
    public bool IsUseHint;
}

[MemoryPackable]
public partial class FieldMapRecord
{
    public string? Id;
    public List<DefaultSpawnerData>? CameraPoint;
    public List<DefaultSpawnerData>? StartingPoint;
    public List<SupplyPointData>? SupplyPoint;
    public List<DefaultSpawnerData>? AssistSquadSpawner;
    public List<DefaultSpawnerData>? CharacterSpawner;
    public List<InteractionObjectData>? InteractionObjectSpawner;
    public List<ItemSpawnerData>? ItemSpawner;
    public List<NPCSpawnerData>? NpcSpawner;
    public List<QuestObjectData>? QuestObjectSpawner;
    public List<DefaultSpawnerData>? SquadSpawner;
    public List<StageSpawnerData>? StageSpawner;
    public List<DoorSpawnerData>? Door;
    public List<PasswordDoorSpawnerData_Raw>? PasswordDoor;
    public List<LevelTriggerData>? LargeLevelTrigger;
    public List<LevelTriggerData>? LevelTrigger;
    public List<DefaultSpawnerData>? Portal;
    public List<DefaultSpawnerData>? PortalSet;
    public List<DefaultSpawnerData>? SquadEdit;
    public List<DefaultSpawnerData>? MovePoint;
    public List<DefaultSpawnerData>? OutpostBattleBoxSpawner;
    public List<DefaultSpawnerData>? RoamingCharacterMovePoint;
    public List<DefaultSpawnerData>? BuildingSpawner;
    public List<DefaultSpawnerData>? EnterBuilding;
    public List<DefaultSpawnerData>? MonsterSpawner;
    public List<EventTargetSpawnerData>? EventTargetSpawner;
    public List<PasswordSpawnerData_Raw>? PasswordSpawner;
    public List<LevelTriggerData>? ConvertLevelTrigger;
    public List<DefaultSpawnerData>? ConvertTile;
    public List<LevelTriggerData>? EchoDialogueTrigger;
}

[MemoryPackable]
public partial class FieldPasswordCharacterRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public string? PasswordCharacterResource;
}

[MemoryPackable]
public partial class FieldPasswordCodeRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public int Input;
}

[MemoryPackable]
public partial class FieldPasswordDoorRecord_Raw
{
    public int Id;
    public string? UiPrefabResource;
    public int PasswordId;
    public int InteractionDistance;
    public string? InteractionMarker;
    public int HintPrintTime;
    public bool IsUseMinimapHint;
    public string? MinimapHintIcon;
}

[MemoryPackable]
public partial class FieldPasswordRecord_Raw
{
    public int Id;
    public string? UiPrefabResource;
    public int PasswordCharacterGroupId;
    public int PasswordCodeGroupId;
    public string? PasswordDescription;
    public string? FielditemPrefab;
    public ObtainContentsType ObtainContents;
    public int ObtainLocation;
    public FieldItemObtainDifficulty Difficulty;
    public string? ObtainScenario;
    public bool IsFinalReward;
    public DateTime SpawnTime;
    public bool IsArchivePassword;
    public int SpawnConditionStage;
    public int StoryEventId;
    public int SpawnConditionItem;
    public int SpawnConditionInteractionActionTrigger;
    public int SpawnDelayInteractionActionTrigger;
    public int SpawnConditionPasswordDoorOpen;
    public bool IsUseMinimapHint;
    public string? MinimapHintIcon;
}

[MemoryPackable]
public partial class FieldTalkDialogRecord
{
    public string? Id;
    public string? GroupId;
    public SpeechWindowType SpeechWindow;
    public string? SpeakName;
    public string? PlayAnimation;
    public string? ScenarioLocalekey;
    public string? PlaySound;
    public string? PlayBgm;
}

[MemoryPackable]
public partial class FieldTriggerControlRecord_Raw
{
    public int Id;
    public FieldTriggerFieldType FieldType;
    public bool IsUseSpawnCondition;
    public int SpawnConditionStage;
    public DateTime SpawnConditionTime;
    public bool IsUseDespawnCondition;
    public int DespawnConditionStage;
    public DateTime DespawnConditionTime;
    public bool IsUseStateChangeCondition;
    public int StateChangeConditionStage;
    public DateTime StateChangeConditionTime;
}

[MemoryPackable]
public partial class FishingCastingRecord
{
    public int Id;
    public int CastingSpeed;
    public int CastingGroupStart01;
    public int CastingGroupEnd01;
    public FishGroupType Casting01BonusGroup;
    public int CastingGroupStart02;
    public int CastingGroupEnd02;
    public FishGroupType Casting02BonusGroup;
    public int CastingGroupStart03;
    public int CastingGroupEnd03;
    public FishGroupType Casting03BonusGroup;
}

[MemoryPackable]
public partial class FishingManagerRecord
{
    public int Id;
    public int EventId;
    public bool IsArchiveEvent;
    public string? EnterScenario;
    public string? UseFishCollectionData;
    public int UseSpotGroupId;
    public int CastingBonusRatio;
    public int CastingLimitTime;
    public int SpecialPatternDecreaseHpRatio;
    public int JudgmentStartDistance;
    public int PerfectZoneDistance;
    public int GreatZoneDistance;
    public int GoodZoneDistance;
    public int PerfectDecreaseHp;
    public int GreatDecreaseHp;
    public int GoodDecreaseHp;
    public int SmallHpDecreaseRatio;
    public int MidHpDecreaseRatio;
    public int LargeHpDecreaseRatio;
    public int PenaltyHp;
    public int TimeAlert;
    public int GainGoldRatio;
    public int CatchDoubleRatio;
    public int FishingMaximumSizeRatio;
    public int PatternStartDelayTime;
    public int ResultWindowDelayTime;
}

[MemoryPackable]
public partial class FishingSpotRecord
{
    public int Id;
    public int FishingManagerId;
    public int GroupId;
    public bool IsRareSpot;
    public AdventureSpotOpenCondition OpenCondition;
    public int OpenConditionValue;
    public int SpawnDayStart;
    public int SpawnDayEnd;
    public List<catchable_group_list>? CatchableGroupList;
    public int CastingId;
    public bool IsInfinity;
    public int CatchableCount;
    public string? SpotFishEffectResource;
    public string? SpotOutlineEffectResource;
    public int SmallFishingRatio;
    public int MidFishingRatio;
    public int LargeFishingRatio;
    public int CameraZoomIn;
}

[MemoryPackable]
public partial class FishPatternDirectionRecord
{
    public int Id;
    public string? ResourceId;
}

[MemoryPackable]
public partial class FishPatternRecord
{
    public int Id;
    public int TimeLimit;
    public int PatternSpeed;
    public int PatternTerm;
    public int PatternNormalId;
    public int PatternLeftAppearanceProbability;
    public int PatternRightAppearanceProbability;
    public int PatternUpAppearanceProbability;
    public int PatternDownAppearanceProbability;
    public int PatternSpecialId;
    public int SpecialPatternAppearanceRatio;
    public bool SpecialPatternLeftUse;
    public bool SpecialPatternRightUse;
    public bool SpecialPatternUpUse;
    public bool SpecialPatternDownUse;
}

[MemoryPackable]
public partial class FishRecord
{
    public int Id;
    public int GroupId;
    public FishGroupType FishGroup;
    public string? NameLocale;
    public string? DescriptionLocale;
    public string? CatchResource;
    public int FishPattern;
    public int FishHp;
    public int CatchPoint;
    public int MinSize;
    public int MaxSize;
    public int AppearanceRatio;
    public int CatchableTime;
}

[MemoryPackable]
public partial class FixedPlayCharacterRecord
{
    public int Id;
    public int GroupId;
    public FixedPlayCharacterContentsType FixContentsType;
    public int Slot;
    public bool IsUseSd;
    public bool IsSlotOpen;
    public int CharacterId;
    public int CostumeIndex;
    public int CharacterLevel;
    public int AttractiveLevel;
    public List<FixedEquipmentData>? EquipmentArray;
}

[MemoryPackable]
public partial class FreeRewardPassManagerRecord_Raw
{
    public int Id;
    public int EventId;
    public int MissionGroupId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int RankSkipCurrencyId;
    public int RankSkipCurrencyValue;
    public string? PassLobbyButtonResourceId;
    public string? PrefabId;
}

[MemoryPackable]
public partial class FreeRewardPassMissionRecord_Raw
{
    public int Id;
    public int MissionGroupId;
    public RenewType RenewType;
    public int Order;
    public MissionTriggerType MissionTriggerType;
    public Trigger TriggerConditionType;
    public int TriggerConditionId;
    public int TriggerConditionValue;
    public DataCheckForPass DatacheckConditionType;
    public int DatacheckConditionId;
    public int DatacheckConditionValue;
    public string? NameLocalkey;
    public int PointValue;
}

[MemoryPackable]
public partial class FreeRewardPassRecord_Raw
{
    public int Id;
    public int PassId;
    public int PassRank;
    public int TotalRequiredPoint;
    public int RewardId;
    public bool IsHighlight;
}

[MemoryPackable]
public partial class GachaCustomizeRecord
{
    public int Id;
    public GachaCategory GachaType;
    public int GachaId;
    public bool IsCharPremium;
    public bool IsWishListDefault;
}

[MemoryPackable]
public partial class GachaListProbRecord
{
    public int Id;
    public int GroupId;
    public GachaCategory GachaType;
    public GachaSubType GachaSubType;
    public int GachaId;
    public int Prob;
}

[MemoryPackable]
public partial class GachaPaybackStepRecord_Raw
{
    public int Id;
    public int PaybackId;
    public int Step;
    public int GachaCount;
    public int RewardId;
}

[MemoryPackable]
public partial class GachaPaybackRecord_Raw
{
    public int Id;
    public int EventId;
    public int GachaId;
    public int CharacterId;
    public string? UiPrefabMain;
    public string? UiPrefabSub;
}

[MemoryPackable]
public partial class GachaPityCharacterRecord_Raw
{
    public int Id;
    public int GroupId;
    public int CharacterId;
    public int Order;
}

[MemoryPackable]
public partial class GachaPityRecord_Raw
{
    public int Id;
    public int GachaTypeId;
    public int PityAmount;
    public int NeedGachaCount;
    public int PityCharacterGroup;
    public int RewardAmount;
    public DateTime StartDate;
    public DateTime EndDate;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int HelptipGroupId;
    public string? UiBannerPrefab;
    public string? UiPopupPrefab;
}

[MemoryPackable]
public partial class GachaPriceObjectRecord_Raw
{
    public int Id;
    public int Object0;
    public int Object1;
    public int Object2;
    public int Object3;
    public int Object4;
}

[MemoryPackable]
public partial class GachaSelectupListRecord_Raw
{
    public int Id;
    public int GachaTypeId;
    public int Order;
    public int CharacterId;
    public bool IsDefault;
}

[MemoryPackable]
public partial class GachaTypeRecord
{
    public int Id;
    public GachaPremiumType Type;
    public int OrderId;
    public int EventId;
    public GachaProvideCountType GachaProvideCountType;
    public bool UseDailyDiscountOne;
    public int DailyFreeGachaEventId;
    public int GachaPriceObjectId;
    public List<GachaPrice_Data>? GachaPriceGroup;
    public int GradeProbId;
    public bool IsMaxCount;
    public int MaxCeilingCount;
    public int FixedCharAmount;
    public string? GachaPagePrefab;
    public GachaPrefabType GachaPrefabType;
    public int PickupCharGroupId;
    public int GachaPlayMaxCount;
    public int GachaRewardId;
    public int GachaPlayMaxCountRewardId;
    public int PreviousGachaId;
    public string? GachaQuickBannerResourceId;
}

[MemoryPackable]
public partial class GradeCoreEquipmentRecord
{
    public int Id;
    public int Grade;
    public int MaxLevel;
    public int MaxGrade;
    public int MaterialValue;
    public string? Rarity;
}

[MemoryPackable]
public partial class GradeCoreRecord
{
    public int Id;
    public OriginalRareType Rare;
    public int Grade;
    public int Core;
    public int MaxLevel;
    public int PieceValue;
    public int MaxAttractiveLevel;
}

[MemoryPackable]
public partial class GrindingCharacterRecord
{
    public int Id;
    public OriginalRareType Rarity;
    public Reward_Data? Reward;
}

[MemoryPackable]
public partial class GuildRecord
{
    public int Grade;
    public int Exp;
    public int MaxMemberCount;
    public int MaxActivityPoint;
}

[MemoryPackable]
public partial class HelpTipDescriptionRecord
{
    public int Id;
    public int Group;
    public int Order;
    public HelpTipDescriptionType Type;
    public string? Value;
}

[MemoryPackable]
public partial class HelpTipRecord
{
    public int Id;
    public int ViewId;
    public int ViewSubId;
    public string? Title;
    public int DescriptionGroup;
    public ContentsTutorialSubGroup HudTutorialReplay;
}

[MemoryPackable]
public partial class InAppShopManagerRecord
{
    public int Id;
    public CashshopMainCategoryType MainCategoryType;
    public int OrderGroupId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? MainCategoryIconName;
    public int SubCategoryId;
    public string? SubCategoryNameLocalkey;
    public int PackageShopId;
    public bool IsHideIfNotValid;
    public RenewType RenewType;
    public DateTime StartDate;
    public DateTime EndDate;
    public bool DateUiControl;
    public InAppShopType ShopType;
    public InAppShopCategory ShopCategory;
    public string? ShopPrefabName;
}

[MemoryPackable]
public partial class InfraCoreFunctionRecord
{
    public int Id;
    public InfraCoreFunctionType FunctionType;
    public string? FunctionLocalkey;
    public int Order;
    public bool IsHidden;
}

[MemoryPackable]
public partial class InfraCoreGradeRecord
{
    public int Id;
    public int Grade;
    public int InfraCoreExp;
    public int RewardId;
    public List<InfraCoreGradeData>? FunctionList;
}

[MemoryPackable]
public partial class InterceptAnomalousManagerRecord_Raw
{
    public int Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public int Group;
}

[MemoryPackable]
public partial class InterceptAnomalousRecord_Raw
{
    public int Id;
    public int Group;
    public string? Name;
    public string? Description;
    public string? Thumbnail;
    public string? MonsterSpine;
    public int MonsterSpineScale;
    public int Order;
    public int LimitCharacterLv;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public int MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public int SpotId;
    public int DummySpotId;
    public int AutoChargeId;
    public int TicketCount;
    public string? RewardInfoIcon;
    public string? RewardInfoLocale;
    public bool UseRewardPriority;
    public int PriorityGrade;
    public int ConditionRewardGroup;
    public List<percent_condition_reward_group_data_Raw>? PercentConditionRewardGroups;
    public bool UseFixedResult;
    public int FixedDamage;
    public string? BgColor;
    public int ResultCharacterResourceId;
    public InterceptAnomalousRecommendConditionType RecommendConditionType;
    public string? RecommendConditionValue;
    public int RecommendConditionCount;
}

[MemoryPackable]
public partial class InterceptNormalManagerRecord
{
    public int Id;
    public int Group;
}

[MemoryPackable]
public partial class InterceptNormalRecord
{
    public int Id;
    public int Group;
    public InterceptType Type;
    public string? Name;
    public string? ShortName;
    public string? Description;
    public string? Thumbnail;
    public string? MonsterSpine;
    public int MonsterSpineScale;
    public int Order;
    public int CharacterLv;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public int MonsterStageLvChangeGroup;
    public InterceptSpotType SpotType;
    public int SpotId;
    public int DummySpotId;
    public int AutoChargeId;
    public int TicketCount;
    public int ConditionRewardGroup;
    public int PercentConditionRewardGroup;
    public bool UseRewardPriority;
    public int PriorityGrade;
    public bool UseFixedResult;
    public int FixedDamage;
    public int ResultCharacterResourceId;
}

[MemoryPackable]
public partial class InterceptSpecialManagerRecord
{
    public int Id;
    public int Group;
    public int StartId;
}

[MemoryPackable]
public partial class IslandAdventureAlbumRecord
{
    public int Id;
    public int GroupId;
    public PhotoSpotType PhotoGroup;
    public int Order;
    public int PhotoPoint;
    public int PhotoSpotId;
}

[MemoryPackable]
public partial class IslandAdventureFishCollectionRecord
{
    public int Id;
    public int GroupId;
    public FishGroupType FishGroup;
    public int Order;
    public int FishPoint;
    public int FishId;
}

[MemoryPackable]
public partial class IslandAdventureItemRecord
{
    public int Id;
    public IslandAdventureItemGroupType ItemGroup;
    public int ItemOrder;
    public bool FirstItem;
    public string? ItemResource;
    public string? ItemNameLocale;
    public string? ItemDescriptionLocale;
    public List<ItemOptionLocaleData>? ItemOptionLocale;
    public int MaximumAmount;
    public List<ItemOptionData>? ItemOption;
}

[MemoryPackable]
public partial class IslandAdventureManagerRecord
{
    public int Id;
    public int EventId;
    public bool IsArchiveEvent;
    public string? EnterScenario;
    public int FishCollectionGroup;
    public int FishStepUpRewardGroupId;
    public int AlbumDataGroup;
    public int PhotoStepUpRewardGroupId;
    public int ShopDataGroup;
    public int UnionRankDataGroup;
}

[MemoryPackable]
public partial class IslandAdventureMissionRecord
{
    public int Id;
    public int ManagerId;
    public string? MissionLocalkey;
    public EventIslandAdventureMissionCategory MissionCategory;
    public EventIslandAdventureMissionType MissionType;
    public int MissionTargetId;
    public int MissionCount;
    public EventIslandAdventureMissionRewardType RewardType;
    public int RewardValue;
}

[MemoryPackable]
public partial class IslandAdventureShopRecord
{
    public int Id;
    public int GroupId;
    public IslandAdventureItemGroupType ItemGroup;
    public bool RepeatPurchase;
    public bool IsOpened;
    public IslandAdventureItemOpenType OpenConditionType;
    public int OpenConditionValue;
    public int ShopItemOrder;
    public int ItemPrice;
    public int ItemId;
}

[MemoryPackable]
public partial class IslandAdventureStepUpRewardRecord
{
    public int Id;
    public int GroupId;
    public int Step;
    public int TargetPoint;
    public int RewardId;
}

[MemoryPackable]
public partial class IslandAdventureTutorialListRecord
{
    public int Id;
    public int ManagerId;
    public int TutorialPageId;
    public IslandAdventureTutorialOutputType TutorialOutputType;
    public int TutorialOutputValue;
    public string? TutorialTitleLocalkey;
    public bool IsOpened;
}

[MemoryPackable]
public partial class IslandAdventureUnionRankingRecord
{
    public int Id;
    public int GroupId;
    public IslandAdventureUnionRankingGroup RankType;
}

[MemoryPackable]
public partial class ItemEquipCombinationGroupRecord_Raw
{
    public int Id;
    public ItemEquipCombinationGroupType OptionGroup;
    public int Order;
    public ItemEquipCombinationOptionType OptionType;
    public string? NameLocalekey;
    public string? IconId;
}

[MemoryPackable]
public partial class ItemEquipCombinationListRecord_Raw
{
    public int Id;
    public List<OptionType_Raw>? OptionType;
    public int RandomGroupId;
}

[MemoryPackable]
public partial class ItemEquipCombinationRecord_Raw
{
    public int Id;
    public CorporationType MaterialType;
    public EquipmentRarityType MaterialGrade;
    public int MaterialCount;
    public List<OptionGroup_Raw>? OptionGroup;
}

[MemoryPackable]
public partial class ItemEquipCorpSettingRecord
{
    public int Id;
    public RewardType Key;
    public CorporationType CorpType;
    public string? CorpDescriptionLocalkey;
    public int RatioNone;
    public int RatioMissilis;
    public int RatioElysion;
    public int RatioTetra;
    public int RatioPilgrim;
    public int RatioAbnormal;
}

[MemoryPackable]
public partial class ItemEquipExpRecord
{
    public int Id;
    public EquipmentRarityType ItemRare;
    public int GradeCoreId;
    public int Level;
    public int Exp;
}

[MemoryPackable]
public partial class ItemEquipGradeExpRecord
{
    public int Id;
    public EquipmentRarityType ItemRare;
    public int GradeCoreId;
    public int Exp;
}

[MemoryPackable]
public partial class ItemEquipRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public CharacterClassType Class;
    public EquipmentRarityType ItemRare;
    public int GradeCoreId;
    public int GrowGrade;
    public List<StatData>? Stat;
    public List<OptionSlot>? OptionSlot;
    public int OptionCost;
    public int OptionChangeCost;
    public int OptionLockCost;
}

[MemoryPackable]
public partial class ItemMaterialRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public int ItemValue;
    public MaterialType MaterialType;
    public int MaterialValue;
    public int StackMax;
}

[MemoryPackable]
public partial class ItemPieceRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ResourceId;
    public ItemType ItemType;
    public ItemSubType ItemSubType;
    public OriginalRareType ItemRare;
    public CorporationType Corporation;
    public CorporationSubType CorporationSubType;
    public CharacterClassType Class;
    public ItemUseType UseType;
    public int UseId;
    public int UseValue;
    public bool UseLimitCount;
    public int UseLimitCountValue;
    public int StackMax;
}

[MemoryPackable]
public partial class ItemRandomRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public RewardType RewardType;
    public int RewardId;
    public int RewardValueMin;
    public int RewardValueMax;
    public int Ratio;
}

[MemoryPackable]
public partial class ItemSelectOptionRowRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public RewardType SelectType;
    public int SelectId;
    public int SelectValue;
}

[MemoryPackable]
public partial class JukeboxListRecord
{
    public int Id;
    public int Theme;
    public string? Bgm;
    public bool IsLoop;
    public int PlayTime;
    public string? Name;
    public int Order;
    public string? Artist;
    public bool IsDefaultBgm;
    public GetInfoType GetInfoType;
    public string? GetInfoValue;
}

[MemoryPackable]
public partial class LiberateAttractiveEpisode
{
    public int Id;
    public int NameCode;
    public string? ConditionScenarioGroupId;
    public string? ScenarioTitleLoacle;
    public string? AttractiveScenarioGroupId;
}

[MemoryPackable]
public partial class LiberateCharacterRecord
{
    public int Id;
    public int TypeGroupId;
    public int CharacterNameCode;
    public ResetType MissionRenewType;
    public int MissionStepGroup;
    public int MissionMaxClearAmount;
    public string? ScenarioId;
}

[MemoryPackable]
public partial class LiberateMissionGroupRecord
{
    public int Id;
    public int MissionStepGroup;
    public int MissionStep;
    public int DefaultMissionGroupId;
    public int ResetMissionGroupId;
    public int StepUpExp;
    public int RewardId;
    public string? ScenarioId;
}

[MemoryPackable]
public partial class LiberateMissionRecord
{
    public int Id;
    public int GroupId;
    public int SubGroupId;
    public Trigger Trigger;
    public string? Description;
    public int ConditionId;
    public int ConditionValue;
    public OriginalRareType MissionGrade;
    public int MissionPointValue;
}

[MemoryPackable]
public partial class LiveWallpaperReaction
{
    public int Id;
    public int ReactionTargetId;
    public LiveWallpaperReactionType ReactionType;
    public SpeecherType SpeecherType;
    public int SpeecherResourceId;
    public string? LocaleFile;
    public int TargetChapter;
    public string? SpeechLocalkey;
    public string? ReactionVoice;
    public int Order;
}

[MemoryPackable]
public partial class LobbyDecoBackgroundRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int Order;
    public string? ResourceId;
    public string? MiResourceId;
    public string? SiResourceId;
    public int ConditionCampaignStageClear;
    public PriceType PriceType;
    public int PriceId;
    public int PriceCount;
    public RewardType ExchangeItemType;
    public int ExchangeItemId;
    public int ExchangeItemCount;
    public bool IsSecret;
}

[MemoryPackable]
public partial class LobbySettingManagerRecord
{
    public int Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public string? UserLobbyBackground;
    public string? UserLobbyBgm;
}

[MemoryPackable]
public partial class LocaleNickNameListRecord_Raw
{
    public int Id;
    public string? Ko;
    public string? En;
    public string? Ja;
    public string? ZhTw;
    public string? ZhCn;
    public string? De;
    public string? Th;
    public string? Fr;
}

[MemoryPackable]
public partial class LoginEventResourceRecord
{
    public int Id;
    public int EventId;
    public int CharacterId;
    public int CostumeId;
    public string? SetCharacterAnim;
    public string? LogoResourceTable;
    public string? LogoResourceId;
    public string? UiPrefab;
    public bool IsReplenishActive;
    public int ReplenishCurrency;
    public int CurrencyValue;
}

[MemoryPackable]
public partial class LoginEventRecord
{
    public int Id;
    public int EventId;
    public int Day;
    public login_event_reward_type LoginEventRewardType;
    public int RewardId;
}

[MemoryPackable]
public partial class LostSectorStageRecord
{
    public int Id;
    public int Sector;
    public int ParentsId;
    public string? NameLocalkey;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public bool SpotAutocontrol;
    public int FieldMonsterId;
    public int SpotId;
    public string? EnterScenario;
    public string? ExitScenario;
}

[MemoryPackable]
public partial class LostSectorRecord
{
    public int Id;
    public string? SectorLocalkey;
    public string? SectorSubLocalkey;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int Type;
    public int Sector;
    public ContentOpenType OpenConditionType;
    public int OpenConditionValue;
    public int SectorClearCondition;
    public int RequiredSquadCount;
    public int MaxNkCount;
    public string? FieldId;
    public bool EnableSmog;
    public int ExplorationReward;
    public string? EnterScenario;
    public string? ExitScenario;
    public string? Bg;
    public string? BgInfo;
}

[MemoryPackable]
public partial class MemorialMemoryRecord
{
    public int MemorialMemoryId;
    public string? MemorialMemoryName;
    public string? MemorialMemoryDescription;
    public int FielditemId;
    public int MemorialMemorySeriesId;
    public string? MemorialMemoryResource;
    public bool IsUseObtainScenario;
}

[MemoryPackable]
public partial class MemorialSeriesCategoryRecord
{
    public string? Id;
    public int Order;
    public MemorialSeriesCategoryType CategoryType;
    public string? CategoryName;
    public string? CategoryIcon;
    public MemorialCategoryFormType MemorialFormType;
}

[MemoryPackable]
public partial class MemorialSeriesRecord
{
    public int MemorialSeriesId;
    public int Order;
    public string? MemorialSeriesName;
    public string? MemorialSeriesDescription;
    public string? MemorialSeriesCategory;
    public string? MemorialSeriesResource;
    public bool IsEventMemorial;
    public List<MemorialMemoryID>? MemorialMemoryId;
    public int CollectRewardId;
}

[MemoryPackable]
public partial class MessengerConditionTriggerRecord
{
    public int Id;
    public int EventId;
    public List<TriggerData>? TriggerList;
    public MessageType MessageType;
    public string? Tid;
    public int ResourceId;
    public string? NameLocalkey;
    public string? EnterScenarioId;
    public string? ExitScenarioId;
    public int StaminaValue;
    public int RewardId;
}

[MemoryPackable]
public partial class MessengerDialogRecord
{
    public string? Id;
    public string? ConversationId;
    public string? RoomId;
    public MessengerSpeakerType SpeakerType;
    public string? MemberId;
    public MessengerMessageType MessageType;
    public string? JumpTarget;
    public string? DialogLocalkey;
    public string? ResourceId;
    public int RewardId;
    public DateTime RewardExpireDate;
    public bool IsOpener;
}

[MemoryPackable]
public partial class MidasProductRecord
{
    public int Id;
    public ProductType ProductType;
    public int ProductId;
    public MidasItemType ItemType;
    public string? MidasProductIdProximabeta;
    public string? MidasProductIdGamamobi;
    public bool IsFree;
    public string? Cost;
}

[MemoryPackable]
public partial class MinigameHelpTipDescRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public string? HelptipTitle;
    public string? HelptipImage;
    public string? HelptipDescription;
}

[MemoryPackable]
public partial class MinigameHelpTipRecord
{
    public int Id;
    public int GroupId;
    public string? PrefabId;
}

[MemoryPackable]
public partial class MiniGameHubRecord_Raw
{
    public int Id;
    public int HubGroup;
    public int HelptipGroup;
    public int HelptipGroupOrder;
    public string? HelptipTitleLocalkey;
    public bool IsHidden;
    public string? PrefabId;
}

[MemoryPackable]
public partial class MonsterCallingListRecord
{
    public int Id;
    public int GroupId;
    public long MonsterId;
    public MonsterSpawnType SpawnType;
    public int StartPoint;
    public int ActionPoint;
    public int DirPoint;
    public float SpawnTime;
    public int AttackTime;
}

[MemoryPackable]
public partial class MonsterFieldRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ResourceId;
    public string? MonPrefab;
    public AttributeType Attribute;
    public float FieldMonsterScale;
    public bool IsBoss;
    public int FieldSightRange;
    public int FieldMoveVelocity;
    public List<int>? FieldSkillId;
    public string? FieldAi;
    public string? SpotJsonPath;
    public int FightingPower;
}

[MemoryPackable]
public partial class MonsterModelRecord
{
    public int Id;
    public int ResourceId;
    public string? MonPrefab;
    public MonsterGradeType Grade;
    public MonsterSizeType Size;
    public MonsterSizeType DissolveType;
    public AttributeType Attribute;
    public MoveType MoveType;
    public CategoryType CategoryType1;
    public CategoryType CategoryType2;
    public CategoryType CategoryType3;
    public CharacterClassType Class;
}

[MemoryPackable]
public partial class MonsterPartsRecord
{
    public int Id;
    public int MonsterModelId;
    public string? PartsNameLocalkey;
    public int DamageHpRatio;
    public int HpRatio;
    public int DefenceRatio;
    public bool DestroyAfterAnim;
    public bool DestroyAfterMovable;
    public int PassiveSkillId;
    public bool VisibleHp;
    public int LinkedPartsId;
    public List<string>? WeaponObject;
    public List<WeaponObjectEnum>? WeaponObjectEnum;
    public PartsType PartsType;
    public List<string>? PartsObject;
    public int EnergyResistRatio;
    public int MetalResistRatio;
    public int BioResistRatio;
    public int AttackRatio;
    public string? PartsSkin;
    public MonsterDestroyAnimTrigger MonsterDestroyAnimTrigger;
    public bool IsMainPart;
    public bool IsPartsDamageAble;
}

[MemoryPackable]
public partial class MonsterStageLvChangeRecord
{
    public int Id;
    public int Group;
    public int Step;
    public MonsterStageLvChangeConditionType ConditionType;
    public long ConditionValueMin;
    public long ConditionValueMax;
    public int MonsterStageLv;
    public int PassiveSkillId;
    public int TargetPassiveSkillId;
    public int GimmickobjectLvControl;
}

[MemoryPackable]
public partial class MonsterRecord
{
    public long Id;
    public List<int>? ElementId;
    public int MonsterModelId;
    public MonsterUIGradeType UiGrade;
    public string? NameLocalkey;
    public string? AppearanceLocalkey;
    public string? DescriptionLocalkey;
    public bool IsIrregular;
    public int HpRatio;
    public int DefenceRatio;
    public int AttackRatio;
    public int EnergyResistRatio;
    public int MetalResistRatio;
    public int BioResistRatio;
    public int DetectorCenter;
    public int DetectorRadius;
    public NoneTargetType Nonetarget;
    public FunctionNoneTargetType Functionnonetarget;
    public string? SpotAi;
    public string? SpotAiDefense;
    public string? SpotAiBasedefense;
    public int SpotMoveSpeed;
    public int SpotAccelerationTime;
    public MonsterSpawnType FixedSpawnType;
    public int SpotRandRatioNormal;
    public int SpotRandRatioJump;
    public int SpotRandRatioDrop;
    public int SpotRandRatioDash;
    public int SpotRandRatioTeleport;
    public int PassiveSkillId;
    public List<SkillData>? SkillData;
    public int StatenhanceId;
}

[MemoryPackable]
public partial class MuseumBuffRecord_Raw
{
    public int Id;
    public string? BuffIcon;
    public int SkillId;
}

[MemoryPackable]
public partial class MuseumCommonStageHpGroupRecord_Raw
{
    public int Id;
    public int Group;
    public int WaveOrder;
    public long HpValue;
}

[MemoryPackable]
public partial class MuseumGroupRecord_Raw
{
    public int Id;
    public int Order;
    public string? GroupName;
    public int RankingPointId;
}

[MemoryPackable]
public partial class MuseumMissionRecord_Raw
{
    public int Id;
    public int StageId;
    public int Order;
    public MuseumStageModeType ModeType;
    public MuseumMissionConditionType ConditionType;
    public long ConditionValue;
    public string? MissionDesc;
    public int RewardId;
    public int RankingPointAmount;
}

[MemoryPackable]
public partial class MuseumRankingPointRecord_Raw
{
    public int Id;
    public string? PointIcon;
    public string? PointName;
    public string? PointDesc;
}

[MemoryPackable]
public partial class MuseumStageModeRecord_Raw
{
    public int Id;
    public int StageId;
    public MuseumStageModeType ModeType;
    public int ModeOpenCondition;
    public int CharacterLv;
    public int Wave;
    public int MonsterStageLv;
    public int MonsterStageLvChangeGroup;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public bool SpotAutocontrol;
}

[MemoryPackable]
public partial class MuseumStageRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public string? StageName;
    public int BuffId;
    public long MonsterId;
    public string? MonsterImageSi;
    public string? MonsterImage;
    public int SoloRaidManagerId;
    public DateTime SeasonStartDate;
    public DateTime SeasonEndDate;
    public int SoloRaidStageHpGroup;
}

[MemoryPackable]
public partial class MuseumWeeklyBuffGroupRecord_Raw
{
    public int Id;
    public int SeasonId;
    public int WeekCount;
}

[MemoryPackable]
public partial class MuseumWeeklyBuffRecord_Raw
{
    public int Id;
    public int GroupId;
    public int Order;
    public int StageId;
    public int BuffId;
}

[MemoryPackable]
public partial class NarrativeSignRecord
{
    public int Id;
    public FieldNarrativeSignType NarrativeSignType;
    public string? NameLocale;
    public string? DescriptionLocale;
    public string? SignIcon;
    public BalloonType BalloonType;
    public int BalloonPrintTime;
}

[MemoryPackable]
public partial class NikkeEpMissionScenarioGroupRecord
{
    public int Id;
    public int GroupId;
    public int Order;
    public string? ScenarioTitleLoacle;
    public string? ScenarioGroupId;
    public string? ScenarioOpenConditionGroupId;
}

[MemoryPackable]
public partial class NikkeEpMissionRecord
{
    public int Id;
    public int NameCode;
    public int ScenarioGroup;
    public DateTime StartDate;
    public DateTime EndDate;
    public int RewardId;
}

[MemoryPackable]
public partial class OutpostBuildingRecord
{
    public int Id;
    public int ResourceGroupId;
    public int BuildingLv;
    public int InitBuildingSlot;
    public BuildingCategory Category;
    public BuildingDisplayCategory DisplayCategory;
    public string? CategoryLocalkey;
    public int TypeId;
    public int Time;
    public List<BuildConditionData>? BuildCondition;
    public List<OutpostCostData>? Cost;
    public CurrencyType FastCompCurrencyType;
    public int FastCompCurrencyValue;
    public List<OutpostFunctionData>? Function;
    public string? OpenEpisode;
    public int RewardId;
    public ContentsOpen ContentsOpen;
}

[MemoryPackable]
public partial class OutpostFastBattleRecord
{
    public int Id;
    public int FastbattleCondition;
    public CurrencyType PriceType;
    public int PriceValue;
    public int TimeMin;
}

[MemoryPackable]
public partial class OutpostMapChangeSchedulerRecord_Raw
{
    public int Id;
    public string? Desc;
    public string? ResourceId;
    public int SkinGroupId;
    public bool IsDefault;
    public DateTime StartDate;
    public DateTime EndDate;
}

[MemoryPackable]
public partial class OutpostResourceRecord
{
    public int Id;
    public int GroupId;
    public int SkinGroupId;
    public string? SkinGroupLocalkey;
    public int EventId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? BuildingSpriteResourceId;
    public string? BuildingSymbolResourceId;
    public string? BuildingResourceId;
}

[MemoryPackable]
public partial class PackageGroupRecord
{
    public int Id;
    public int PackageGroupId;
    public RewardType ProductType;
    public int ProductId;
    public int ProductValue;
}

[MemoryPackable]
public partial class PackageListRecord
{
    public int Id;
    public int PackageShopId;
    public int PackageOrder;
    public int ProductId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
    public bool IsActive;
}

[MemoryPackable]
public partial class PackageShopRecord
{
    public int Id;
    public int PackageGroupId;
    public int ProductGrade;
    public int ProductEfficiency;
    public bool IsFree;
    public int MidasProductId;
}

[MemoryPackable]
public partial class PassCostumeListRecord_Raw
{
    public int Id;
    public int PackageShopId;
    public int PackageOrder;
    public int PassCostumeShopId;
    public bool IsActive;
}

[MemoryPackable]
public partial class PassCostumeShopRecord_Raw
{
    public int Id;
    public int PackageGroupId;
    public int CostumeId;
    public DateTime StartDate;
    public DateTime EndDate;
    public int MidasProductId;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
}

[MemoryPackable]
public partial class PassMissionRecord
{
    public int Id;
    public int PassPointId;
    public Trigger ConditionType;
    public int ConditionId;
    public int ConditionValue;
    public string? NameLocalkey;
    public int RewardId;
}

[MemoryPackable]
public partial class PhotoManagerRecord
{
    public int Id;
    public int EventId;
    public bool IsArchiveEvent;
    public int UseSpotGroupId;
    public PhotoZoomType DefaultZoomValue;
    public PhotoObjectType DefaultObjectGroupValue;
    public PhotoFlashType DefaultFlashValue;
    public string? MistakePhotoLocale;
    public string? ChangeCharacterModel;
    public string? ChangeCharacterEffect;
    public int ResultWindowDelayTime;
}

[MemoryPackable]
public partial class PhotoQuizRecord
{
    public int Id;
    public PhotoZoomType ZoomValue;
    public PhotoObjectType ObjectGroupValue;
    public PhotoFlashType FlashValue;
}

[MemoryPackable]
public partial class PhotoSpotRecord
{
    public int Id;
    public int PhotoManagerId;
    public int GroupId;
    public int SpotGroup;
    public PhotoSpotType SpotType;
    public int SpotOrder;
    public AdventureSpotOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public int SpotSpawnDay;
    public List<string>? AbleTakePhotoArtMap;
    public string? NoticeAbleTakePhoto;
    public int AbleTakePhotoAnytime;
    public bool UseFlash;
    public int PhotoQuizId;
    public int PhotoId;
    public string? LockIcon;
    public string? OpenIcon;
    public string? NameLocale;
    public string? NpcLocationLocale;
    public string? PhotoHintLocale;
    public string? HintResource;
    public string? SpecialSpotSubHintLocale;
}

[MemoryPackable]
public partial class PhotoRecord
{
    public int Id;
    public string? NameLocale;
    public string? TakePhotoResource;
    public string? MistakePhotoResource;
    public string? MemoLocale;
}

[MemoryPackable]
public partial class PointRecord
{
    public int Id;
    public PointType PointType;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ResourceId;
}

[MemoryPackable]
public partial class PollListRecord_Raw
{
    public int Id;
    public int PollReward;
    public string? PollLinkGlobal;
    public string? PollLinkHmt;
    public bool IsRepeat;
}

[MemoryPackable]
public partial class PopupPackageListRecord
{
    public int Id;
    public int PopupPackageGroupId;
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
    public int ConditionGroupId;
    public int ProductGrade;
    public int TimeLimit;
    public int ProductEfficiency;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
    public int CharacterResourceId;
    public int CostumeId;
    public bool IsActive;
}

[MemoryPackable]
public partial class PopupPackageShopRecord
{
    public int Id;
    public int OrderGroupId;
    public int PopupPackageGroupId;
    public int PackageGroupId;
    public int ProductGrade;
    public int InfracorePoint;
    public int MidasProductId;
}

[MemoryPackable]
public partial class PresetRecord
{
    public int Id;
    public List<PresetTeamData>? Team;
    public int BaseLobbyBackground;
    public int SettingTitle;
}

[MemoryPackable]
public partial class ProductOfferRecord
{
    public int Id;
    public bool IsActive;
    public ProductOfferPopupType ProductOfferPopupType;
    public int ProductId;
    public int InappshopTabId;
    public int GachaCurrencyType;
    public int GachaCurrencyValue;
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
    public string? PopupDescLocalkey;
    public string? PopupPathLocalkey;
    public string? UiPrefabAddressable;
    public string? CharacterResourceAddressable;
}

[MemoryPackable]
public partial class ProfileCardObjectRecord
{
    public int Id;
    public ObjectType ObjectType;
    public ObjectSubType ObjectSubType;
    public ProfileCardObjectGradeType GradeType;
    public int Order;
    public string? ResourceId;
    public string? BadgeResourceId;
    public string? SiResourceId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public int ExchangeItemId;
    public int ExchangeItemValue;
    public int RequireItemId;
    public int RequireItemValue;
    public bool IsHidden;
}

[MemoryPackable]
public partial class RankSkipCostRecord
{
    public int Id;
    public int GroupId;
    public int SkipStep;
    public int PriceId;
    public int PriceValue;
}

[MemoryPackable]
public partial class RecycleResearchLevelRecord
{
    public int Id;
    public RecycleType RecycleType;
    public RecycleSubType RecycleSubType;
    public int RecycleLevel;
    public int LimitSynchroLevel;
    public int ItemId;
    public int ItemValue;
}

[MemoryPackable]
public partial class RecycleResearchStatRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? FunctionLocalkey;
    public int ResourceId;
    public RecycleType RecycleType;
    public RecycleSubType RecycleSubType;
    public int UnlockConditionId;
    public int UnlockLevel;
    public CurrencyType UnlockCurrencyId;
    public int UnlockCurrencyValue;
    public int Attack;
    public int Defence;
    public int Hp;
}

[MemoryPackable]
public partial class RewardUpManagerRecord
{
    public int Id;
    public int EventGroupId;
    public RewardUpEventType EventType;
    public int BonusValue;
    public string? Icon;
    public string? TitleLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class ScenarioCameraSettingRecord
{
    public string? Id;
    public double PositionX;
    public double PositionY;
    public double PositionZ;
}

[MemoryPackable]
public partial class ScenarioCameraShakeSettingRecord
{
    public string? Id;
    public double AmplitudeX;
    public double AmplitudeY;
    public double AmplitudeZ;
    public double AmplitudeFov;
    public double FrequencyX;
    public double FrequencyY;
    public double FrequencyZ;
    public double FrequencyFov;
    public double Loop;
}

[MemoryPackable]
public partial class ScenarioCharacterSettingRecord
{
    public string? Id;
    public string? NameLocalkey;
    public int ResourceId;
    public string? SkinId;
    public FrameType FrameType;
    public string? Address;
    public string? SdResourceAddress;
}

[MemoryPackable]
public partial class ScenarioMovieRecord
{
    public string? Id;
    public string? GroupId;
    public string? Language;
    public string? MovieLink;
    public string? Subtitles;
}

[MemoryPackable]
public partial class ScenarioPositionSettingRecord
{
    public string? Id;
    public double PositionX;
    public double PositionY;
    public double PositionZ;
    public double RotationX;
    public double RotationY;
    public double RotationZ;
}

[MemoryPackable]
public partial class SDBattleEventRecord
{
    public int Id;
    public string? NumberOfTimes;
}

[MemoryPackable]
public partial class SDCharacterAnimationRecord
{
    public int Id;
    public string? NameLocalkey;
    public SDCharacterAnimationShortName AnimationName;
    public int VoiceCategory;
}

[MemoryPackable]
public partial class SeasonPassRecord
{
    public int Id;
    public int PassId;
    public RewardType ConditionType;
    public int ConditionValue;
    public int PassRank;
    public int FreeReward;
    public int PremiumReward1;
    public int PremiumReward2;
    public bool IsHighlight;
}

[MemoryPackable]
public partial class ShootingRangeContentsRecord
{
    public int Id;
    public int EventId;
    public int GroupId;
}

[MemoryPackable]
public partial class ShootingRangeSpecRecord
{
    public int Id;
    public CharacterClassType Class;
    public OriginalRareType Rare;
    public int Grade;
    public int CharacterLevel;
    public int AttractiveLevel;
    public List<EquipmentList>? EquipmentList;
    public List<SkillLevelList>? SkillLevelList;
}

[MemoryPackable]
public partial class ShootingRangeRecord
{
    public int Id;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public ShootingRangeType ShootingRangeType;
    public ShootingRangeBattleLength ShootingRangeBattleLengthType;
    public bool SpecActiveSpot;
    public int StageLv;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public int SpotId;
}

[MemoryPackable]
public partial class ShopDiscountProbRecord
{
    public int Id;
    public int GroupId;
    public int ApplicationProb;
    public int DiscountRate;
}

[MemoryPackable]
public partial class SideStoryCutRecord
{
    public int Id;
    public int StageId;
    public int Step;
    public int WaveId;
    public string? ScenarioGroupId;
    public SideStoryEventCondition ConditionType;
    public string? ConditionId;
    public string? ConditionValue;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int SidestoryCharacterGroup;
    public bool IsIncludeWaveInfo;
}

[MemoryPackable]
public partial class SideStoryPartRecord
{
    public int Id;
    public int SidestoryId;
    public int Step;
    public int OpenConditionStage;
    public int OpenConditionHour;
}

[MemoryPackable]
public partial class SideStoryPlayCharacterRecord
{
    public int Id;
    public int GroupId;
    public int Slot;
    public int CharacterId;
    public int CostumeIndex;
    public int CharacterLevel;
}

[MemoryPackable]
public partial class SideStorySpotEventRecord
{
    public int Id;
    public int SpotCutId;
    public int Step;
    public string? SpotDialogGroupId;
    public int StateEffectFunctionId;
    public SideStoryEventCondition ConditionType;
    public string? ConditionId;
    public string? ConditionValue;
    public bool DialogSpotPause;
}

[MemoryPackable]
public partial class SideStoryStageRecord
{
    public int Id;
    public int SidestoryId;
    public int PartId;
    public int Step;
    public string? StageName;
    public int OpenConditionStage;
    public int FirstClearReward;
    public int VictoryCharacterResource;
}

[MemoryPackable]
public partial class SideStoryRecord
{
    public int Id;
    public string? SidestoryName;
    public List<OpenConditionStageData>? OpenConditionStageList;
    public int OpenConditionHour;
    public string? PreviousStoryDesc;
}

[MemoryPackable]
public partial class SimulationRoomOverclockLevelRecord
{
    public int Id;
    public int GroupId;
    public int OverclockLevel;
    public int MonsterLevelUp;
    public int BattlePower;
    public string? Color;
    public int RewardId;
}

[MemoryPackable]
public partial class SimulationRoomOverclockOptionGroupRecord
{
    public int Id;
    public int SeasonGroup;
    public bool OptionChange;
    public bool InfiniteOption;
    public int GroupOrder;
}

[MemoryPackable]
public partial class SimulationRoomOverclockOptionRecord
{
    public int Id;
    public int GroupId;
    public int OptionChangeOrder;
    public InfiniteOptionCode InfiniteOptionCode;
    public string? OptionNameLocalkey;
    public string? OptionDescLocalkey;
    public string? OptionIcon;
    public int OptionOverclockLevel;
    public List<SimulationRoomOcOptions>? OptionData;
    public bool FixOption;
}

[MemoryPackable]
public partial class SimulationRoomOverclockSeasonRecord
{
    public int Id;
    public string? SeasonNameLocalkey;
    public int OptionGroupId;
    public int OverclockLevelGroup;
    public bool MainSeason;
}

[MemoryPackable]
public partial class SimulationRoomSelectionGroupRecord
{
    public int Id;
    public int SelectionGroupId;
    public int SelectionNumber;
    public SimulationRoomEventFunctionType EventFunctionType;
    public SimulationRoomEventfunctionTargetType EventFunctionTargetType;
    public int EventFunctionTargetValue;
    public SimulationRoomEventfunctionValueType EventFunctionValueType;
    public int EventFunctionValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
}

[MemoryPackable]
public partial class SimulationRoomEventRecord
{
    public int Id;
    public SimulationRoomEvent EventType;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ResourceId;
}

[MemoryPackable]
public partial class SimulationRoomChapterRecord
{
    public int Id;
    public int Chapter;
    public int DifficultyId;
    public int RecommendedBattlePower;
    public int StageValue;
    public int RewardId;
    public bool OverclockActive;
    public bool SimpleSimulationActive;
}

[MemoryPackable]
public partial class SimulationRoomLevelScalingRecord
{
    public int Id;
    public SimulationRoomEvent EventType;
    public int DifficultyId;
    public int Chapter;
    public int BaseMonsterLevel;
    public int BaseMonsterBattlePower;
    public int ImprovementMonsterLevel;
    public int ImprovementMonsterBattlePower;
}

[MemoryPackable]
public partial class SimulationRoomDialogueLocationRecord
{
    public int Id;
    public SimulationRoomLocation Location;
    public int Chapter;
    public string? DialogueLocalkey;
    public string? DialogueVoice;
    public string? SetCharAnim;
    public int Weight;
    public bool OcModeUse;
    public int OcLevelMin;
    public int OcLevelMax;
}

[MemoryPackable]
public partial class SimulationRoomDialogueBattleRecord
{
    public int Id;
    public SimulationRoomBattleDialogueType DialogueType;
    public string? DialogueLocalkey;
    public string? DialogueVoice;
    public string? SetCharAnim;
    public int Weight;
    public bool OcModeUse;
    public int OcLevelMin;
    public int OcLevelMax;
}

[MemoryPackable]
public partial class SimulationRoomDifficultyRecord
{
    public int Id;
    public ContentsOpenCondition OpenConditionType;
    public int OpenConditionValue;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
}

[MemoryPackable]
public partial class SkillInfoRecord
{
    public int Id;
    public int GroupId;
    public int SkillLevel;
    public int NextLevelId;
    public int LevelUpCostId;
    public string? Icon;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? InfoDescriptionLocalkey;
    public List<ValueData>? DescriptionValueList;
}

[MemoryPackable]
public partial class SoloRaidManagerRecord
{
    public int Id;
    public int MonsterPreset;
    public int RankingGroupId;
}

[MemoryPackable]
public partial class SoloRaidPresetRecord
{
    public int Id;
    public int PresetGroupId;
    public DifficultyType DifficultyType;
    public QuickBattleType QuickBattleType;
    public int CharacterLv;
    public int WaveOpenCondition;
    public int WaveOrder;
    public int Wave;
    public int MonsterStageLv;
    public int MonsterStageLvChangeGroup;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public bool SpotAutocontrol;
    public string? WaveName;
    public string? WaveDescription;
    public string? MonsterImageSi;
    public string? MonsterImage;
    public int FirstClearRewardId;
    public int RewardId;
}

[MemoryPackable]
public partial class SoloRaidRankingRecord
{
    public int Id;
    public int RankingGroupId;
    public int Priority;
    public int ResourceId;
    public GrantType GrantType;
    public int GrantValueMin;
    public int GrantValueMax;
    public int RewardId;
    public bool IsRecording;
}

[MemoryPackable]
public partial class SpecialLobbySettingManagerRecord
{
    public int Id;
    public DateTime StartDate;
    public DateTime EndDate;
    public int SpecialLobbyChangeCount;
    public string? SpecialLobbyBackground;
    public int CharacterResourceId;
    public int CostumeIndex;
    public string? SpecialLobbyBgm;
    public bool LobbyDisableByChange;
}

[MemoryPackable]
public partial class SquadInfoRecord
{
    public int Id;
    public Squad Squad;
    public string? SquadName;
    public string? SquadDescription;
    public string? ResourceId;
}

[MemoryPackable]
public partial class StateEffectRecord
{
    public int Id;
    public List<int>? UseFunctionIdList;
    public List<int>? HurtFunctionIdList;
    public List<FunctionData>? Functions;
    public string? Icon;
}

[MemoryPackable]
public partial class StepUpPackageListRecord
{
    public int Id;
    public int StepupGroupId;
    public int PackageGroupId;
    public int Step;
    public int PreviousPackageId;
    public bool IsLastStep;
    public int ProductEffieciency;
    public ShopBuyLimitType BuyLimitType;
    public bool IsLimit;
    public int BuyLimitCount;
    public bool IsFree;
    public int MidasProductId;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public string? ProductResourceId;
}

[MemoryPackable]
public partial class StepUpPackageShopRecord
{
    public int Id;
    public int PackageShopId;
    public int StepupGroupId;
    public string? BannerResourceId;
    public string? BannerLocalkey;
    public string? PopupNameLocalkey;
    public string? PopupDescLocalkey;
}

[MemoryPackable]
public partial class SubQuestRecord
{
    public int Id;
    public int GroupId;
    public string? DescriptionLocalkey;
    public List<TriggerData>? TriggerList;
    public string? ConversationId;
    public Trigger ClearTrigger;
    public int ClearConditionId;
    public int ClearConditionValue;
    public ScenarioType ScenarioType;
    public string? EpisodeId;
    public string? EndMessengerConversationId;
    public int BeforeSubQuestId;
}

[MemoryPackable]
public partial class SupportCharacterGroupRecord
{
    public int Id;
    public int GroupId;
    public int SupportCharacterId;
}

[MemoryPackable]
public partial class SupportCharacterRecord
{
    public int Id;
    public int CharacterId;
    public int CharacterLevel;
    public int AttractiveLevel;
    public List<support_equipment_data>? EquipmentArray;
    public int HarmonycubeId;
    public int HarmonycubeLevel;
    public int SkillLevel1;
    public int SkillLevel2;
    public int UltiSkillLevel3;
}

[MemoryPackable]
public partial class SupportContentsRecord
{
    public int Id;
    public TeamType ContentsType;
    public int UseValue;
    public int GroupId;
}

[MemoryPackable]
public partial class TierRecord
{
    public int Id;
    public ArenaType ArenaType;
    public int Priority;
    public string? Name;
    public string? Description;
    public int TierNumber;
    public int ResourceId;
    public GrantType GrantType;
    public int GrantValueMin;
    public int GrantValueMax;
}

[MemoryPackable]
public partial class TimeReferenceRecord_Raw
{
    public int Id;
    public DateTime DateValue;
}

[MemoryPackable]
public partial class TimeStackRewardRecord
{
    public int Id;
    public ArenaType ArenaType;
    public TimeRewardConditionType ConditionType;
    public int ConditionValue;
    public List<TimeStackRewardData>? TimeStackReward;
}

[MemoryPackable]
public partial class TowerRecord
{
    public int Id;
    public CorporationTowerType Type;
    public int Floor;
    public int MonsterStageLv;
    public int DynamicObjectStageLv;
    public int StandardBattlePower;
    public int StageStatIncreaseGroupId;
    public bool IsUseQuickBattle;
    public bool SpotAutocontrol;
    public string? FieldMonsterId;
    public string? Bg;
    public int SpotId;
    public int RewardId;
}

[MemoryPackable]
public partial class TransitionRecord
{
    public int Id;
    public string? DepartSceneCode;
    public string? ArriveSceneCode;
    public int DepartViewType;
    public int ArriveViewType;
    public int EventId;
    public int TransitionType;
    public bool IsGauge;
    public int LoadingTipGroup;
    public RotationType RotationType;
}

[MemoryPackable]
public partial class TriggerMissionEventRewardRecord
{
    public int Id;
    public int EventId;
    public int TriggerId;
    public int EventRewardId;
}

[MemoryPackable]
public partial class UnionRaidAllClearRewardRecord_Raw
{
    public int Id;
    public UnionRaidNormalConditionType ConditionType;
    public int ConditionValue;
    public string? NameLocalkey;
    public int RewardId;
}

[MemoryPackable]
public partial class UnionRaidManagerRecord
{
    public int Id;
    public int MonsterPreset;
}

[MemoryPackable]
public partial class UnionRaidPresetRecord
{
    public int Id;
    public int PresetGroupId;
    public UnionRaidDifficultyType DifficultyType;
    public int WaveOrder;
    public int Wave;
    public int WaveChangeStep;
    public int MonsterStageLv;
    public int MonsterStageLvChangeGroup;
    public int DynamicObjectStageLv;
    public int CoverStageLv;
    public bool SpotAutocontrol;
    public string? WaveName;
    public string? WaveDescription;
    public string? MonsterImageSi;
    public string? MonsterImage;
    public string? MonsterSpine;
    public int MonsterSpineScale;
    public int RewardId;
}

[MemoryPackable]
public partial class UnionRaidRankingTierRecord
{
    public int Id;
    public int Priority;
    public string? NameLocalkey;
    public string? DescriptionLocalkey;
    public UnionRaidRankingTier RankType;
    public int TierNumber;
    public int ResourceId;
    public GrantType GrantType;
    public int GrantValueMin;
    public int GrantValueMax;
    public int RewardId;
    public bool IsRecording;
}

[MemoryPackable]
public partial class UserIconRecord
{
    public int Id;
    public int ResourceId;
    public int CostumeIndex;
    public int NameCode;
    public string? NameLocalkey;
    public int Order;
}

[MemoryPackable]
public partial class UserTitleAcquireConditionRecord
{
    public int Id;
    public int UserTitleId;
    public int Order;
    public UserTitleAcquireInformationType InfoType;
    public string? ContentsDescLocaleKey;
    public List<UserTitleConditionObject>? AcquireConditionList;
}

[MemoryPackable]
public partial class UserTitleAssemblyRecord
{
    public int Id;
    public UserTitleAssemblyType AssemblyType;
    public string? IconId;
    public string? BgDecoId;
    public string? TitleLocaleKey;
    public string? BgColorRgb;
    public string? TitleStrokeColorRgb;
    public int CharacterNameCode;
}

[MemoryPackable]
public partial class UserTitleSingleRecord
{
    public int Id;
    public string? ResourceId;
}

[MemoryPackable]
public partial class UserTitleRecord
{
    public int Id;
    public int Order;
    public UserTitleProductionType UserTitleProductionType;
    public int UserTitleProductionId;
    public string? IconResourceId;
    public string? NameLocaleKey;
    public string? DescLocaleKey;
    public int RewardId;
    public bool NotAcquiredIsVisible;
}

[MemoryPackable]
public partial class ViewModeCharacterFaceListRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? AnimationName;
    public List<int>? HideCharacterNameCode;
    public List<int>? HideCostumeId;
}

[MemoryPackable]
public partial class ViewModeCharacterFaceSwitchingRecord_Raw
{
    public int Id;
    public string? NameLocalkey;
    public string? AnimationName;
    public List<int>? SwitchingCharacterNameCode;
    public List<int>? SwitchingCostumeId;
}

[MemoryPackable]
public partial class WaveDataRecord
{
    public int StageId;
    public string? GroupId;
    public SpotModType SpotMod;
    public WaveDataUIThemeType UiTheme;
    public int BattleTime;
    public string? ModValue;
    public int MonsterCount;
    public bool UseIntroScene;
    public bool WaveRepeat;
    public string? PointData;
    public string? PointDataFly;
    public string? BackgroundName;
    public ThemeType Theme;
    public ThemeTimeType ThemeTime;
    public string? StageInfoBg;
    public List<long>? TargetList;
    public List<WaveData>? WaveData;
    public int CloseMonsterCount;
    public int MidMonsterCount;
    public int FarMonsterCount;
}

[MemoryPackable]
public partial class WordRecord
{
    public int Id;
    public string? Group;
    public int PageNumber;
    public int Order;
    public ResourceType ResourceType;
    public string? ResourceValue;
}

// Additional referenced types: 
public enum ResourceType
{
    None = 0,
    Image = 1,
    Locale = 2
}
[MemoryPackable]
public partial class WaveData
{
    public string? WavePath;
    public int PrivateMonsterCount;
    public List<WaveMonsterData>? WaveMonsterList;
}

[MemoryPackable]
public partial class WaveMonsterData
{
    public long WaveMonsterId;
    public MonsterSpawnType SpawnType;
}

public enum WaveDataUIThemeType
{
    None = 0,
    CE002 = 1,
    CE004 = 2,
    CE006 = 3,
    CE007 = 4
}
public enum SpotModType
{
    None = 0,
    Campaign = 1,
    Arena = 2,
    Survive = 3,
    Defense = 4,
    Destroy = 5,
    Escape = 6,
    Intercept = 7,
    UnionRaid = 8,
    ShootingRange = 9,
    BaseDefense = 10,
    Cooperation = 11,
    Campaign_SD = 12,
    Defense_SD = 13,
    BaseDefense_SD = 14,
    ShootingRange_SD = 15,
    SoloRaid_Common = 16,
    SoloRaid_Trial = 17,
    Campaign_CE002 = 18,
    Cooperation_CE002 = 19,
    UnionRaid_Trial = 20,
    Cabal_MecaShifty = 21,
    Cabal_Shifty = 22,
    Cabal_Syuen = 23,
    SoloRaid_Museum = 24,
    SoloRaid_Museum_Nolimit = 25
}
public enum UserTitleProductionType
{
    None = 0,
    Single = 1,
    Assembly = 2
}
public enum UserTitleAssemblyType
{
    None = 0,
    Default = 1,
    Icon = 2,
    Character = 3
}
[MemoryPackable]
public partial class UserTitleConditionObject
{
    public UserTitleAcquireConditionType ConditionType;
    public int ConditionPointValue;
    public string? ConditionDescLocaleKey;
}

public enum UserTitleAcquireConditionType
{
    None = 0,
    UserTitle_InfracoreLv = 1,
    UserTitle_UserLv = 2,
    UserTitle_OpenSyncroDevice = 3,
    UserTitle_ClearChapter = 4,
    UserTitle_MaxAttractiveTotalCount = 5,
    UserTitle_OutpostScenario = 6,
    UserTitle_AttractiveScenario = 7,
    UserTitle_SendFriendPointCount = 8,
    UserTitle_RecycleResearchAttacker = 9,
    UserTitle_RecycleResearchDefender = 10,
    UserTitle_RecycleResearchSupporter = 11,
    UserTitle_RecycleResearchElysion = 12,
    UserTitle_RecycleResearchMissilis = 13,
    UserTitle_RecycleResearchTetra = 14,
    UserTitle_RecycleResearchPilgrim = 15,
    UserTitle_RecycleResearchAbnormal = 16,
    UserTitle_RookieArenaPlayCount = 17,
    UserTitle_OverloadTotalCount = 18,
    UserTitle_LostSectorPerfectClearCount = 19,
    UserTitle_TowerClearTotalCount = 20,
    UserTitle_AcquireCharacter = 21,
    UserTitle_SimulationRoomBuffLv5 = 22,
    UserTitle_InterceptSpecial30sec = 23,
    UserTitle_MaxViewNikkeAttractiveStory = 24,
    UserTitle_MaxAttractive = 25,
    UserTitle_4Overload = 26,
    UserTitle_InterceptAnomalous = 27,
    UserTitle_SimulationRoomOverclock50 = 28,
    UserTitle_SimulationRoomOverclockInfiniteOption = 29
}
public enum UserTitleAcquireInformationType
{
    None = 0,
    Mission = 1,
    Contents = 2
}
public enum UnionRaidRankingTier
{
    Challenger = 0,
    Dia = 1,
    Platinum = 2,
    Gold = 3,
    Silver = 4,
    Bronze = 5,
    Beginner = 6
}
public enum UnionRaidDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum UnionRaidNormalConditionType
{
    None = 0,
    AllClear = 1,
    Join = 2
}
public enum RotationType
{
    None = 0,
    Order = 1,
    Random = 2
}
[MemoryPackable]
public partial class TimeStackRewardData
{
    public RewardType ItemType;
    public int ItemId;
    public int ItemValue;
    public int TimeSec;
}

public enum TimeRewardConditionType
{
    None = 0,
    Tier = 1
}
[MemoryPackable]
public partial class support_equipment_data
{
    public int EquipmentId;
    public CorporationType EquipmentCorp;
    public int EquipmentLevel;
}

[MemoryPackable]
public partial class FunctionData
{
    public int Function;
}

public enum GrantType
{
    None = 0,
    Rank = 1,
    RankPercent = 2,
    PlayCount = 3
}
public enum DifficultyType
{
    None = 0,
    Common = 1,
    Trial = 2
}
[MemoryPackable]
public partial class ValueData
{
    public string? DescriptionValue;
}

public enum SimulationRoomBattleDialogueType
{
    Harder = 0,
    Hard = 1,
    Easy = 2,
    Easier = 3
}
public enum SimulationRoomLocation
{
    Start = 0,
    JustBeforeEnd = 1,
    End = 2,
    Random = 3
}
public enum SimulationRoomEvent
{
    NormalBattle = 0,
    EliteBattle = 1,
    BossBattle = 2,
    Maintenance = 3,
    RandomSelection = 4,
    EnhanceBuff = 5,
    SpecialBattle = 6,
    EventBossBattle = 7
}
public enum SimulationRoomEventfunctionValueType
{
    None = 0,
    Percent = 1,
    Integer = 2,
    Grade = 3,
    MainTarget = 4,
    BubbleType = 5
}
public enum SimulationRoomEventfunctionTargetType
{
    Random = 0,
    Select = 1,
    All = 2,
    None = 3
}
public enum SimulationRoomEventFunctionType
{
    Heal = 0,
    Damage = 1,
    Resurrection = 2,
    Death = 3,
    DeleteBuff = 4,
    GainBuff = 5,
    ChangeBuff = 6,
    UpgradeBuff = 7,
    ChangeBubble = 8,
    None = 9
}
[MemoryPackable]
public partial class SimulationRoomOcOptions
{
    public SimulationRoomOcOptionFunction OptionFunction;
    public List<SimulationRoomOcOptionTarget>? OptionTarget;
    public int OptionValue;
}

public enum SimulationRoomOcOptionTarget
{
    None = 0,
    Stage = 1,
    Monster = 2,
    Target = 3,
    NonTarget = 4,
    AR = 5,
    RL = 6,
    SR = 7,
    MG = 8,
    SG = 9,
    SMG = 10,
    ELYSION = 11,
    MISSILIS = 12,
    TETRA = 13,
    PILGRIM = 14,
    ABNORMAL = 15,
    Fire = 16,
    Water = 17,
    Wind = 18,
    Electronic = 19,
    Iron = 20,
    Attacker = 21,
    Defender = 22,
    Supporter = 23,
    Burst1 = 24,
    Burst2 = 25,
    Burst3 = 26,
    Nikke = 27
}
public enum SimulationRoomOcOptionFunction
{
    None = 0,
    LevelOverFix = 1,
    RecycleRoomDisable = 2,
    Function = 3,
    CampaignTimeDecrease = 4,
    LocationStartChange = 5,
    LocationRandomChange = 6,
    BattleEventGroupChange = 7,
    Skill1Disable = 8,
    BanNikke = 9,
    LocationJustBeforeEndChange = 10,
    AttractionStatusDisable = 11,
    BanNikkeSameSquad = 12,
    HPDecreaseAfterBattle = 13,
    NikkeNeeds = 14
}
public enum InfiniteOptionCode
{
    None = 0,
    Fire = 1,
    Water = 2,
    Wind = 3,
    Electronic = 4,
    Iron = 5
}
[MemoryPackable]
public partial class OpenConditionStageData
{
    public int OpenConditionStage;
}

public enum SideStoryEventCondition
{
    TargetSpawn = 0,
    TargetIncount = 1,
    TargetHPRatioFirst = 2,
    UserBattleModeStart = 3,
    SpotEventClear = 4,
    SpotBattleClear = 5,
    BeforeBattleStart = 6,
    ScenarioClear = 7
}
public enum ShootingRangeBattleLength
{
    Short = 0,
    Long = 1,
    Target = 2
}
public enum ShootingRangeType
{
    Fire = 0,
    Wind = 1,
    Iron = 2,
    Electronic = 3,
    Water = 4
}
[MemoryPackable]
public partial class SkillLevelList
{
    public int SkillLevel;
}

[MemoryPackable]
public partial class EquipmentList
{
    public int EquipmentId;
    public int EquipmentLevel;
}

public enum SDCharacterAnimationShortName
{
    None = 0,
    Idle = 1,
    IdleSpecial = 2,
    Walk = 3,
    Shot = 4,
    CoverReload = 5,
    Stun = 6,
    Talk0 = 7,
    Talk1 = 8,
    TalkIdle = 9,
    Run = 10,
    Death = 11
}
public enum FrameType
{
    None = 0,
    Right = 1,
    Center = 2,
    Left = 3
}
public enum RewardUpEventType
{
    None = 0,
    Intercept = 1,
    SimulationRoom = 2
}
public enum RecycleSubType
{
    None = 0,
    Personal = 1,
    Attacker = 2,
    Defender = 3,
    Supporter = 4,
    ELYSION = 5,
    MISSILIS = 6,
    TETRA = 7,
    PILGRIM = 8,
    ABNORMAL = 9
}
public enum RecycleType
{
    None = 0,
    Personal = 1,
    Class = 2,
    Corporation = 3
}
public enum ProfileCardObjectGradeType
{
    SSR = 0,
    SR = 1,
    R = 2
}
public enum ObjectSubType
{
    None = 0,
    Normal = 1,
    Event = 2,
    Badge = 3
}
public enum ObjectType
{
    BackGround = 0,
    Sticker = 1
}
public enum ProductOfferPopupType
{
    None = 0,
    InAppShop = 1,
    Gacha = 2
}
[MemoryPackable]
public partial class PresetTeamData
{
    public PresetTeamType PresetTeamType;
    public List<int>? PresetShooters;
}

public enum PresetTeamType
{
    None = 0,
    Starting = 1
}
public enum PointType
{
    None = 0,
    ArenaSpecialPoint = 1
}
public enum PhotoFlashType
{
    None = 0,
    On = 1,
    Off = 2,
    Auto = 3
}
public enum PhotoObjectType
{
    None = 0,
    People = 1,
    Animal = 2,
    Environment = 3
}
public enum PhotoZoomType
{
    None = 0,
    _50 = 1,
    _100 = 2,
    _200 = 3
}
[MemoryPackable]
public partial class OutpostFunctionData
{
    public OutpostFunctionType FunctionType;
    public FunctionValueType FunctionValueType;
    public int FunctionValue;
    public string? FunctionTitleLocalkey;
    public string? FunctionDescriptionLocalkey;
}

public enum OutpostFunctionType
{
    None = 0,
    OutpostBattleCredit = 1,
    OutpostBattleCharacterExp1 = 2,
    OutpostBattleUserExp = 3,
    UnlockOutpostSlot = 4,
    MaxStamina = 5,
    AddSynchroSlot = 6,
    Text = 7,
    DispatchFunction = 8,
    ElevatorFunction = 9,
    RunResearch = 10,
    UnlockClass = 11,
    UnlockLesson = 12
}
[MemoryPackable]
public partial class OutpostCostData
{
    public CostType CostType;
    public int CostId;
    public int CostValue;
}

public enum CostType
{
    None = 0,
    Currency = 1,
    Item = 2
}
[MemoryPackable]
public partial class BuildConditionData
{
    public BuildCondition BuildConditionType;
    public int BuildConditionValue;
}

public enum BuildCondition
{
    None = 0,
    CommanderLv = 1,
    StageClear = 2,
    Build = 3,
    DispatchGrade1 = 4,
    DispatchGrade2 = 5,
    DispatchGrade3 = 6,
    DispatchGrade4 = 7,
    DispatchGrade5 = 8,
    PersonalResearchLevel = 9,
    OpenLesson = 10
}
public enum BuildingDisplayCategory
{
    None = 0,
    Assist = 1,
    Welfare = 2,
    Growth = 3
}
public enum BalloonType
{
    None = 0,
    Normal = 1,
    Thinking = 2,
    Shouting = 3,
    Frame = 4,
    Talk = 5
}
public enum FieldNarrativeSignType
{
    None = 0,
    Popup = 1,
    Balloon = 2
}
public enum MuseumMissionConditionType
{
    GetTotalDamage = 0,
    GetTotalDamageRanker = 1,
    GetTotalStageStep = 2
}
public enum MuseumStageModeType
{
    Challenge = 0,
    NoLimit = 1
}
[MemoryPackable]
public partial class SkillData
{
    public int SkillId;
    public List<int>? UseFunctionIdSkill;
    public List<int>? HurtFunctionIdSkill;
}

public enum FunctionNoneTargetType
{
    Normal = 0,
    NoAllMonster = 1,
    ExcludeSpawnAndCountCheck = 2
}
public enum NoneTargetType
{
    Normal = 0,
    Last = 1,
    None = 2
}
public enum MonsterUIGradeType
{
    None = 0,
    Selfless = 1,
    Servant = 2,
    Master = 3,
    Lord = 4,
    Tyrant = 5,
    Heretic = 6
}
public enum MonsterStageLvChangeConditionType
{
    None = 0,
    DamageDoneToTargetMonster = 1
}
public enum MonsterDestroyAnimTrigger
{
    None = 0,
    Destruction_01 = 1,
    Destruction_02 = 2,
    Destruction_03 = 3,
    Destruction_04 = 4
}
public enum MoveType
{
    None = 0,
    Walk = 1,
    Fly = 2
}
public enum MonsterSizeType
{
    None = 0,
    Small = 1,
    Medium = 2,
    Big = 3,
    Huge = 4
}
public enum MonsterGradeType
{
    None = 0,
    Thrash = 1,
    Minion = 2,
    Elite = 3,
    Centurion = 4,
    Boss = 5
}
public enum AttributeType
{
    None = 0,
    AllRound = 1,
    Metal = 2,
    Bio = 3,
    Energy = 4,
    Unknown = 5
}
public enum MonsterSpawnType
{
    None = 0,
    Normal = 1,
    Dash = 2,
    Jump = 3,
    Drop = 4,
    Random = 5,
    Teleport = 6,
    Animation = 7
}
public enum MidasItemType
{
    Currency = 0,
    Item = 1
}
public enum ProductType
{
    None = 0,
    CashShop = 1,
    PackageShop = 2,
    PopupPackageShop = 3,
    PassShop = 4,
    MonthlyAmount = 5,
    CampaignPackageShop = 6,
    EventPassShop = 7,
    CostumeShop = 8,
    StepUpPackageShop = 10,
    EventInAppShop = 11,
    CustomPackageShop = 12,
    PassCostumeShop = 13
}
public enum MessengerMessageType
{
    None = 0,
    Text = 1,
    Choice = 2,
    Monologue = 3,
    Image = 4,
    Reward = 5
}
public enum MessengerSpeakerType
{
    None = 0,
    Self = 1,
    They = 2,
    Notification = 3
}
public enum MessageType
{
    None = 0,
    RandomMessage = 1,
    Message = 2,
    DailyMessage = 3
}
[MemoryPackable]
public partial class MemorialMemoryID
{
    public int MemorialMemoryId;
}

public enum MemorialCategoryFormType
{
    None = 0,
    HandWriting = 1,
    CallLog = 2,
    Data = 3
}
public enum MemorialSeriesCategoryType
{
    Campaign = 0,
    Event = 1,
    Surface = 2
}
public enum ContentOpenType
{
    None = 0,
    Stage = 1,
    Level = 2,
    SectorClear = 3,
    NonUpdate = 4
}
public enum login_event_reward_type
{
    Normal = 0,
    Goal = 1
}
public enum SpeecherType
{
    Character = 0,
    Npc = 1
}
public enum LiveWallpaperReactionType
{
    None = 0,
    Touch = 1,
    Stay = 2
}
public enum ResetType
{
    None = 0,
    Daily = 1,
    Weekly = 2
}
public enum GetInfoType
{
    None = 0,
    FieldItem = 1,
    Locale = 2
}
public enum MaterialType
{
    None = 0,
    All = 1,
    Corporation = 2,
    Character = 3,
    Squad = 4,
    FavoriteItem = 5
}
[MemoryPackable]
public partial class OptionSlot
{
    public int @option_slot;
    public int OptionSlotSuccessRatio;
}

[MemoryPackable]
public partial class StatData
{
    public StatType StatType;
    public int StatValue;
}

[MemoryPackable]
public partial class OptionGroup_Raw
{
    public ItemEquipCombinationGroupType OptionGroup;
}

public enum EquipmentRarityType
{
    None = 0,
    T1 = 1,
    T2 = 2,
    T3 = 3,
    T4 = 4,
    T5 = 5,
    T6 = 6,
    T7 = 7,
    T8 = 8,
    T9 = 9,
    T10 = 10
}
[MemoryPackable]
public partial class OptionType_Raw
{
    public ItemEquipCombinationOptionType OptionType;
}

public enum ItemEquipCombinationOptionType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ABNORMAL = 5,
    Attacker = 6,
    Defender = 7,
    Supporter = 8,
    Module_A = 9,
    Module_B = 10,
    Module_C = 11,
    Module_D = 12
}
public enum ItemEquipCombinationGroupType
{
    None = 0,
    CorporationType = 1,
    CharacterClassType = 2,
    ItemSubType = 3
}
public enum IslandAdventureUnionRankingGroup
{
    None = 0,
    Size = 1,
    Gold = 2
}
public enum IslandAdventureTutorialOutputType
{
    None = 0,
    FirstOpenHub = 1,
    FirstCloseHub = 2,
    FirstPlayFishing = 3,
    FirstPlayPhoto = 4,
    FirstEnterMenuAlbum = 5,
    FirstEnterMenuFishCollection = 6
}
public enum IslandAdventureItemOpenType
{
    None = 0,
    GainItem = 1,
    MissionClear = 2,
    GainFish = 3,
    GainPhoto = 4,
    StageClear = 5
}
public enum EventIslandAdventureMissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2,
    IslandAdventureItem = 3
}
public enum EventIslandAdventureMissionType
{
    None = 0,
    GainFishingRod = 1,
    GainFish = 2,
    GainPhoto = 3,
    GainGoldCount = 4,
    GainBoatParts = 5,
    BaitUseCount = 6,
    VoyageTimeCount = 7,
    DailyPointReward = 8,
    FishingCount = 9,
    FishSize = 10
}
public enum EventIslandAdventureMissionCategory
{
    None = 0,
    DailyMission = 1,
    DailyPoint = 2,
    Achievement = 3
}
[MemoryPackable]
public partial class ItemOptionData
{
    public IslandAdventureItemOption ItemOptionGroup;
    public int ItemOptionValue;
}

public enum IslandAdventureItemOption
{
    None = 0,
    PatternSpeed = 1,
    PatternLimitTime = 2,
    PatternDecreaseHP = 3,
    CatchDoubleRatio = 4,
    CatchMaxSizeRatio = 5,
    CastingBonusRatio = 6,
    GainGoldRatio = 7,
    SpotCatchableCount = 8,
    BoatSpeed = 9
}
[MemoryPackable]
public partial class ItemOptionLocaleData
{
    public string? ItemOptionLocale;
}

public enum IslandAdventureItemGroupType
{
    None = 0,
    FishingRod = 1,
    Bait = 2,
    BoatReinforce = 3
}
public enum PhotoSpotType
{
    None = 0,
    Special = 1,
    Normal = 2
}
public enum InterceptType
{
    InterceptNormalLevel1 = 0,
    InterceptNormalLevel2 = 1,
    InterceptSpecial = 2,
    InterceptAnomalous = 3
}
public enum InterceptAnomalousRecommendConditionType
{
    None = 0,
    ItemSubType = 1,
    ItemMaterialIDCount = 2
}
[MemoryPackable]
public partial class percent_condition_reward_group_data_Raw
{
    public int PercentConditionRewardGroup;
}

[MemoryPackable]
public partial class InfraCoreGradeData
{
    public int Function;
}

public enum InfraCoreFunctionType
{
    None = 0,
    OutpostBattleMaxTime = 1,
    OutpostFastBattleMaxCount = 2,
    DispatchMaxList = 3,
    OpenAllReceive = 4,
    OpenAutoDispatch = 5,
    OpenFastDispatch = 6,
    TodayAttractiveMaxCount = 7,
    StaminaMaxCount = 8,
    ShopNormalBuyLimitMaxCount = 9,
    ShopNormalFreeResetMaxCount = 10,
    ArenaMaxCount = 11,
    OpenSkipArena = 12
}
public enum InAppShopCategory
{
    JewelShop = 0,
    PackageShop = 1,
    TimeLimitPackageShop = 2,
    RenewPackageShop = 3,
    PopupPackageShop = 4,
    CostumeShop = 5,
    MonthlyAmountShop = 6,
    CampaignPackageShop = 7,
    StepUpPackageShop = 8,
    CustomPackageShop = 10,
    PassCostumeShop = 11
}
public enum InAppShopType
{
    InAppShop = 0
}
public enum CashshopMainCategoryType
{
    PopupPackageTab = 0,
    TimeLimitPackageTab = 1,
    RenewPackageTab = 2,
    CostumeTab = 3,
    CampaignPackageTab = 4,
    MonthlyAmountTab = 5,
    JewelTab = 6,
    PassCostumeTab = 7
}
public enum HelpTipDescriptionType
{
    None = 0,
    Image = 1,
    Title = 2,
    Description = 3
}
public enum GachaPrefabType
{
    None = 0,
    Special = 1,
    Limited = 2,
    ReLimited = 3
}
[MemoryPackable]
public partial class GachaPrice_Data
{
    public int GachaPriceType;
    public int GachaPriceValueCount1;
    public int DailyGachaDiscountPriceValue1;
    public int GachaPriceValueCount10;
}

public enum GachaProvideCountType
{
    OneAndTen = 0,
    OneOnly = 1,
    TenOnly = 2
}
public enum GachaPremiumType
{
    None = 0,
    GachaPremium = 1,
    GachaCustomize = 2,
    GachaCorporation_ELYSION = 3,
    GachaCorporation_MISSILIS = 4,
    GachaCorporation_TETRA = 5,
    GachaFriend = 6,
    GachaTutorial = 7,
    GachaCharge = 8,
    GachaPickup = 9,
    GachaStepup = 10,
    GachaSelectup = 11
}
public enum GachaSubType
{
    None = 0,
    PickupCharacter = 1,
    LimitedCharacter = 2
}
public enum GachaCategory
{
    None = 0,
    Character = 1,
    WishlistNormal = 2,
    WishlistOverspec = 3,
    GachaSelectup = 4
}
public enum DataCheckForPass
{
    None = 0,
    Pass_DailyLoginGame = 1,
    Pass_ClearStoryEventStage = 2,
    Pass_ClearStoryEventChallengeStage = 3,
    Pass_CheckLevelInfracore = 4,
    Pass_CheckQuantityUserTitle = 5,
    Pass_ClearCampaignEXStage = 6,
    Pass_CollectCampaignFieldItem = 7,
    Pass_ClearSimulationRoomOverclock = 8,
    Pass_EquipFavoriteItemSR = 9,
    Pass_CheckLevelFavoriteItemSR = 10,
    Pass_EquipFavoriteItemSSR = 11,
    Pass_StartSoloRaidChallengeStage = 12,
    Pass_StartUnionRaidStage = 13,
    Pass_CheckQuantityUnlockArchive = 14,
    Pass_ClearSideStoryStage = 15,
    Pass_StartCooperationEvent = 16
}
public enum MissionTriggerType
{
    None = 0,
    Trigger = 1,
    DataCheck = 2
}
[MemoryPackable]
public partial class FixedEquipmentData
{
    public int EquipmentId;
    public int EquipmentLevel;
}

public enum FixedPlayCharacterContentsType
{
    Tutorial = 0,
    CampaignField = 1
}
[MemoryPackable]
public partial class catchable_group_list
{
    public int CatchableGroupId;
}

public enum AdventureSpotOpenCondition
{
    None = 0,
    StageClear = 1,
    MissionClear = 2
}
public enum FishGroupType
{
    None = 0,
    Small = 1,
    Middle = 2,
    Large = 3
}
public enum FieldTriggerFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
public enum SpeechWindowType
{
    Speech = 0,
    Monologue = 1,
    Narration = 2,
    Subtitles = 3,
    Self = 4,
    Choice = 5,
    Input = 6
}
[MemoryPackable]
public partial class PasswordSpawnerData_Raw
{
    public string? PositionId;
    public int PasswordTableId;
}

[MemoryPackable]
public partial class EventTargetSpawnerData
{
    public string? PositionId;
}

[MemoryPackable]
public partial class LevelTriggerData
{
    public string? PositionId;
    public FieldSwitchType SwitchType;
    public bool OnTrigger;
}

public enum FieldSwitchType
{
    None = 0,
    Once = 1,
    Toggle = 2,
    Down = 3,
    Timed = 4
}
[MemoryPackable]
public partial class PasswordDoorSpawnerData_Raw
{
    public string? PositionId;
    public int PasswordDoorTableId;
}

[MemoryPackable]
public partial class DoorSpawnerData
{
    public string? PositionId;
    public bool OnTrigger;
}

[MemoryPackable]
public partial class StageSpawnerData
{
    public string? PositionId;
    public int StageId;
    public QuestType EventState;
}

public enum QuestType
{
    None = 0,
    Main = 1,
    Sub = 2,
    Emergency = 3,
    Event = 4,
    FavoriteItem = 5
}
[MemoryPackable]
public partial class QuestObjectData
{
    public string? PositionId;
    public int QuestObjectId;
}

[MemoryPackable]
public partial class NPCSpawnerData
{
    public string? PositionId;
    public int NpcId;
}

[MemoryPackable]
public partial class ItemSpawnerData
{
    public string? PositionId;
    public int ItemId;
    public bool IsCompleteReward;
}

[MemoryPackable]
public partial class InteractionObjectData
{
    public string? PositionId;
    public int InteractionId;
}

[MemoryPackable]
public partial class SupplyPointData
{
    public string? PositionId;
    public int Reinforcement;
}

[MemoryPackable]
public partial class DefaultSpawnerData
{
    public string? PositionId;
}

public enum FieldItemObtainDifficulty
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum ObtainContentsType
{
    None = 0,
    Campaign = 1,
    Lost_sector = 2,
    Eventfield = 3
}
public enum FieldItemType
{
    None = 0,
    Buff = 1,
    PartyGauge = 2,
    Token = 3,
    Box = 4,
    HiddenItem = 5,
    BGM = 6,
    Memory = 7,
    BodyCore = 8,
    BetaCore = 9,
    Collect = 10
}
public enum FieldInteractionActionActionType
{
    None = 0,
    Auto = 1,
    Manual = 2,
    Stage = 3
}
public enum FieldInteractionActionActiveType
{
    None = 0,
    Once = 1,
    OncePerEnter = 2,
    OncePerDay = 3,
    Repeat = 4
}
public enum FieldInteractionActionQuestType
{
    None = 0,
    Quest = 1
}
public enum FieldInteractionActionTriggerType
{
    None = 0,
    TimeLineAction = 1,
    ScenarioDialog = 2,
    NarrativeSign = 3
}
[MemoryPackable]
public partial class StoryEventIdListData_Raw
{
    public int StoryEventId;
}

public enum FieldInteractionActionTriggerFieldDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum FieldInteractionActionTriggerFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
[MemoryPackable]
public partial class FavoriteItemSkillGroupData
{
    public int FavoriteSkillId;
    public TableType SkillTable;
    public int SkillChangeSlot;
}

[MemoryPackable]
public partial class CollectionSkillGroupData
{
    public int CollectionSkillId;
}

public enum FavoriteItemType
{
    None = 0,
    Collection = 1,
    Favorite = 2
}
[MemoryPackable]
public partial class CollectionItemSkillLevelData
{
    public int CollectionSkillLevel;
}

[MemoryPackable]
public partial class FavoriteItemStatData
{
    public StatType StatType;
    public int StatValue;
}

public enum FavoriteItemRare
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum TowerDefenseStartingPointType
{
    None = 0,
    InOrder = 1,
    Forced = 2
}
public enum TowerDefenseWaveType
{
    None = 0,
    Normal = 1,
    Random = 2
}
public enum TowerDefenseUpgradeType
{
    None = 0,
    AtkIncrease = 1,
    RpmIncrease = 2,
    PenetrateIncrease = 3,
    RangeIncrease = 4,
    EffectRangeIncrease = 5,
    BurstCoolTimeDecrease = 6,
    SetDebuffTimeIncrease = 7,
    DebuffPowerUp = 8,
    DiscountCost = 9,
    DiscountSkillCost = 10,
    GoldIncrease = 11,
    RefundPenaltyDecrease = 12,
    DefensePointIncrease = 13
}
public enum TowerDefenseUpgradeTargetType
{
    None = 0,
    NormalTower = 1,
    HeroTower = 2,
    Global = 3
}
public enum EventTowerDefenseTutorialPageType
{
    None = 0,
    Basic = 1,
    Picture = 2
}
public enum EventTowerDefenseTutorialOutputType
{
    None = 0,
    OnStart = 1,
    AppearMonster = 2,
    WaveStart = 3,
    GainUpGradePoint = 4,
    OuterValue = 5
}
public enum EventTowerDefenseTutorialButtonType
{
    None = 0,
    System = 1,
    Monster = 2
}
public enum EventTowerDefenseTutorialType
{
    None = 0,
    Instant = 1,
    Button = 2
}
[MemoryPackable]
public partial class TowerSkillListData
{
    public int TowerSkillGroup;
    public int TowerSkillSetFirstLv;
}

public enum TowerDefenseHitEffectPrintType
{
    None = 0,
    Everyone = 1,
    HitPoint = 2
}
public enum TowerDefenseTowerAttackMovementType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    All = 3
}
public enum TowerDefenseTowerAttackType
{
    None = 0,
    Instant = 1,
    Projectile = 2,
    CannonProjectile = 3,
    MissileProjectile = 4,
    SelfRadius = 5
}
public enum TowerDefenseTowerReinforceType
{
    None = 0,
    LevelUp = 1,
    Evolve = 2,
    SkillLvUp = 3
}
public enum TowerDefenseTowerType
{
    None = 0,
    Tower = 1,
    Hero = 2
}
[MemoryPackable]
public partial class SkillEffectListData
{
    public TowerDefenseSkillEffectType SkillEffectType;
    public TowerDefenseSkillEffectTargetType SkillEffectTarget;
    public int SkillEffectTargetCount;
    public TowerDefenseSkillEffectApplyPriorityType SkillEffectTargetPriority;
    public int SkillEffectValue;
    public int SkillEffectHoldTime;
    public int SkillEffectApplyChance;
}

public enum TowerDefenseSkillEffectApplyPriorityType
{
    None = 0,
    Standard = 1,
    Random = 2,
    HighMaxHP = 3,
    HighDef = 4,
    BossFirst = 5,
    FlyFirst = 6,
    TowerHeroFirst = 7,
    TowerProximate = 8
}
public enum TowerDefenseSkillEffectTargetType
{
    None = 0,
    Foe = 1,
    Self = 2,
    Ally = 3,
    SelfAndAlly = 4
}
public enum TowerDefenseSkillEffectType
{
    None = 0,
    Damage = 1,
    SetBuff = 2,
    SetDebuff = 3,
    PenetrateDamage = 4,
    FixedDamage = 5,
    ImmediatelySelfSetBuff = 6,
    AtkIncrease = 7,
    RpmIncrease = 8,
    PenetrateIncrease = 9,
    RangeIncrease = 10,
    EffectRangeIncrease = 11,
    TargetCountIncrease = 12,
    BurstCoolTimeDecrease = 13,
    BuffHoldTimeIncrease = 14,
    BuffPowerUp = 15,
    DebuffApplyTimeIncrease = 16,
    DebuffPowerUp = 17
}
public enum TowerDefenseTowerAttackPriorityType
{
    None = 0,
    Standard = 1,
    Random = 2,
    HighMaxHP = 3,
    HighDef = 4,
    BossFirst = 5,
    FlyFirst = 6
}
public enum TowerDefenseSkillType
{
    None = 0,
    Instant = 1,
    InstantSetArea = 2,
    Projectile = 3,
    CannonProjectile = 4,
    MissileProjectile = 5,
    SelfRadius = 6,
    EnhanceNormalAttack = 7,
    EnhanceNextNormalAttack = 8,
    Self = 9,
    SelfSetArea = 10,
    SelfImmediately = 11
}
public enum TowerDefenseSkillUseType
{
    None = 0,
    Manual = 1,
    CoolTimeAuto = 2,
    AttackCountAuto = 3,
    BurstUseAuto = 4
}
public enum TowerDefenseSkillAreaEffectType
{
    None = 0,
    MyPosition = 1,
    HitPosition = 2
}
public enum TowerDefenseTowerSkillAuraEffectTargetType
{
    None = 0,
    Self = 1,
    Target = 2,
    All = 3
}
public enum TowerDefenseSkillAuraEffectType
{
    None = 0,
    Once = 1,
    Hold = 2
}
public enum TowerDefenseSkillHitEffectType
{
    None = 0,
    Everyone = 1,
    HitPoint = 2
}
public enum TowerDefenseTowerSkillProjectileMuzzleType
{
    None = 0,
    Muzzle = 1,
    SkillPoint = 2
}
public enum TowerDefenseSkillSystemType
{
    None = 0,
    Passive = 1,
    Active = 2,
    BurstSkill = 3
}
public enum TowerDefenseClearConditionType
{
    None = 0,
    AllEnemyKill = 1,
    TargetKill = 2,
    BossKill = 3
}
public enum TowerDefenseStageType
{
    None = 0,
    Scenario = 1,
    Normal = 2,
    Challenge = 3
}
public enum TowerDefenseDialogSpeakerTeamType
{
    None = 0,
    Ally = 1,
    Union = 2,
    Foe = 3
}
public enum TowerDefenseDialogSpeakerPositionType
{
    None = 0,
    Right = 1,
    Left = 2
}
public enum TowerDefenseDialogOutputConditionType
{
    None = 0,
    StageStart = 1,
    WaveStart = 2,
    MonsterKill = 3,
    Victory = 4,
    AfterCinematic = 5
}
[MemoryPackable]
public partial class MonsterSkillListData
{
    public int MonsterSkill;
}

public enum TowerDefenseMonsterMoveType
{
    None = 0,
    Ground = 1,
    Fly = 2
}
public enum TowerDefenseMonsterGradeType
{
    None = 0,
    Normal = 1,
    Boss = 2
}
[MemoryPackable]
public partial class MonsterSkillTypeValueListData
{
    public int MonsterSkillTypeValue;
}

public enum TowerDefenseMonsterSkillType
{
    None = 0,
    SetBuff = 1,
    DefArea = 2,
    Jump = 3,
    SummonMonster = 4,
    HPRecover = 5
}
public enum TowerDefenseMonsterSkillActiveType
{
    None = 0,
    CoolTime = 1,
    Spawn = 2,
    HPCheck = 3
}
public enum EventTowerDefenseMissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2
}
[MemoryPackable]
public partial class missionvaluedata
{
    public EventTowerDefenseMissionConditionType ConditionType;
    public int ConditionValue;
}

public enum EventTowerDefenseMissionConditionType
{
    None = 0,
    StageId = 1,
    BuildTower = 2
}
public enum EventTowerDefenseMissionType
{
    None = 0,
    BuildTower = 1,
    ReinforceTowerCount = 2,
    HaveGold = 3,
    GainGoldCount = 4,
    BuildHeroTower = 5,
    MonsterKill = 6,
    BurstSkillUseCount = 7,
    SkillLevelUp = 8,
    SkillLevelMax = 9,
    StartWave = 10,
    ClearStage = 11,
    PlayTimeCount = 12,
    WaveQuickStartCount = 13,
    DailyPointReward = 14
}
public enum EventTowerDefenseMissionCategory
{
    None = 0,
    DailyMission = 1,
    DailyPoint = 2,
    Achievement = 3
}
public enum EventTowerDefenseEventType
{
    None = 0,
    Minigame = 1,
    EventQuest = 2
}
public enum TowerDefenseDebuffEffectType
{
    None = 0,
    Slow = 1,
    DotDamage = 2,
    Sturn = 3,
    ReceivedDamageUp = 4,
    NullStealth = 5,
    InstantDamage = 6
}
public enum TowerDefenseCinematicType
{
    None = 0,
    SpawnTowerGroup = 1,
    TimeLineAction = 2
}
public enum TowerDefenseCinematicStartConditionType
{
    None = 0,
    StageStart = 1,
    WaveStart = 2,
    AfterCinematic = 3,
    AfterDialog = 4
}
public enum TowerDefenseBuffEffectType
{
    None = 0,
    AtkUp = 1,
    RpmUp = 2,
    PenetrateUp = 3,
    RangeUp = 4,
    EffectRangeUp = 5,
    TargetCountUp = 6,
    Synchronize = 7,
    Stealth = 8,
    DebuffReduction = 9,
    StealthDetection = 10,
    IncreaseNormalAttackDebuffChance = 11
}
public enum TowerDefenseBuffTargetType
{
    None = 0,
    Tower = 1,
    Monster = 2,
    All = 3
}
public enum EventTextAdventureSelectionOpenType
{
    None = 0,
    LootItem = 1,
    Ending = 2
}
public enum EventTextAdventureEndingType
{
    None = 0,
    NORMAL = 1,
    BAD = 2,
    TRUEENDING = 3,
    HIDDEN = 4
}
public enum EventTextAdventurePageType
{
    None = 0,
    SelectPage = 1,
    ResultPage = 2,
    EndingPage = 3
}
public enum StoryEventPartType
{
    OnePart = 0,
    TwoPart = 1
}
public enum EventSortOutMissionType
{
    None = 0,
    GainPointCount = 1,
    OnceGainPointCount = 2,
    SortOutCount = 3
}
public enum EventSmashCharacterType
{
    None = 0,
    Target = 1,
    NoneTarget = 2
}
public enum SBTutorialOutputType
{
    None = 0,
    FirstEnterMainMenu = 1,
    FirstEnterSkillMenu = 2,
    FirstEnterEnhance = 3,
    FirstEnterStage = 4,
    FirstEnterUnionRanking = 5,
    FirstEnterEquipment = 6,
    FirstEnterStageSelect = 7
}
public enum SBTimeLineType
{
    Retribution = 0,
    SkillRetribution = 1,
    Finish = 2
}
[MemoryPackable]
public partial class UnlockConditionLocaleData_Raw
{
    public string? UnlockConditionLocale;
}

public enum SBStageType
{
    Easy = 0,
    Normal = 1,
    Hard = 2,
    Challenge = 3
}
public enum SBBossType
{
    Abaddon = 0,
    Behemoth = 1,
    Brute = 2,
    Gigas = 3,
    Stalker = 4
}
public enum SBRewardType
{
    SBItem = 0,
    SBCurrency = 1
}
[MemoryPackable]
public partial class SBOpenConditionData_Raw
{
    public SBShopItemOpenType OpenConditionType;
    public int OpenConditionValue;
}

public enum SBShopItemOpenType
{
    None = 0,
    GainItem = 1,
    MissionClear = 2,
    StageClear = 3
}
public enum SBShopItemType
{
    None = 0,
    ExoSpine = 1,
    Gear = 2
}
[MemoryPackable]
public partial class UseSkillData_Raw
{
    public int SkillId;
}

public enum SBMonsterType
{
    Abaddon = 0,
    Behemoth = 1,
    Brute = 2,
    Gigas = 3,
    Stalker = 4
}
public enum SBMonsterParryAniDirectionType
{
    Center = 0,
    Left = 1,
    Right = 2
}
public enum SBMonsterSpecialSkillType
{
    None = 0,
    Yellow = 1,
    Blue = 2,
    Purple = 3
}
public enum SBMonsterSkillUseColliderType
{
    None = 0,
    Head = 1,
    HeadCircle = 2,
    SawToothUp = 3,
    SawToothDown = 4,
    SawToothLeft = 5,
    SawToothRight = 6,
    SawToothUpLeft = 7,
    SawToothUpRight = 8,
    SawToothDownLeft = 9,
    SawToothDownRight = 10,
    Body = 11,
    BodyDown = 12,
    LeftUpperArm = 13,
    LeftForeArm = 14,
    LeftHand = 15,
    RightUpperArm = 16,
    RightForeArm = 17,
    RightHand = 18,
    LeftThigh = 19,
    LeftCalf = 20,
    LeftFoot = 21,
    RightThigh = 22,
    RightCalf = 23,
    RightFoot = 24,
    LeftHandSkillRange = 25,
    RightHandSkillRange = 26,
    RightHandCubeSkillRange = 27,
    HipRange = 28,
    LeftWeapon = 29,
    LeftWeaponSkillRange = 30,
    RightWeapon = 31,
    RightWeaponSkillRange = 32,
    Tail1 = 33,
    Tail2 = 34,
    Tail3 = 35,
    Tail4 = 36,
    Tail5 = 37,
    Tail6 = 38,
    Tail7 = 39,
    Tail8 = 40,
    Tail9 = 41,
    Tail10 = 42,
    Tail11 = 43,
    Tail12 = 44,
    Tail13 = 45,
    Tail14 = 46,
    LeftFinger1 = 47,
    LeftFinger2 = 48,
    LeftFinger3 = 49,
    LeftFinger4 = 50,
    LeftFinger5 = 51,
    LeftFinger6 = 52,
    LeftFinger7 = 53,
    LeftFinger8 = 54,
    LeftFinger9 = 55,
    LeftFinger10 = 56,
    LeftFinger11 = 57,
    RightFinger1 = 58,
    RightFinger2 = 59,
    RightFinger3 = 60,
    RightFinger4 = 61,
    RightFinger5 = 62,
    RightFinger6 = 63,
    RightFinger7 = 64,
    RightFinger8 = 65,
    RightFinger9 = 66,
    RightFinger10 = 67,
    RightFinger11 = 68,
    PhaseChangeRange = 69,
    RoarRange = 70,
    HeadSkillRange = 71,
    WaveSkillRange = 72
}
public enum SBMonsterSkillType
{
    Basic = 0,
    Projectile = 1
}
public enum SBMissionRewardType
{
    DailyPoint = 0,
    RewardId = 1,
    SBItem = 2,
    SBCurrency = 3
}
public enum SBMissionType
{
    None = 0,
    StageClear = 1,
    PerfectGuard = 2,
    PerfectDodge = 3,
    Damage = 4,
    GainGoldCount = 5,
    BuyItem = 6,
    PlayTime = 7,
    UsePotion = 8,
    DailyPointReward = 9
}
public enum SBMissionCategory
{
    DailyMission = 0,
    DailyPoint = 1,
    Achievement = 2
}
[MemoryPackable]
public partial class SBItemOptionData_Raw
{
    public SBItemOptionType ItemOptionGroup;
    public int ItemOptionValue;
    public int ItemOptionMaintenanceTime;
}

public enum SBItemOptionType
{
    None = 0,
    PerfectGuardTimeUp = 1,
    PerfectDodgeTimeUp = 2,
    CriticalProbabilityUp = 3,
    CriticalDamageUp = 4,
    ShieldGaugeUp = 5,
    BetaSkillDamageUp = 6,
    BurstSkillDamageUp = 7,
    BasicAttackDamageUp = 8,
    GainBetaEnergyUp = 9,
    GainBurstEnergyUp = 10,
    DamageReduceRatio = 11,
    AttackSpeedUp = 12,
    PotionRecoveryAmountUp = 13,
    ReduceRecoverySieldGaugeTime = 14,
    HitDamageUp = 15,
    UpHpGainAttack = 16,
    DownHpGainAttack = 17,
    UsePotionDamageReduce = 18,
    GuardHpRecovery = 19,
    UsePotionGainBetaEnergy = 20,
    SuccessBasicAttackGainBurst = 21,
    NotUseBetaGauge = 22,
    GainGoldUp = 23,
    BurstEnergyGaugeMaxUp = 24,
    CharacterAttackUp = 25
}
[MemoryPackable]
public partial class SBItemOptionLocale_Raw
{
    public string? ItemOptionLocale;
}

public enum SBItemType
{
    None = 0,
    ExoSpine = 1,
    Gear = 2
}
public enum SBInGameGuideOutputType
{
    Attack = 0,
    Move = 1,
    Potion = 2
}
[MemoryPackable]
public partial class AffectSkillData_Raw
{
    public SBCharacterSkillAffectSkillFactorType AffectSkillFactor;
    public int AffectFactorValue;
    public int AffectSkill;
}

public enum SBCharacterSkillAffectSkillFactorType
{
    None = 0,
    GainBurstGauge = 1,
    GainBetaGauge = 2,
    DecreaseShieldGauge = 3,
    DecreaseBalanceGauge = 4,
    PerfectGuardTime = 5,
    PerfectDodgeTime = 6,
    DodgeSkillDelayTime = 7,
    CharacterDownHoldTime = 8,
    ReviveCount = 9,
    MonsterRetribution = 10,
    SkillDamageUp = 11,
    RecoveryHp = 12,
    BuffAttackUp = 13,
    BuffAttackSpeedUp = 14,
    PerfectGuardGainBetaGauge = 15,
    PerfectDodgeGainBurstGauge = 16
}
public enum SBCharacterSkillGroupType
{
    Attack = 0,
    Survive = 1,
    Burst = 2,
    Beta = 3
}
public enum SBCurrencyType
{
    None = 0,
    Gold = 1,
    SkillPoint = 2,
    BodyCore = 3,
    BetaCore = 4
}
public enum SBCharacterEnhanceType
{
    Atk = 0,
    HP = 1,
    BetaGauge = 2,
    Potion = 3
}
public enum SBCharacterSkillUseColliderType
{
    None = 0,
    Head = 1,
    Body = 2,
    LeftUpperArm = 3,
    LeftForeArm = 4,
    LeftHand = 5,
    RightUpperArm = 6,
    RightForeArm = 7,
    RightHand = 8,
    LeftThigh = 9,
    LeftCalf = 10,
    LeftFoot = 11,
    RightThigh = 12,
    RightCalf = 13,
    RightFoot = 14,
    Sword = 15,
    SwordEdge = 16,
    SlashRange = 17,
    Tempest = 18,
    RisingBreak = 19,
    OverDrive = 20,
    Slash = 21,
    ShieldBreak = 22
}
public enum SBCharacterSkillType
{
    Basic = 0,
    Projectile = 1
}
public enum SBCharacterSkillUseEnergyType
{
    None = 0,
    Beta = 1,
    Burst = 2
}
public enum SBCharacterAttackType
{
    None = 0,
    BasicAttack = 1,
    Blink = 2,
    Repulse = 3,
    Beta01 = 4,
    Beta02 = 5,
    Beta03 = 6,
    Beta04 = 7,
    Burst01 = 8,
    Burst02 = 9,
    Burst03 = 10,
    Burst04 = 11
}
public enum EventRopeRunningSpyItemUnlockConditionType
{
    None = 0,
    GetRushItemCount = 1,
    HangRopeCount = 2,
    GetCoinCount = 3,
    GetMagnetItemCount = 4
}
public enum EventRopeRunningSpyItemFunctionType
{
    None = 0,
    OxygenPocket = 1,
    MetalDetector = 2,
    AdhesiveRope = 3,
    MagneticArmor = 4
}
public enum EventRopeRunningObjectType
{
    None = 0,
    Chandelier = 1,
    GoldCoin = 2,
    SilverCoin = 3,
    RushItem = 4,
    RecoveryItem = 5,
    MagnetItem = 6,
    ShieldItem = 7,
    ObstacleTable = 8,
    ObstaclePillar = 9,
    ObstacleHurdleStart = 10,
    ObstacleHurdleMiddle = 11,
    ObstacleHurdleEnd = 12,
    LandStart = 13,
    LandMiddle = 14,
    LandEnd = 15,
    GuideTap = 16,
    GuideHold = 17
}
[MemoryPackable]
public partial class EventRopeRunningObjectGroupRatio_Raw
{
    public int ObjectId;
    public int Ratio;
}

public enum EventRopeRunningMissionType
{
    None = 0,
    JumpCount = 1,
    GetCoin = 2,
    GetRushItem = 3,
    GetRecoveryItem = 4,
    GetMagnetItem = 5,
    GetShieldItem = 6,
    MoveDistance = 7,
    GetScoreOneTime = 8,
    GetScore = 9
}
public enum EventQuestMiniGameType
{
    None = 0,
    TowerDefense = 1
}
public enum EventQuestStageModeType
{
    None = 0,
    SpotBattle = 1,
    MiniGame = 2
}
public enum EventPlaySodaGameType
{
    Running = 0,
    StackUp = 1,
    CatchCoin = 2,
    Smash = 3,
    Climbing = 4
}
public enum EventPirateCafeSkillType
{
    ChangePercentMaidMoveSpeed = 0,
    ChangePercentMaidCleanTime = 1,
    ChangePercentServingFailTime = 2,
    ChangePercentNpcMoveSpeed = 3,
    ChangePercentWaitTimeEating = 4,
    ChangePercentWaitTimeServing = 5
}
public enum EventPirateCafeNpcType
{
    NORMAL = 0,
    EVENT = 1
}
public enum EventPirateCafeConditionsType
{
    StackPoint = 0,
    RenewRecord = 1
}
public enum EventPirateCafeMissionType
{
    TotalGet = 0,
    Achievement = 1
}
public enum EventPirateCafeCharacterType
{
    Mast = 0,
    Anchor = 1,
    Sin = 2
}
public enum EventNKSTileTypeData
{
    NotWalkable_Corner_LeftUp = 0,
    NotWalkable_Corner_RightUp = 1,
    NotWalkable_Corner_LeftDown = 2,
    NotWalkable_Corner_RightDown = 3,
    NotWalkable_Line_Up = 4,
    NotWalkable_Line_Down = 5,
    NotWalkable_Line_Left = 6,
    NotWalkable_Line_Right = 7,
    NotWalkable_All = 8,
    Walkable = 9,
    Walkable_Deco = 10
}
[MemoryPackable]
public partial class EventNKSTimeLineActionTypeValue
{
    public string? TimelineActionTypeValue;
}

public enum EventNKSStageTimelineActionType
{
    Countdown = 0,
    Alert = 1,
    Dialog = 2,
    Balloon = 3,
    Stage_Clear = 4,
    MonsterGroupSpawn = 5,
    BossMonsterSpawn = 6,
    TargetNormalMonsterSpawn = 7,
    TargetBossMonsterSpawn = 8,
    StopMonsterGroupSpawn = 9,
    ItemSpawn = 10,
    Spawn_Circle_Random = 11,
    Spawn_Circle_Equal = 12,
    Spawn_Hor = 13,
    Spawn_Hor_Pos = 14,
    Spawn_Ver = 15,
    Spawn_Ver_Pos = 16,
    Spawn_Ellipse_Hor = 17,
    Spawn_Ellipse_Ver = 18,
    Spawn_Ellipse_Pos = 19,
    Spawn_Ellipse = 20,
    BossMonsterSpawnWithAdvanceTime = 21,
    KillBoss = 22,
    CommonStageClear = 23
}
[MemoryPackable]
public partial class DropItemData
{
    public int DropItemId;
    public int DropItemAmount;
}

public enum EventNKSMonsterGradeType
{
    None = 0,
    Normal = 1,
    Boss = 2
}
public enum EventNKSMonsterColType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    Barrier = 3,
    Barrier_Block_All = 4
}
[MemoryPackable]
public partial class ActionValueData
{
    public int ActionValue;
}

public enum EventNKSMonsterActionType
{
    None = 0,
    MoveDir = 1,
    MoveTarget_Keep = 2,
    MoveTarget_Once = 3,
    Jump = 4,
    Stop = 5,
    Suicide = 6,
    Despawn = 7,
    RotateTarget_Keep = 8,
    Suicide_Alert = 9
}
public enum EventNKSMissionRewardTypeData
{
    NKSitem = 0,
    Item = 1,
    DailyPoint = 2
}
[MemoryPackable]
public partial class NKSMissionValueData
{
    public EventNKSMissionConditionTypeData ConditionType;
    public int ConditionId;
}

public enum EventNKSMissionConditionTypeData
{
    None = 0,
    AliveTime = 1,
    Character = 2,
    HoldItem = 3,
    StageId = 4
}
public enum EventNKSMissionTargetTypeData
{
    StageClear = 0,
    StageExit = 1,
    StageEnter = 2,
    AliveTimeCount = 3,
    GetItem = 4,
    Monster_KillCount = 5,
    LevelUp_Count = 6,
    DailyPointReward = 7
}
public enum EventNKSMissionCategoryData
{
    DailyMission = 0,
    DailyPoint = 1,
    ChallengeMission = 2
}
[MemoryPackable]
public partial class DescriptionValueData
{
    public string? DescriptionValue;
}

public enum EventNKSFieldItemType
{
    None = 0,
    Exp = 1,
    Currency = 2,
    Magnet = 3,
    MinionKill = 4,
    Heal = 5,
    Invincible = 6,
    Burst_timeSub = 7,
    GachaBox = 8
}
public enum EventNKSItemPassiveSpecialTypeData
{
    None = 0,
    Passive_Revive = 1,
    Passive_Heal = 2,
    Passive_InfiniteRevive = 3
}
public enum EventNKSItemCategoryType
{
    None = 0,
    Field = 1,
    Field_Special = 2,
    Field_Important = 3,
    Active = 4,
    Passive = 5,
    Passive_SkillTree = 6
}
[MemoryPackable]
public partial class ItemConditionIdData
{
    public int ItemConditionId;
}

[MemoryPackable]
public partial class NKSStatData
{
    public EventNKSItemsStatType StatType;
    public EventNKSItemsStatCalcType StatCalcType;
    public double StatValue;
}

public enum EventNKSBuffTypeData
{
    Buff = 0,
    Debuff = 1
}
[MemoryPackable]
public partial class EventNKSProjectileAtkRangeData
{
    public int ProjAtkRange;
}

[MemoryPackable]
public partial class EventNKSProjectileTypeValueData
{
    public int ProjTypeValue;
}

[MemoryPackable]
public partial class EventNKSGachaBonusData
{
    public int BonusSlot;
}

[MemoryPackable]
public partial class DialogConditionData
{
    public EventNKSDialogConditionTypeData UseConditionType;
    public List<int>? UseConditionValue;
}

public enum EventNKSDialogConditionTypeData
{
    None = 0,
    Check_ItemGet = 1,
    Check_ItemHold = 2,
    Check_ReachHPratio = 3,
    Check_CurCharacter = 4
}
public enum EventNKSDialogEffectTypeData
{
    None = 0,
    Set_camera_shake = 1,
    White = 2,
    Black = 3
}
[MemoryPackable]
public partial class SpineResourceData
{
    public string? ShowSpineResourceId;
    public string? SpineAnimResourceId;
    public string? HideSpineResourceId;
    public int SpineResourceCordX;
    public int SpineResourceCordY;
    public double SpineResourceScale;
}

public enum EventNKSVersionType
{
    MOG1 = 0,
    MOG2 = 1
}
public enum EventNKSCollectionTypeData
{
    NKSWeapon = 0,
    NKSModule = 1,
    NKSFieldItem = 2
}
public enum EventNKSCoinStoreType
{
    LevelupSlot = 0,
    CoinRevive = 1
}
public enum EventNKSItemsStatCalcType
{
    None = 0,
    Multi = 1,
    Add = 2,
    Sub = 3
}
public enum EventNKSItemsStatType
{
    None = 0,
    Stat_mvSpd = 1,
    Stat_hp = 2,
    Stat_atk = 3,
    Stat_atkspd = 4,
    Stat_projSize = 5,
    Stat_projSpd = 6,
    Stat_def = 7,
    Stat_magnet = 8,
    Stat_colDmg = 9,
    Stat_revivecount = 10,
    Stat_rerollcount = 11
}
[MemoryPackable]
public partial class ModuleDefaultData
{
    public int ModuleDefault;
}

[MemoryPackable]
public partial class WeaponDefaultData
{
    public int WeaponDefault;
}

[MemoryPackable]
public partial class SlotItemData
{
    public int SlotGetItem;
    public int SlotReqItem;
    public int SlotReqItemValue;
}

[MemoryPackable]
public partial class BallonConditionData
{
    public EventNKSDialogConditionTypeData UseConditionType;
    public List<int>? UseConditionValue;
}

public enum EventNKSDialogPrintTypeData
{
    Stage = 0,
    Common = 1
}
public enum EventNKSDialogTypeData
{
    Dialog = 0,
    Balloon = 1
}
public enum EventMVGStatUpgradeType
{
    StatAtk = 0,
    StatHp = 1,
    MaxModule = 2,
    HpRespawnTime = 3,
    StatMoveSpeed = 4,
    AMuzzleProjAmount = 5
}
public enum EventMVGUnlockConditionType
{
    None = 0,
    MVGQuest = 1,
    MVGCollection = 2
}
public enum EventMVGUnlockFunctionTYpe
{
    None = 0,
    Dash = 1,
    D_Jump = 2,
    Skill_B = 3,
    Skill_C = 4,
    Skill_D = 5,
    Burst = 6,
    Shield = 7
}
public enum MVGTutorialConditionType
{
    NoDataEnter = 0,
    ViewDialogFirst = 1,
    GetCollectionFirst = 2,
    GetModuleFirst = 3,
    EnterGuidePointFirst = 4,
    ActiveChallengeMode = 5,
    GetCollectionMemoryFirst = 6,
    GetCollectionKeyFirst = 7
}
[MemoryPackable]
public partial class EventMVGShopRequireCurrencyTypeData_Raw
{
    public EventMVGCurrencyTypeData RequireCurrencyType;
    public int RequireCurrencyAmount;
}

public enum EventMVGShopItemTypeData
{
    Collectable = 0,
    Module = 1,
    None = 2
}
public enum EventMVGShopTypeData
{
    Normal = 0,
    Character = 1,
    None = 2
}
public enum EventMVGResourceTypeData
{
    None = 0,
    Spine = 1,
    Sprite = 2,
    Prefab = 3,
    Timeline = 4
}
public enum EventMVGQuestConditionType
{
    StartMission = 0,
    EndMission = 1,
    KillMonster = 2,
    MissionTargetPoint = 3,
    ClearMultiCondition = 4,
    GetCollectable = 5,
    GetCurrency = 6,
    PlatformSwitchInteraction = 7,
    ConditionCheckSwitchInteraction = 8,
    TeleportDeviceInteraction = 9
}
public enum MVGQuestType
{
    Normal = 0,
    MotherMission = 1,
    ChildMission = 2
}
public enum MVGQuestTargetType
{
    First = 0,
    Loop = 1
}
public enum EventMVGMonsterSkillskilltypeTypeData
{
    ProjectileLinear = 0,
    Timelineskill = 1,
    ProjectileHoming = 2,
    ProjectileLaser = 3,
    ProjectileParabolic = 4,
    Explosion = 5
}
public enum EventMVGMonsterSettingmonstertypeTypeData
{
    Air = 0,
    Ground = 1
}
public enum EventMVGMonsterSettinggradeTypeData
{
    Thrash = 0,
    Normal = 1,
    Elite = 2,
    Special = 3,
    Centurion = 4,
    Boss = 5
}
[MemoryPackable]
public partial class EventMVGMonsterDropListSettingData_Raw
{
    public int DropListId;
    public int DropListRate;
    public int DropCount;
}

public enum EventMVGCurrencyType
{
    MVGGold = 0,
    MVGCore = 1,
    None = 2
}
public enum EventMVGMonsterAttackTiertierTypeData
{
    _0Tier = 0,
    _1Tier = 1,
    _2Tier = 2,
    _3Tier = 3,
    _4Tier = 4,
    _5Tier = 5,
    _6Tier = 6,
    _7Tier = 7,
    _8Tier = 8,
    _9Tier = 9,
    _10Tier = 10,
    _11Tier = 11,
    _12Tier = 12,
    _13Tier = 13,
    _14Tier = 14,
    _15Tier = 15,
    _16Tier = 16,
    _17Tier = 17,
    _18Tier = 18,
    _19Tier = 19,
    _20Tier = 20
}
public enum EventMVGModuleCategoryData
{
    None = 0,
    Stat = 1,
    SkillA = 2,
    SkillB = 3,
    SkillC = 4,
    SkillD = 5,
    Burst = 6
}
public enum EventMVGMissionConditionType
{
    KillMonster = 0,
    KillBossMonster = 1,
    GetCurrency = 2,
    GetCollectable = 3,
    None = 4,
    ClearAchievement = 5,
    TargetPoint = 6,
    ClearMap = 7,
    GetUpgradeMax = 8,
    GetModule = 9,
    UseKey = 10,
    GetMemory = 11,
    PlayMVG = 12
}
public enum EventMVGMIssionSubType
{
    None = 0,
    MonsterKill = 1,
    BossMonsterKill = 2,
    GetItem = 3,
    ChapterClear = 4,
    Explorer = 5
}
public enum EventMVGMissionType
{
    Daily = 0,
    Achievement = 1
}
[MemoryPackable]
public partial class EventMVGDirectorTimelineValueData_Raw
{
    public string? TimelineValue;
}

public enum EventMVGDirectorTimeLineActionTypeData
{
    CamPointMove = 0,
    CamZoomAdjust = 1,
    CamShake = 2,
    CamPointReturnPlayer = 3,
    PlayTimelineAnimation = 4,
    PlayBGM = 5,
    PlaySE = 6,
    Wait = 7,
    FadeIn = 8,
    FadeOut = 9,
    ReturnToOriginalRoom = 10,
    EndTableTimeline = 11,
    BalloonDisplay = 12,
    ObjectStatusChange = 13,
    LoadTimelineAnimation = 14,
    StartBossIntroDisplay = 15,
    GoToLobby = 16
}
public enum EventMVGCurrencyTypeData
{
    Gold = 0,
    Core = 1,
    None = 2
}
public enum EventMVGCollectableCategoryData
{
    Memory = 0,
    HandWriting = 1,
    LostItem = 2,
    Key = 3
}
[MemoryPackable]
public partial class EventMVGCharacterCustomCustomVariablesData_Raw
{
    public EventMVGCharacterCustomVariablesTypeData CustomVariablesType;
    public EventMVGCharactercustomVariablesSettingData CustomVariables;
    public EventMVGCharacterCustomCalcTypeData CustomCalcType;
    public int CustomValue;
}

public enum EventMVGCharacterCustomCalcTypeData
{
    Add = 0,
    Mul = 1,
    Sub = 2,
    Set = 3,
    None = 4
}
public enum EventMVGCharactercustomVariablesSettingData
{
    MvSpd = 0,
    DashCount = 1,
    DashLength = 2,
    DashSpd = 3,
    DashDelay = 4,
    DashCool = 5,
    DashInvincible = 6,
    JmpCount = 7,
    JmpSpd = 8,
    JmpSpd_2nd = 9,
    JmpMaxHeight = 10,
    JmpMaxHeight_2nd = 11,
    LandedLockTime = 12,
    KnockInvincibleTime = 13,
    KnockLockTime = 14,
    AbsorbRecoveryTime = 15,
    AbsorbRecoveryAmount = 16,
    HealthRecoveryTime = 17,
    HealthRecoveryAmount = 18,
    Absorb_perfectTime = 19,
    Absorb_actLockTime = 20,
    Absorb_actLock_recoveryTime = 21,
    Absorb_actLock_recoveryValue = 22,
    Burst_gaugeConsumeTime = 23,
    Attack_keep = 24,
    ActionGroupID = 25,
    CoolDownTime = 26,
    GlobalCoolDownTime = 27,
    Proj_typeValue_1 = 28,
    Proj_typeValue_2 = 29,
    Proj_typeValue_3 = 30,
    Proj_typeValue_4 = 31,
    Proj_typeValue_5 = 32,
    Proj_typeValue_6 = 33,
    Proj_typeValue_7 = 34,
    Proj_typeValue_8 = 35,
    Proj_typeValue_9 = 36,
    Proj_typeValue_10 = 37,
    Proj_duration = 38,
    Proj_afterCollide = 39,
    Proj_pierce = 40,
    Proj_spd = 41,
    Proj_atk = 42,
    Proj_size = 43,
    Proj_dmgdelay = 44,
    Proj_amount = 45,
    Proj_dmgCount = 46,
    Stat_hp = 47,
    Stat_atk = 48,
    MaxAbsorbGauge = 49,
    MaxModuleSlot = 50,
    Currency = 51,
    Hold_move = 52,
    GlassC_toggle = 53,
    None = 54
}
public enum EventMVGCharacterCustomVariablesTypeData
{
    CharacterCustomAction = 0,
    CharacterCustom = 1,
    None = 2
}
public enum EventMVGCharacterCustomLockTypeData
{
    SemiLock = 0,
    HardLock = 1,
    NoneLock = 2,
    None = 3
}
public enum EventMVGCharacterCustomSubTypeData
{
    Active = 0,
    Passive = 1
}
public enum EventMVGCustomTypeMainData
{
    Skill_a = 0,
    Skill_b = 1,
    Skill_c = 2,
    Skill_d = 3,
    Skill_Burst_A = 4,
    Skill_Burst_B = 5,
    Skill_Burst_C = 6,
    Skill_Burst_D = 7,
    Chara_mv = 8,
    Chara_Dash = 9,
    Chara_Jump = 10,
    Chara_Lock = 11,
    Chara_Knockback = 12,
    Chara_Mode = 13,
    Chara_Unique = 14,
    Chara_Stat = 15
}
[MemoryPackable]
public partial class EventMVGCharacterCustomActionProjTypeValueData_Raw
{
    public string? ProjTypeValue;
}

public enum EventMVGCharacterCustomActionProjectileTypeData
{
    Linear = 0,
    Laser_Line = 1,
    Laser_Area = 2,
    Laser_Screen = 3,
    None = 4
}
public enum EventMVGCharacterCustomActionMuzzleTypeData
{
    A_Center = 0,
    A_Muzzle = 1,
    B_Center = 2,
    B_Muzzle = 3,
    C_Center = 4,
    C_Muzzle = 5,
    D_Center = 6,
    D_Muzzle = 7,
    Character_center = 8,
    Character_bottom = 9,
    None = 10
}
[MemoryPackable]
public partial class EventMVGCharacterCustomActionValueData_Raw
{
    public string? ActionValue;
}

public enum EventMVGCharacterCustomActionTypeData
{
    PlayFx = 0,
    StopFx = 1,
    GlassAction = 2,
    InvincibleOFF = 3,
    CharacterUnlock = 4,
    None = 5
}
public enum EventMVGBalloonTypeData
{
    Auto = 0,
    Manual = 1
}
public enum EventMissionInitType
{
    None = 0,
    Daily = 1,
    Weekly = 2
}
public enum EventActiveType
{
    None = 0,
    DailyOnce = 1,
    EveryTime = 2,
    IfRewardActive = 3
}
public enum ScheduleType
{
    None = 0,
    Once = 1,
    Rotation = 2,
    Monthly = 3,
    Weekly = 4
}
public enum EventGachaBoardMissionMissionCondition
{
    ObtainCharacter = 0,
    CharacterSkill1Level = 1,
    CharacterSkill2Level = 2,
    CharacterskillBurstLevel = 3,
    CharacterAttractiveLevel = 4,
    CharacterCollectionItemLevel = 5,
    CharacterEquipCollection = 6,
    CharacterEquipItemOverload = 7
}
[MemoryPackable]
public partial class riding_contents_value
{
    public EventFieldRidingContentsType EventFieldRidingContentsType;
    public string? ContentsSdModel;
    public string? ContentsModelChangeEffect;
}

public enum EventFieldRidingContentsType
{
    None = 0,
    Fishing = 1,
    Photo = 2
}
public enum NaviType
{
    None = 0,
    Ground = 1,
    Fly = 2,
    Water = 3,
    WaterAndGround = 4
}
public enum MemorialSeriesCategory
{
    Data = 0,
    CallLog = 1,
    HandWriting = 2,
    Category4 = 3,
    Category5 = 4,
    RedAsh = 5
}
public enum EventFieldRecollectionScenarioContentsType
{
    None = 0,
    StoryDungeon = 1,
    EventSuddenScenario = 2,
    MiniGame = 3,
    Memorial = 4
}
public enum EventFieldRecollectionCategoryType
{
    None = 0,
    Album = 1,
    Memorial = 2
}
public enum EventFieldNoticePopupPrintConditionType
{
    None = 0,
    ItemSpawn = 1,
    ItemObtain = 2,
    PasswordSpawn = 3,
    PasswordObtain = 4
}
public enum EventTargetEventType
{
    None = 0,
    Fishing = 1,
    Photo = 2
}
[MemoryPackable]
public partial class first_reward_Raw
{
    public int FirstRewardId;
    public int FirstRewardNum;
}

[MemoryPackable]
public partial class fix_reward_Raw
{
    public int FixRewardId;
    public int FixRewardNum;
}

public enum EvaStageType
{
    None = 0,
    Common = 1,
    Hard = 2,
    Ranking = 3
}
[MemoryPackable]
public partial class need_skill_Raw
{
    public int NeedSkillId;
}

public enum EvaSkillEffectType
{
    Mecha_attack = 0,
    Wingman_attack = 1,
    Hp = 2,
    Pick_range = 3,
    Ultimate_skill = 4,
    Display = 5,
    Danmaku = 6
}
public enum EvaMissionRewardType
{
    None = 0,
    Item = 1,
    DailyPoint = 2
}
public enum EvaMissionType
{
    None = 0,
    StarCnt = 1,
    PassAny = 2,
    BuffCnt = 3,
    UpSkill = 4,
    AchCnt = 5,
    DailyPointReward = 6,
    FinishSkillType = 7,
    KillEnemyCnt = 8,
    Score = 9,
    UnlockWingmanId = 10,
    UnlockMechaId = 11,
    UseMechaId = 12,
    UseMechaIdPass = 13,
    UseWingmanIdPass = 14,
    Damage = 15,
    PassNormal = 16,
    PassHard = 17,
    Sundry = 18,
    PassStageId = 19
}
public enum EvaMissionCategory
{
    None = 0,
    Star = 1,
    DailyPoint = 2,
    DailyMission = 3,
    Achievement = 4
}
public enum EvaItemType
{
    None = 0,
    Common = 1,
    Mecha = 2,
    Wingman = 3
}
public enum EvaBookType
{
    None = 0,
    Common = 1,
    Enemy = 2,
    Advanced = 3
}
[MemoryPackable]
public partial class PresetGroupData_Raw
{
    public int PresetGroupId;
    public int PresetGroupRatio;
}

public enum EventDragonDungeonRunKnockBackDirection
{
    None = 0,
    MoveDirection = 1,
    Back = 2,
    PreviousLocation = 3
}
public enum EventDragonDungeonRunObjectType
{
    Obstacle = 0,
    Fireball = 1,
    Rock = 2,
    Needle = 3,
    GiantAX = 4,
    StepStone = 5,
    MoveStepStone = 6,
    Rapture = 7,
    TrackingRapture = 8,
    Mimic = 9,
    TrackingMimic = 10,
    Dragon = 11,
    Gold = 12
}
public enum EventDragonDungeonRunMissionType
{
    GainPoint = 0,
    GainGold = 1,
    MoveDistance = 2,
    UseSkillCount = 3,
    PlayCharacterCount = 4
}
public enum EventDragonDungeonRunDeadCutScenePrintType
{
    None = 0,
    Fall = 1,
    Mimic = 2,
    GiantAX = 3,
    Fireball = 4,
    Rock = 5,
    Rapture = 6,
    Needle = 7,
    Dragon = 8
}
public enum EventDragonDungeonRunCutScenePrintTiming
{
    Dead = 0,
    Result = 1
}
public enum EventDragonDungeonRunCharacterSkillType
{
    Slash = 0,
    Timepause = 1,
    Fireball = 2,
    Recovery = 3
}
public enum EventDragonDungeonRunCharacterUnlockType
{
    None = 0,
    GainPoint = 1,
    GainGold = 2,
    MoveDistance = 3
}
[MemoryPackable]
public partial class DiceClearScenarioGroupData
{
    public string? ClearScenarioGroupId;
}

[MemoryPackable]
public partial class DiceClearRewardData
{
    public int ClearRewardId;
}

public enum DiceEventEventType
{
    None = 0,
    Item = 1,
    Leisure = 2,
    Training = 3,
    Contract = 4,
    PoorCondition = 5,
    Start = 6,
    GoTo = 7
}
public enum DiceEventRotationType
{
    None = 0,
    LeftUp = 1,
    RightUp = 2,
    LeftDown = 3,
    RightDown = 4
}
public enum EventDatingSimTutorialType
{
    None = 0,
    MyRoom = 1,
    WorldMap = 2,
    DialogEvent = 3,
    RelationEvent = 4,
    HeroineGroup = 5,
    LostItem = 6,
    InfinityTime = 7,
    InfinityStamina = 8
}
public enum EventDatingSimRelationResultEventType
{
    None = 0,
    Unlockheroine = 1,
    Relationlvup = 2,
    Ending = 3,
    Hiddenending = 4
}
[MemoryPackable]
public partial class RelationAppearSelectionConditionListData
{
    public string? EventConditionSelectionEvent;
}

[MemoryPackable]
public partial class RelationAppearDialogConditionListData
{
    public string? EventConditionDialogEvent;
}

[MemoryPackable]
public partial class RelationAppearHeroineConditionListData
{
    public string? ConditionTargetHeroine;
    public int EventConditionRelationLv;
    public int EventConditionRelationPoint;
}

[MemoryPackable]
public partial class RelationSubtitleLVListData
{
    public string? RelationSubtitleLv;
}

[MemoryPackable]
public partial class IsGroupEventRelationLVListData
{
    public bool IsGroupEventRelationLv;
}

[MemoryPackable]
public partial class HeroineIdListData
{
    public string? HeroineId;
}

public enum EventDatingSimTime
{
    None = 0,
    DayTime = 1,
    Evening = 2,
    Night = 3
}
public enum EventDatingSimHelpMessageType
{
    None = 0,
    Normal = 1,
    Heroine = 2,
    Relation = 3,
    Global = 4
}
public enum EventDatingSimHelpMessagePageType
{
    None = 0,
    Myroom = 1,
    Worldmap = 2
}
public enum EventDatingSimDialogSceneType
{
    None = 0,
    DialogScene = 1,
    PopupDialog = 2
}
public enum EventDatingSimDialogEventType
{
    None = 0,
    Heroine = 1,
    Extra = 2,
    Global = 3,
    Myroom = 4,
    Relation = 5,
    Epilogue = 6
}
public enum EventDatingSimAlbumCategory
{
    None = 0,
    Heroine = 1,
    Global = 2,
    Photo = 3
}
public enum FieldCollectContentsType
{
    None = 0,
    Can = 1
}
public enum CE004StageSeedRepeatType
{
    None = 0,
    Repeat = 1,
    Next = 2
}
public enum CE004StageSeedType
{
    None = 0,
    Order = 1,
    Random = 2
}
[MemoryPackable]
public partial class CE004OpenConditionTypeGroupData_Raw
{
    public CE004StageOpenConditionType OpenConditionType;
    public int OpenConditionValue;
}

public enum CE004StageOpenConditionType
{
    None = 0,
    EventCE004MiniGameDataClear = 1,
    EventDay = 2
}
public enum CE004StageDifficulty
{
    None = 0,
    Easy = 1,
    Normal = 2,
    Hard = 3,
    Challenge = 4
}
[MemoryPackable]
public partial class CE004SeedSkillTypeGroupData_Raw
{
    public CE004SkillType SkillType;
}

public enum CE004SkillCategory
{
    None = 0,
    Attack = 1,
    Defence = 2
}
[MemoryPackable]
public partial class CE004SkillPositionGroupData_Raw
{
    public CE004SkillType SkillPosition;
}

public enum CE004MissionRewardType
{
    None = 0,
    DailyPoint = 1,
    Item = 2,
    UpgradeCurrency = 3
}
public enum CE004MissionType
{
    None = 0,
    DailyPointReward = 1,
    CharacterPlay = 2,
    StageClear = 3,
    AccumulateDamage = 4,
    ChallengeDamage = 5,
    BuffUpgradeCount = 6,
    BurstSkill = 7,
    AttackSuccessCount = 8,
    DefenceSuccessCount = 9,
    SuccessCount = 10
}
public enum CE004MissionCategory
{
    None = 0,
    DailyPoint = 1,
    DailyMission = 2,
    Achievement = 3
}
public enum CE004MonsterPosition
{
    None = 0,
    LeftDestructionPosition = 1,
    RightDestructionPosition = 2,
    CorePosition = 3,
    LeftCancellingPosition = 4,
    RightCancellingPosition = 5,
    ProjectilePosition = 6
}
public enum HitTiming
{
    None = 0,
    Front = 1,
    Back = 2
}
public enum CE004SkillType
{
    None = 0,
    LeftDestruction = 1,
    RightDestruction = 2,
    Core = 3,
    LeftCancelling = 4,
    RightCancelling = 5,
    Projectile = 6,
    BurstSkill = 7
}
public enum CE004BuffType
{
    None = 0,
    IncreaseAttack = 1,
    IncreaseHP = 2,
    IncreaseCore = 3,
    IncreaseDestruction = 4,
    DecreaseProjectile = 5,
    DecreaseCancelling = 6,
    IncreaseChargingAttack = 7,
    IncreaseAttackBurstCharge = 8,
    IncreaseDefenceBurstCharge = 9
}
public enum CE004BuffCategory
{
    None = 0,
    Attack = 1,
    Defence = 2,
    Util = 3
}
public enum EventCE003MiniGameSkillType
{
    AddCookSlot = 0,
    MaidMoveSpeedUp = 1,
    CookSpeedUp = 2,
    CleaningSpeedUp = 3,
    HpReduceDown = 4,
    MealTimeReduce = 5,
    GetPointMore = 6,
    EventCustomerAppearUp = 7
}
public enum NpcType
{
    Normal = 0,
    Event = 1
}
public enum EventCE003MiniGameConditionsType
{
    StackPoint = 0,
    RenewRecord = 1
}
public enum EventCe003MiniGameMissionType
{
    TotalGet = 0,
    Achievement = 1
}
public enum CE002MiniGameProjectileType
{
    None = 0,
    Destroyable = 1,
    Indestroyable = 2,
    Random = 3
}
public enum CE002MiniGameMonsterType
{
    None = 0,
    Boss = 1,
    Move = 2,
    Stop = 3,
    Soft = 4,
    Hard = 5
}
[MemoryPackable]
public partial class EventCE002MiniGameDataOpenConditionObject
{
    public EventCE002MiniGameDataOpenCondition OpenConditionType;
    public int OpenConditionValue;
}

public enum EventCE002MiniGameDataOpenCondition
{
    None = 0,
    EventCE002MiniGameDataClear = 1,
    EventDay = 2
}
public enum EventCatchCoinObjectType
{
    None = 0,
    CharacterHit = 1,
    AddPoint = 2
}
public enum EventBubbleMarchTutorialCondition
{
    None = 0,
    EnterMainPageFirst = 1,
    EnterBuffPageFirst = 2,
    EnterStage = 3
}
public enum EBMEnemyTargetType
{
    None = 0,
    Tower = 1,
    Monster = 2
}
public enum EBMSummonSeedType
{
    None = 0,
    Order = 1,
    Random = 2
}
public enum EBMSummonTimeRepeatType
{
    None = 0,
    Next = 1,
    Repeat = 2
}
[MemoryPackable]
public partial class EBMSummonGroupData_Raw
{
    public int SummonPosition;
    public int SummonMonster;
    public int MonsterLevelAdd;
}

public enum EBMDifficultyType
{
    None = 0,
    Easy = 1,
    Normal = 2,
    Hard = 3,
    Challenge = 4
}
public enum EBMMonsterAttackType
{
    None = 0,
    Melee = 1,
    Range = 2
}
public enum EBMMonsterPositionType
{
    None = 0,
    Ground = 1,
    Air = 2
}
public enum EBMMonsterType
{
    None = 0,
    Tower = 1,
    Small = 2,
    Midium = 3,
    Big = 4,
    Huge = 5
}
public enum EventBubbleMarchMissionConditionType
{
    None = 0,
    WaveClear = 1,
    ChallengeWaveClear = 2,
    UseCurrency = 3,
    MinionSummon = 4,
    HeroSummon = 5,
    KillEnemy = 6,
    LevelUpCount = 7,
    TargetLevelUp = 8,
    DailyPoint = 9,
    BuffLevel = 10,
    StageClear = 11
}
public enum EventBubbleMarchMissionType
{
    None = 0,
    Daily = 1,
    Achievement = 2,
    DailyPoint = 3
}
public enum MiniGameSystemType
{
    Normal = 0,
    Archive = 1,
    Arcade = 2
}
public enum EBMCharacterDiscoverType
{
    None = 0,
    Quadrilateral = 1,
    Circle = 2
}
public enum EBMSearchTargetType
{
    None = 0,
    EnemyAll = 1,
    EnemyGround = 2,
    Friendly = 3
}
public enum EBMCharacterGradeType
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum EBMCharacterType
{
    None = 0,
    Tower = 1,
    Minion = 2,
    Hero = 3
}
public enum EBMCharacterSkillAreaType
{
    None = 0,
    Area = 1
}
public enum EBMCharacterSkillType
{
    None = 0,
    Attack = 1,
    Projectile = 2,
    ProjectileParabola = 3,
    Instant = 4,
    DeathBoom = 5,
    HpBarrier = 6,
    Teleport = 7,
    DecreaseCooltime = 8,
    Heal = 9,
    IncreaseAttackDamage = 10,
    HeroSpecialSkillAttack = 11,
    HeroSpecialSkillHeal = 12,
    BeamShot = 13
}
public enum EBMCharacterSkillTargetPositionType
{
    None = 0,
    Single = 1,
    Circle = 2,
    Quadrilateral = 3,
    All = 4
}
public enum EBMCharacterSkillTargetType
{
    None = 0,
    EnemyAll = 1,
    EnemyGround = 2,
    Self = 3,
    Friendly = 4
}
public enum EBMBuffType
{
    SetStageStartCharacterLevel = 0,
    DicreaseCharacterSummonCoolTime = 1,
    DicreaseCharacterSummonCost = 2,
    HeroSkillSummonUse = 3,
    HeroSkillCoolTimeUse = 4,
    IncreaseHeroSkillPower = 5,
    IncreaseStageChargeSummonCurrency = 6,
    SetStageStartSummonCurrencyLevel = 7
}
public enum BTGSkillType
{
    None = 0,
    SkillA = 1,
    SkillB = 2
}
[MemoryPackable]
public partial class ObjectId_Raw
{
    public int ObjectId;
}

public enum EventBTGMissionConditionType
{
    None = 0,
    GetPointStack = 1,
    UseSkillCount = 2
}
public enum CutSceneConditionType
{
    None = 0,
    SkillADeath = 1,
    SkillBDeath = 2
}
[MemoryPackable]
public partial class SkillData02_Raw
{
    public EventBHWeaponSkillType SkillType02;
    public List<SkillValueData02_Raw>? SkillValue02;
    public List<SkillResourceData02_Raw>? SkillResource02;
    public string? SkillDescriptionLocale02;
}

[MemoryPackable]
public partial class SkillResourceData02_Raw
{
    public string? SkillResource02;
}

[MemoryPackable]
public partial class SkillValueData02_Raw
{
    public int SkillValue02;
}

public enum EventBHWeaponSkillType
{
    None = 0,
    IgnoreDef = 1,
    BombProjectile = 2,
    KillAtkUp = 3,
    ReinforcedProj = 4,
    CriticalAttack = 5,
    DefDown = 6,
    SplitProj = 7,
    BounceProj = 8,
    DotDebuff = 9,
    InstantDeath = 10,
    DebuffCarpet = 11,
    ElectricDebuff = 12,
    DotDamageCarpet = 13,
    GainExpUp = 14,
    GainGoldRatioUp = 15,
    AllWeaponDamageRatioUp = 16,
    BarricadeHpUp = 17,
    BarricadeHpDown = 18,
    DamageReflection = 19,
    BarricadeHpRecovery = 20,
    CriticalProbabilityUp = 21,
    CriticalDamageUp = 22,
    ReloadTimeUp = 23
}
[MemoryPackable]
public partial class SkillData01_Raw
{
    public EventBHWeaponSkillType SkillType01;
    public List<SkillValueData01_Raw>? SkillValue01;
    public List<SkillResourceData01_Raw>? SkillResource01;
    public string? SkillDescriptionLocale01;
}

[MemoryPackable]
public partial class SkillResourceData01_Raw
{
    public string? SkillResource01;
}

[MemoryPackable]
public partial class SkillValueData01_Raw
{
    public int SkillValue01;
}

public enum EventBHWeaponTagType
{
    None = 0,
    Projectile = 1,
    Pierce = 2,
    Range = 3
}
public enum EventBHWeaponAtkType
{
    None = 0,
    Projectile = 1,
    ProjectileMultiShot = 2,
    ProjectileBomb = 3,
    Range = 4
}
public enum EventBHFocusTargetType
{
    None = 0,
    Near = 1,
    Random = 2
}
public enum EventBHWeaponType
{
    Firearms = 0,
    Subweapon = 1
}
[MemoryPackable]
public partial class SlotData_Raw
{
    public int Slot;
}

public enum BHTutorialOutputType
{
    FirstEnterBattle = 0,
    FirstOpenInGamePassive = 1,
    FirstOpenInventoryUpgrade = 2,
    FirstEnterEnhance = 3
}
[MemoryPackable]
public partial class PassiveSkillValueData_Raw
{
    public int SkillValue;
}

public enum BHPassiveSkillType
{
    GainExpUp = 0,
    GainGoldRatioUp = 1,
    AllWeaponDamageRatioUp = 2,
    RangeUp = 3,
    RangeAtkDamageUp = 4,
    ProjectileDamageUp = 5,
    PierceAtkDamageUp = 6,
    RangeAtkReloadTimeDown = 7,
    ProjectileReloadTimeDown = 8,
    PierceAtkReloadTimeDown = 9,
    AllWeaponReloadTimeDown = 10,
    CarpetHoldingTimeUp = 11,
    DebuffHoldingTimeUp = 12,
    DotHoldingTimeUp = 13,
    KnockBackDistanceUp = 14,
    MonsterEnhance = 15,
    GainGoldUp = 16,
    AllWeaponAtkUp = 17,
    AddHighLevelWeaponAppearanceValue = 18,
    AddBanCount = 19,
    AddRerollCount = 20,
    HPUp = 21,
    AddInventoryUpgrade = 22,
    AddSelectPassive = 23,
    BurstSkillDamageUp = 24
}
public enum BHPassiveType
{
    InGame = 0,
    OutGame = 1
}
[MemoryPackable]
public partial class MonsterSkillValueData_Raw
{
    public int MonsterSkillValue;
}

public enum BHMonsterSkillType
{
    None = 0,
    DefUp = 1,
    Split = 2
}
public enum BHMonsterAttackType
{
    Near = 0,
    Projectile = 1
}
public enum BHMonsterType
{
    Minion = 0,
    Elite = 1,
    Boss = 2
}
public enum EventBHConditionType
{
    None = 0,
    GainPoint = 1,
    GainGold = 2,
    UseSkill = 3,
    PlayCharacterCount = 4
}
[MemoryPackable]
public partial class InventorySlotData_Raw
{
    public int Slot;
}

[MemoryPackable]
public partial class SkillResourceData_Raw
{
    public string? SkillResource;
}

[MemoryPackable]
public partial class BHSkillValueData_Raw
{
    public int SkillValue;
}

public enum BHCharacterSkillType
{
    Knockback = 0,
    CarpetBombing = 1,
    Support = 2
}
[MemoryPackable]
public partial class StateEffectList
{
    public int StateEffectId;
    public int StateEffectLevel;
}

public enum EchoDialogTriggerType
{
    None = 0,
    Manual = 1,
    Auto = 2
}
public enum EchoDialogFieldDifficultyType
{
    None = 0,
    Normal = 1,
    Hard = 2
}
public enum EchoDialogFieldType
{
    None = 0,
    Campaign = 1,
    LostSector = 2,
    Event = 3
}
[MemoryPackable]
public partial class DispatchGrade_Data
{
    public DispatchSlotType DispatchSlotType;
    public OriginalRareType Rare;
    public int SlotValue;
}

public enum DispatchSlotType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ALL = 5,
    ABNORMAL = 6,
    CHARACTER = 7
}
public enum SelectType
{
    None = 0,
    Select = 1
}
[MemoryPackable]
public partial class DispatchBoardData
{
    public int DispatchGroup;
    public int DispatchProb;
}

public enum DispatchType
{
    None = 0,
    Dispatch = 1,
    DispatchCollection = 2,
    DispatchFavorite = 3
}
public enum EventTargetType
{
    None = 0,
    Alluser = 1,
    Newuser = 2,
    Comebackuser = 3
}
public enum EventPhaseType
{
    None = 0,
    Day1 = 1,
    Day2 = 2,
    Day3 = 3,
    Day4 = 4,
    Day5 = 5,
    Day6 = 6,
    Day7 = 7,
    Day8 = 8,
    Day9 = 9,
    Day10 = 10,
    Day11 = 11,
    Day12 = 12,
    Day13 = 13,
    Day14 = 14,
    Final = 15
}
[MemoryPackable]
public partial class CostData
{
    public RewardType ItemType;
    public int ItemId;
    public int ItemValue;
}

public enum CooperationEventContentsType
{
    None = 0,
    MultiRaid = 1
}
public enum RenewType
{
    None = 0,
    AutoDay = 1,
    AutoWeek = 2,
    AutoMonth = 3,
    EachUser = 4,
    ManualRenew = 5,
    NoRenew = 6
}
public enum ShopCategoryType
{
    None = 0,
    ShopNormal = 1,
    ShopGuild = 2,
    ShopDisassemble = 3,
    ShopMaze = 4,
    ShopPvP = 5,
    ShopCooperationEvent = 6,
    ShopStoryEvent = 7,
    ShopMileage = 8,
    ShopTrade = 9
}
public enum ShopType
{
    None = 0,
    MainShop = 1,
    EventShop = 2
}
public enum CurrencyType
{
    None = 0,
    UserExp = 1,
    ChargeCash = 98,
    FreeCash = 99,
    CharacterExp = 1000,
    Gold = 2000,
    CharacterExp2 = 3000,
    Friendship_Point = 4000,
    ArenaChip = 5000,
    Char_Premium_Ticket = 5100,
    Char_Customize_Ticket = 5200,
    Char_Corporation_Ticket = 5300,
    Char_CE002_RE_Ticket = 5401,
    Char_CE007_Ticket = 5402,
    Char_Select_01_Ticket = 5501,
    Arena_Ticket = 6001,
    _2nd_Arena_Ticket = 6002,
    InterceptTicket = 6003,
    ContentStamina = 6100,
    RecycleRoomPoint = 6200,
    InfraCoreEnergy = 7000,
    RaptureParts = 8000,
    RapturePartsRanking = 8100,
    DissolutionPoint = 9000,
    InApp = 9999,
    GuildCoin = 10000,
    SilverMileageTicket = 11000,
    GoldMileageTicket = 12000,
    SimulationRoomPoint = 13000,
    CharacterSkillReset_Ticket = 14000,
    CorePowder = 21000,
    Goddesium = 22000,
    Geonic = 23000,
    NeoTitanium = 24000
}
public enum add_mark
{
    None = 0,
    Event = 1
}
public enum ContentsShopDescriptionType
{
    None = 0,
    Stage = 1
}
public enum PriceType
{
    Currency = 0,
    Item = 1
}
public enum RewardConditionType
{
    Rank = 0,
    RankPercent = 1,
    DamageDoneToTargetMonster = 2
}
public enum VoiceTargetType
{
    Character = 0,
    Costume = 1
}
public enum CategoryType
{
    None = 0,
    Air_Attacker = 1,
    Air_Defender = 2,
    Air_Supporter = 3,
    Attacker = 4,
    Defender = 5,
    Supporter = 6,
    Walk = 7,
    Fly = 8
}
public enum TableType
{
    None = 0,
    StateEffect = 1,
    CharacterSkill = 2
}
public enum BurstStep
{
    None = 0,
    Step1 = 1,
    Step2 = 2,
    Step3 = 3,
    StepFull = 4,
    AllStep = 5,
    NextStep = 6,
    KeepStep = 7
}
public enum CorporationSubType
{
    NORMAL = 0,
    OVERSPEC = 1
}
public enum CorporationType
{
    None = 0,
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    PILGRIM = 4,
    ALL = 5,
    RANDOM = 6,
    ABNORMAL = 7
}
public enum DurationType
{
    None = 0,
    TimeSec = 1,
    Shots = 2,
    Battles = 3,
    Hits = 4,
    SkillShots = 5,
    TimeSecBattles = 6,
    OnStun = 7,
    OnRemoveFunction = 8,
    Hits_Ver2 = 9,
    TimeSec_Ver2 = 10,
    TimeSec_Ver3 = 11,
    ReloadAllAmmoCount = 12,
    UncoverableCount = 13,
    ChangeWeaponUseCount = 14
}
[MemoryPackable]
public partial class SkillValueData
{
    public SkillValueType SkillValueType;
    public long SkillValue;
}

public enum SkillValueType
{
    None = 0,
    Integer = 1,
    Percent = 2
}
public enum CharacterSkillType
{
    None = 0,
    InstantAll = 1,
    InstantNumber = 2,
    AimingExplosion = 3,
    AimingPenetration = 4,
    InstallDrone = 5,
    InstallBarrier = 6,
    ChangeWeapon = 7,
    SetBuff = 8,
    InstantSkill = 9,
    Custom191Ulti = 10,
    LaunchWeapon = 11,
    TargetShot = 12,
    InstantCircle = 13,
    InstantLine = 14,
    InstantArea = 15,
    InstallDecoy = 16,
    MultiTarget = 17,
    LaserBeam = 18,
    Stigma = 19,
    MaxHPInstantNumber = 20,
    InstantCircleSeparate = 21,
    HitMonsterGetBuff = 22,
    ExplosiveCircuit = 23,
    InstantSequentialAttack = 24,
    ReFullChargeHitDamage = 25,
    InstantAllParts = 26,
    TargetHitCountGetBuff = 27,
    HealCharge = 28
}
public enum CounterType
{
    None = 0,
    Metal_Type = 1,
    Energy_Type = 2,
    Bio_Type = 3
}
public enum CharacterReactionType
{
    Enter = 0,
    Touch = 1,
    Stay = 2,
    Special_lobby_change = 3
}
public enum CharacterLevelType
{
    None = 0,
    CharacterLevel = 1,
    SynchroLevel = 2
}
public enum CostumeShopType
{
    None = 0,
    Costume = 1,
    PassCostume = 2
}
public enum CostumeGrade
{
    Event = 0,
    Special = 1,
    Collaboration = 2,
    Multiverse = 3,
    Unique = 4
}
public enum StageCategory
{
    Normal = 0,
    Story = 1,
    Hard = 2,
    Extra = 3,
    Boss = 4
}
public enum CampaignPackageRewardType
{
    Free = 0,
    Purchase = 1,
    ChapterClear = 2
}
public enum ChapterGuideType
{
    None = 0,
    Tutorial = 1,
    Common = 2
}
public enum OpenType
{
    Open = 0,
    NonUpdate = 1
}
[MemoryPackable]
public partial class bot_equipment_data
{
    public int EquipmentId;
    public int EquipmentLevel;
}

public enum BotCategory
{
    RookieArenaRival = 0,
    SpecialArenaTop = 1,
    CooperationEvent = 2,
    DefaultBot = 3,
    ChampionArena = 4
}
public enum BGMTriggerEventType
{
    None = 0,
    Stage_enter = 1,
    Stage_clear = 2,
    Target_appear = 3,
    Change_Phase_2 = 4,
    Change_Phase_3 = 5,
    Stage_start = 6
}
public enum BGMSubType
{
    None = 0,
    Campaign_stage = 1,
    Sudden_battle = 2,
    Lost_sector = 3,
    ArenaSpecial = 4,
    ArenaNormal = 5,
    ALL = 6,
    ELYSION = 7,
    MISSILIS = 8,
    TETRA = 9,
    PILGRIM = 10,
    Outpost = 11,
    Multi_raid = 12,
    Simulation_room = 13,
    Raid = 14,
    Shooting_range = 15,
    Event_stage = 16,
    Event_field = 17,
    Gacha = 18,
    Jukebox_lobby = 19,
    Jukebox_commandcenter = 20,
    Side_story = 21,
    Arcade = 22,
    Archive_field = 23
}
public enum BGMType
{
    None = 0,
    Chapter_bgm = 1,
    Arena_bgm = 2,
    Spot_bgm = 3,
    Outgame_bgm = 4,
    Ambient = 5,
    Story_event_bgm = 6,
    Event_field_bgm = 7,
    Story_event_bgm_set = 8
}
public enum BGMShopType
{
    None = 0,
    CashShop = 1,
    ContentsShop = 2
}
public enum EventBBQTycoonCustomerBonusType
{
    None = 0,
    PointX2 = 1,
    FeverX2 = 2
}
public enum BannerPrintType
{
    None = 0,
    PrintEventTime = 1,
    PrintNone = 2,
    UndeterminedEnd = 3
}
public enum BannerSystemType
{
    None = 0,
    InAppShop = 1,
    CampaignNormal = 2,
    CampaignHard = 3,
    UnionRaid = 4,
    MidasBuy = 5
}
public enum ArenaChampionUnionRankConditionType
{
    None = 0,
    UnionMemberTournament1 = 1,
    UnionMemberTournament2 = 2,
    UnionMemberTournament4 = 3,
    UnionMemberTournament8 = 4,
    UnionMemberTournament16 = 5,
    UnionMemberTournament32 = 6,
    UnionMemberTournament64 = 7,
    UnionMemberEnterLeague = 8
}
public enum ArenaChampionTotalRankConditionType
{
    None = 0,
    EnterLeagueCount = 1,
    EnterTournamentCount64 = 2,
    EnterTournamentCount32 = 3,
    EnterTournamentCount16 = 4,
    EnterTournamentCount8 = 5,
    EnterTournamentCount4 = 6,
    EnterTournamentCount2 = 7,
    EnterTournamentCount1 = 8
}
public enum RewardDataLoadType
{
    EventDungeonDifficult = 0
}
public enum ArchiveRecordType
{
    StoryEvent = 0,
    EventQuest = 1,
    CollaboEvent = 2
}
public enum ShortCutsInteractionType
{
    CampaignAlbum = 0,
    ArchiveRecord = 1
}
[MemoryPackable]
public partial class ArchiveMessengerConditionObject
{
    public ArchiveMessengerConditionType ConditionType;
    public int ConditionId;
}

public enum ArchiveMessengerConditionType
{
    None = 0,
    EventStageClear = 1,
    MessageClear = 2,
    CampaignClear = 3
}
public enum EventSystemType
{
    None = 0,
    DailyMissionEvent = 1,
    LoginEvent = 2,
    ViewShortCut = 3,
    CooperationEvent = 4,
    StoryEvent = 5,
    PickupGachaEvent = 6,
    PollEvent = 7,
    ComeBackUserEvent = 8,
    EventPass = 9,
    FieldHubEvent = 10,
    ShopEvent = 11,
    MissionEvent = 12,
    ChargeGachaEvent = 13,
    MiniGameSortOut = 14,
    CharacterSkillResetEvent = 15,
    EventQuest = 16,
    RewardUpEvent = 17,
    SDBattleEvent = 18,
    TextAdventure = 19,
    ChallengeModeEvent = 20,
    DailyFreeGachaEvent = 21,
    BoxGachaEvent = 22,
    DiceEvent = 23,
    BBQTycoon = 24,
    CE002MiniGame = 25,
    TriggerMissionEventReward = 26,
    ArenaRookieGroupShuffle = 27,
    ArenaSpecialGroupShuffle = 28,
    NKSMiniGame = 29,
    DatingSimulator = 30,
    DessertRush = 31,
    CE003MiniGame = 32,
    TowerDefense = 33,
    EventPlaySoda = 34,
    IslandAdventure = 35,
    MiniGameDD = 36,
    CE004MiniGame = 37,
    MVGMiniGame = 38,
    DragonDungeonRunMiniGame = 39,
    NewPlayerLottery = 40,
    PirateCafe = 41,
    CEEvaMiniGame = 42,
    BubbleMarchMiniGame = 43,
    CE006BossChallengeMiniGame = 44,
    SupportCharacterEvent = 45,
    GachaBoard = 46,
    FreeRewardPass = 47,
    GachaPayback = 48,
    FieldCollectEvent = 49,
    MiniGameBTG = 50,
    RopeRunningMiniGame = 51,
    CE007MiniGame = 53
}
[MemoryPackable]
public partial class EventFieldCurrencyData
{
    public EventFieldCurrencyType EventFieldCurrencyType;
    public int EventFieldCurrencyId;
}

public enum EventFieldCurrencyType
{
    None = 0,
    Material = 1,
    Currency = 2,
    AutoCharge = 3
}
public enum FieldPlayerSquadType
{
    None = 0,
    UserSquad = 1,
    FixedSquad = 2
}
public enum EventFieldRoamingNPCType
{
    UserCharacter = 0,
    FixedSDCharacter = 1
}
[MemoryPackable]
public partial class ArchiveEventFieldNPCEventData
{
    public int EventId;
    public EventFieldChildEventType EventType;
    public string? EventResourceValue;
}

public enum EventFieldChildEventType
{
    None = 0,
    Cooperation = 1,
    ToastMessage = 2,
    Arcade = 3
}
public enum FieldFixedSDCharacterReferenceType
{
    None = 0,
    CharacterTable = 1,
    ScenarioCharacterSettingTable = 2
}
public enum EventFieldSDCharacterUsageType
{
    Squad = 0,
    RoamingNPC = 1
}
public enum EventDungeonContentsType
{
    None = 0,
    SpotBattle = 1,
    TowerDefense = 2,
    EventPlaySoda = 3,
    EVABattle = 4
}
public enum QuickBattleType
{
    None = 0,
    StageClear = 1,
    StandardBattlePower = 2
}
[MemoryPackable]
public partial class EventDungeonOpenConditionObject
{
    public EventDungeonOpenCondition OpenConditionType;
    public int OpenConditionValue;
}

public enum EventDungeonOpenCondition
{
    None = 0,
    EventDungeonStageClear = 1,
    EventDay = 2
}
public enum ArcadeGameType
{
    BBQTycoon = 0,
    MiniGameSortOut = 1,
    NKSMiniGame = 2,
    TowerDefense = 3,
    DessertRush = 4,
    Mvg = 5,
    PlaySoda = 6,
    BubbleMarch = 7
}
public enum DialogType
{
    Normal = 0,
    NKSmini = 1
}
public enum ScenarioDialogTableType
{
    None = 0,
    ScenarioDialog = 1,
    EventScenarioDialog = 2
}
public enum EventFieldNPCInteractionType
{
    None = 0,
    Immediately = 1
}
[MemoryPackable]
public partial class EventFieldNPCEventData
{
    public int EventId;
    public EventFieldChildEventType EventType;
    public string? EventResourceValue;
}

public enum EventFieldNPCType
{
    Character = 0,
    Npc = 1
}
public enum FieldProgressEventCheckCondition
{
    None = 0,
    Talk = 1
}
public enum FieldProgressEventType
{
    None = 0,
    MapChange = 1,
    IncreaseDummy = 2,
    CameraAction = 3,
    ScenarioDialog = 4,
    FieldTalk = 5,
    Spawn = 6,
    Despawn = 7,
    TimeLineAction = 8,
    HudChange = 9,
    PlayerSquadChangeToFixedSquad = 10,
    MapPresetChange = 11
}
public enum FieldProgressEventTarget
{
    None = 0,
    Field = 1,
    NPC = 2
}
[MemoryPackable]
public partial class SelectionEventValueListData
{
    public string? EventTargetHeroine;
    public int EventValue;
    public EventDatingSimSelectionResultGradeType EventResultGrade;
}

public enum EventDatingSimSelectionResultGradeType
{
    None = 0,
    Low = 1,
    Medium = 2,
    High = 3
}
public enum EventDatingSimSelectionEventType
{
    None = 0,
    Relationpointup = 1
}
[MemoryPackable]
public partial class SelectDialogConditionListData
{
    public string? SelectConditionDialogEvent;
}

[MemoryPackable]
public partial class SelectConditionListData
{
    public string? ConditionTargetHeroine;
    public int SelectConditionRelationLv;
    public int SelectConditionRelationPoint;
}

[MemoryPackable]
public partial class DialogAppearSelectionConditionListData
{
    public string? EventConditionSelectionEvent;
}

[MemoryPackable]
public partial class DialogAppearDialogConditionListData
{
    public string? EventConditionDialogEvent;
}

public enum CooperationEventReportType
{
    None = 0,
    No_attack_input_time_total = 1,
    No_all_input_time_total = 2
}
[MemoryPackable]
public partial class buff_data
{
    public CooperationBuffTargetCategoryType BuffTargetType;
    public CooperationBuffTargetType BuffTarget;
    public int BuffId;
    public string? BuffThumbnail;
}

public enum CooperationBuffTargetType
{
    None = 0,
    Elysion = 1,
    Missilis = 2,
    Tetra = 3,
    Pilgrim = 4,
    Attacker = 5,
    Defender = 6,
    Supporter = 7,
    AbNormal = 8
}
public enum CooperationBuffTargetCategoryType
{
    None = 0,
    Corporation = 1,
    Class = 2
}
public enum EventType
{
    None = 0,
    Outpost = 1
}
[MemoryPackable]
public partial class TriggerData
{
    public Trigger Trigger;
    public int ConditionId;
    public int ConditionValue;
}

public enum TypeOpenCondition
{
    None = 0,
    ClearGetCharacterMission = 1
}
[MemoryPackable]
public partial class LessonConditionData
{
    public LessonConditionType ConditionType;
    public int ConditionValue;
}

public enum LessonConditionType
{
    None = 0,
    StageClear = 1,
    OpenLesson = 2,
    Build = 3,
    AllCorporationGrade3 = 4,
    MissilisCorporationGrade3 = 5,
    ElysionCorporationGrade3 = 6,
    TetraCorporationGrade3 = 7,
    PilgrimCorporationGrade3 = 8,
    AbnormalCorporationGrade3 = 9
}
[MemoryPackable]
public partial class LessonRewardData
{
    public int LessonRewardId;
    public int LessonRewardValue;
}

public enum LessonType
{
    None = 0,
    Dispatch = 1,
    OutpostBattle = 2,
    SpecialArena = 3,
    Intercept = 4,
    SynchroDevice = 5,
    BuildingSlot = 6,
    SimulationRoom = 7,
    DispatchCollection = 8,
    DispatchFavorite = 9
}
[MemoryPackable]
public partial class OutpostBattle_Data
{
    public int ViewItemId;
    public PrepareRewardType ItemType;
    public int ItemId;
    public int ItemValue;
    public int TimeSec;
}

public enum PrepareRewardType
{
    None = 0,
    Currency = 1,
    ItemRandom = 2
}
public enum BuildingCategory
{
    None = 0,
    Default = 1,
    CommanderCenter = 2,
    Elevator = 3,
    DispatchBoard = 4,
    SynchroDevice = 5,
    RecycleRoom = 6,
    TacticAcademy = 7,
    InfraCore = 8,
    AmusementPark = 9,
    OutdoorPool = 10,
    FlowerPark = 11,
    EventBuilding01 = 12
}
public enum AssistSquadControlType
{
    None = 0,
    Auto = 1
}
public enum AssistSquadMoveType
{
    Ground = 0,
    Fly = 1,
    Ground_Electric = 2
}
public enum AssistSquadType
{
    None = 0,
    Pickup = 1,
    Hammer = 2,
    Fix = 3,
    Hacking = 4,
    Transport = 5,
    Cat = 6,
    Mini = 7,
    Electric = 8,
    ConvertGround = 9,
    ConvertFly = 10
}
public enum ThemeTimeType
{
    None = 0,
    Day = 1,
    Twilight = 2,
    Night = 3,
    Smog = 4,
    Elysion = 5,
    Missilis = 6,
    Tetra = 7,
    Pilgrim = 8
}
public enum ThemeType
{
    None = 0,
    CityForest = 1,
    CityForestUnder = 2,
    CityForestmbg002 = 3,
    Desert = 4,
    Desertmbg001 = 5,
    GreatHole = 6,
    IceLand = 7,
    Wasteland = 8,
    ArcCity = 9,
    ArcOut = 10,
    ArcLAB = 11,
    Tower = 12,
    MissilesTower = 13,
    ElysionTower = 14,
    TetraTower = 15,
    PilgrimTower = 16,
    VillageCity = 17,
    VillageOut = 18,
    Gravedigger = 19,
    Stormbringer = 20,
    Lostsector = 21,
    NormalArena = 22,
    SpecialArena = 23,
    ChampionArena = 24,
    Volcano = 25,
    ArkCityDay = 26,
    Ocean = 27,
    Oceanbbg004 = 28,
    Simulation = 29,
    RedOcean = 30,
    RedOceanFarSea = 31,
    SwamplandJungle = 32,
    Surface = 33,
    MotherwhaleField = 34
}
public enum ArenaType
{
    None = 0,
    ArenaNormal = 1,
    ArenaSpecial = 2,
    ArenaChampion = 3
}
public enum InterceptSpotType
{
    WaveData = 0,
    NKSMiniGame = 1
}
public enum CameraShakeType
{
    Fire_AR = 0,
    Fire_MG = 1,
    Fire_SMG = 2,
    Fire_RL = 3,
    Fire_SG = 4,
    Fire_SR = 5,
    Hit_RL = 6,
    CharacterSkillShake01 = 7,
    CharacterSkillShake02 = 8,
    CharacterSkillShake03 = 9,
    CharacterHit = 10,
    MonsterSkillCancel = 11,
    MonsterPartsBroken = 12,
    Monsterlanding = 13
}
public enum PreferTargetconditionType
{
    None = 0,
    ExcludeSelf = 1,
    DestroyCover = 2,
    IncludeNoneTargetLast = 3,
    IncludeNoneTargetNone = 4,
    OnlySG = 5,
    OnlyAR = 6,
    OnlySMG = 7,
    OnlyMG = 8,
    OnlySR = 9,
    OnlyRL = 10
}
public enum InputType
{
    NONE = 0,
    DOWN = 1,
    UP = 2,
    DOWN_Charge = 3
}
public enum CounterEnermy
{
    None = 0,
    Metal_Type = 1,
    Energy_Type = 2,
    Bio_Type = 3
}
public enum CostumePriceType
{
    None = 0,
    Regular = 1,
    Bargain = 2
}
public enum CashShopProductType
{
    None = 0,
    Currency = 1,
    Item = 2,
    Package = 3,
    Subscription = 4,
    Pass = 5
}
public enum ShopBuyLimitType
{
    None = 0,
    Account = 1,
    Daily = 2,
    Weekly = 3,
    Monthly = 4,
    Renew = 5
}
[MemoryPackable]
public partial class HarmonyCubeStatData
{
    public StatType StatType;
    public int StatRate;
}

[MemoryPackable]
public partial class SkillLevelData
{
    public int SkillLevel;
}

[MemoryPackable]
public partial class HarmonyCubeSkillGroupData
{
    public int SkillGroupId;
}

public enum CharacterClassType
{
    None = 0,
    Attacker = 1,
    Defender = 2,
    Supporter = 3,
    All = 4
}
public enum PercentDisplayType
{
    None = 0,
    Percent = 1,
    Random = 2
}
public enum ItemUseType
{
    None = 0,
    Char_Exp = 1,
    Currency = 2,
    SelectBox = 3,
    Item = 4,
    SummonCharacter = 5,
    SummonRandomCharacter = 6,
    CurrencyTimeReward = 7,
    BundleBox = 8,
    ItemRandomBox = 9,
    SelectBoxRow = 10,
    SelectBoxRowCharacter = 11,
    EquipCombination = 12,
    MVGGold = 13,
    MVGCore = 14,
    MVGCollectable = 15
}
public enum OriginalRareType
{
    None = 0,
    R = 1,
    SR = 2,
    SSR = 3
}
public enum ItemSubType
{
    None = 0,
    Module_A = 1,
    Module_B = 2,
    Module_C = 3,
    Module_D = 4,
    Box = 5,
    Char_Material = 6,
    Equip_Material = 7,
    Attack_Equip_Material = 8,
    Defence_Equip_Material = 9,
    Support_Equip_Material = 10,
    AttractiveMaterial = 11,
    CharacterPiece = 12,
    SummonPiece = 13,
    MaterialPiece = 14,
    TimeReward = 15,
    OutpostBuild_Material = 16,
    RecycleRoom_Material = 17,
    HarmonyCube = 18,
    HarmonyCube_Material = 19,
    BundleBox = 20,
    ItemRandomBoxList = 21,
    ItemRandomBoxNormal = 22,
    EventCurrencyMaterial = 23,
    EventTicketMaterial = 24,
    EquipmentOptionMaterial = 25,
    CharacterSkillMaterial = 26,
    SetNickNameMaterial = 27,
    CharacterSkillResetMaterial = 28,
    SynchroSlotOpenMaterial = 29,
    FavoriteMaterial = 30,
    FavoriteTranscendMaterial = 31,
    ProfileCardTicketMaterial = 32,
    ProfileRandomBox = 33,
    EquipmentOptionDisposableFixMaterial = 34,
    EquipCombination = 35,
    EventItem = 36,
    ArcadeItem = 37
}
public enum ItemType
{
    None = 0,
    Equip = 1,
    Consume = 2,
    Material = 3,
    Piece = 4,
    HarmonyCube = 5
}
public enum UseCondition
{
    None = 0,
    UserLevel = 1,
    StageClear = 2
}
public enum CancelType
{
    None = 0,
    BreakCol = 1,
    BrokenParts = 2,
    BrokenParts_OnlyCasting = 3,
    BrokenParts_HurtCount = 4,
    BrokenParts_UntilEnd = 5
}
public enum PartsType
{
    None = 0,
    Arm_Left = 1,
    Arm_Right = 2,
    Head = 3,
    Body_Lower = 4,
    Body_Upper = 5,
    Body = 6,
    Chest = 7,
    Belly = 8,
    Leg_Front_Left = 9,
    Leg_Front_Right = 10,
    Leg_Back_Left = 11,
    Leg_Back_Right = 12,
    Weapon_01 = 13,
    Weapon_02 = 14,
    Weapon_03 = 15,
    Weapon_04 = 16,
    Weapon_05 = 17,
    Weapon_06 = 18,
    Weapon_07 = 19,
    Weapon_08 = 20,
    Weapon_09 = 21,
    Weapon_10 = 22
}
public enum ObjectPositionType
{
    None = 0,
    Local = 1,
    World = 2
}
public enum PreferTargetType
{
    None = 0,
    Attacker = 1,
    Defender = 2,
    Supporter = 3,
    AttackerRandom = 4,
    DefenderRandom = 5,
    SupporterRandom = 6,
    Front = 7,
    Back = 8,
    Left = 9,
    Right = 10,
    LowHP = 11,
    HighHP = 12,
    HighMaxHP = 13,
    LowDefence = 14,
    HighDefence = 15,
    LowAttack = 16,
    HighAttack = 17,
    LowHPLastSelf = 18,
    HighHPLastSelf = 19,
    LowDefenceLastSelf = 20,
    HighDefenceLastSelf = 21,
    LowAttackLastSelf = 22,
    HighAttackLastSelf = 23,
    TargetSR = 24,
    TargetAR = 25,
    TargetAS = 26,
    TargetRL = 27,
    TargetGL = 28,
    TargetPS = 29,
    BurstStep = 30,
    Random = 31,
    LowHPFirstSelf = 32,
    HighHPFirstSelf = 33,
    LowDefenceFirstSelf = 34,
    HighDefenceFirstSelf = 35,
    LowAttackFirstSelf = 36,
    HighAttackFirstSelf = 37,
    NearbyAllyTarget = 38,
    NearbyEnemyTarget = 39,
    NearbyAllyLastSelf = 40,
    Fire = 41,
    Water = 42,
    Wind = 43,
    Electronic = 44,
    Iron = 45,
    NotStun = 46,
    LowHPCover = 47,
    LowHPRatio = 48,
    HighHPRatio = 49,
    LowMaxHP = 50,
    HaveDebuff = 51,
    HaveBuff = 52,
    NearAim = 53,
    LongInitChargeTime = 54
}
public enum WeaponObjectEnum
{
    None = 0,
    Weapon_object_01 = 1,
    Weapon_object_02 = 2,
    Weapon_object_03 = 3,
    Weapon_object_04 = 4,
    Weapon_object_05 = 5,
    Weapon_object_06 = 6,
    Weapon_object_07 = 7,
    Weapon_object_08 = 8,
    Weapon_object_09 = 9,
    Weapon_object_10 = 10,
    Weapon_object_11 = 11,
    Weapon_object_12 = 12,
    Weapon_object_13 = 13,
    Weapon_object_14 = 14,
    Weapon_object_15 = 15,
    Weapon_object_16 = 16,
    Weapon_object_17 = 17,
    Weapon_object_18 = 18,
    Weapon_object_19 = 19,
    Weapon_object_20 = 20
}
public enum MonsterSkillValueType
{
    None = 0,
    Percent = 1,
    Integer = 2
}
public enum ShotTimingType
{
    None = 0,
    Concurrence = 1,
    Sequence = 2,
    ConcurrenceGroup = 3
}
public enum FireType
{
    None = 0,
    Instant = 1,
    ProjectileCurve = 2,
    ProjectileDirect = 3,
    HomingProjectile = 4,
    MultiTarget = 5,
    Blow = 6,
    Suicide = 7,
    Calling = 8,
    InstantAll = 9,
    InstantNumber = 10,
    ObjectCreate = 11,
    Summon = 12,
    Barrier = 13,
    Range = 14,
    NormalCalling = 15,
    InstantAll_FrontRay = 16,
    StickyProjectileDirect = 17,
    ObjectCreateToDecoy = 18,
    MechaShiftyShot = 19,
    ProjectileCurveV2 = 20
}
public enum AttackType
{
    None = 0,
    Energy = 1,
    Metal = 2,
    Bio = 3,
    Fire = 4,
    Water = 5,
    Wind = 6,
    Iron = 7,
    Electronic = 8
}
public enum WeaponType
{
    None = 0,
    AR = 1,
    RL = 2,
    SR = 3,
    MG = 4,
    SG = 5,
    AS = 6,
    GL = 7,
    PS = 8,
    SMG = 9
}
public enum SkillAniNumberType
{
    None = 0,
    Shot_01 = 1,
    Shot_02 = 2,
    Shot_03 = 3,
    Shot_04 = 4,
    Shot_05 = 5,
    Shot_06 = 6,
    Shot_07 = 7,
    Shot_08 = 8,
    Shot_09 = 9,
    Shot_10 = 10,
    Shot_11 = 11,
    Shot_12 = 12,
    Shot_13 = 13,
    Shot_14 = 14,
    Shot_15 = 15,
    Shot_16 = 16,
    Shot_17 = 17,
    Shot_18 = 18,
    Shot_19 = 19,
    Shot_20 = 20,
    Shot_21 = 21,
    Shot_22 = 22,
    Shot_23 = 23,
    Shot_24 = 24,
    Shot_25 = 25,
    Shot_26 = 26,
    Shot_27 = 27,
    Shot_28 = 28,
    Shot_29 = 29,
    Shot_30 = 30,
    Shot_31 = 31,
    Shot_32 = 32,
    Shot_33 = 33,
    Shot_34 = 34,
    Shot_35 = 35,
    Shot_36 = 36,
    Shot_37 = 37,
    Shot_38 = 38,
    Shot_39 = 39,
    Shot_40 = 40,
    Shot_41 = 41,
    Shot_42 = 42,
    Shot_43 = 43,
    Shot_44 = 44,
    Shot_45 = 45,
    Shot_46 = 46,
    Shot_47 = 47,
    Shot_48 = 48,
    Shot_49 = 49,
    Shot_50 = 50,
    Shot_51 = 51,
    Shot_52 = 52,
    Shot_53 = 53,
    Shot_54 = 54,
    Shot_55 = 55,
    Shot_56 = 56,
    Shot_57 = 57,
    Shot_58 = 58,
    Shot_59 = 59,
    Shot_60 = 60,
    Shot_61 = 61,
    Shot_62 = 62,
    Shot_63 = 63,
    Shot_64 = 64,
    Shot_65 = 65,
    Shot_66 = 66,
    Shot_67 = 67,
    Shot_68 = 68,
    Shot_69 = 69,
    Shot_70 = 70,
    Shot_71 = 71,
    Shot_72 = 72,
    Shot_73 = 73,
    Shot_74 = 74,
    Shot_75 = 75,
    Shot_76 = 76,
    Shot_77 = 77,
    Shot_78 = 78,
    Shot_79 = 79,
    Shot_80 = 80,
    Shot_81 = 81,
    Shot_82 = 82,
    Shot_83 = 83,
    Shot_84 = 84,
    Shot_85 = 85,
    Shot_86 = 86,
    Shot_87 = 87,
    Shot_88 = 88,
    Shot_89 = 89,
    Shot_90 = 90,
    Shot_91 = 91,
    Shot_92 = 92,
    Shot_93 = 93,
    Shot_94 = 94,
    Shot_95 = 95,
    Shot_96 = 96,
    Shot_97 = 97,
    Shot_98 = 98,
    Shot_99 = 99
}
public enum Condition
{
    MainScenario = 0,
    AttractiveScenario = 1
}
public enum UserFrameFilterType
{
    None = 0,
    TitleMatch = 1,
    UpgradeMatch = 2,
    Etc = 3
}
public enum UserProfileType
{
    None = 0,
    Ark = 1,
    Event = 2,
    Raid = 3,
    Arena = 4,
    Museum = 5
}
public enum TabType
{
    None = 0,
    Normal = 1,
    Raid = 2,
    Arena = 3
}
public enum PassCategory
{
    PointAccumulate = 0,
    Mission = 1
}
public enum PassType
{
    Season = 0,
    Once = 1,
    Event = 2
}
public enum RewardType
{
    None = 0,
    User_exp = 1,
    Char_exp = 2,
    Currency = 3,
    Character = 4,
    Item = 5,
    Frame = 6,
    AttractivePoint = 7,
    Bgm = 8,
    Point = 9,
    LiveWallpaper = 10,
    Memorial = 11,
    CharacterCostume = 12,
    ItemRandom = 13,
    InfraCoreExp = 14,
    ItemRandomBox = 15,
    Equipment_None = 16,
    Equipment_MISSILIS = 17,
    Equipment_ELYSION = 18,
    Equipment_TETRA = 19,
    Equipment_PILGRIM = 20,
    Equipment_Random_01 = 21,
    Equipment_Random_02 = 22,
    Equipment_Random_03 = 23,
    PassPoint = 41,
    Equipment_ABNORMAL = 42,
    FavoriteItem = 43,
    ProfileCardObject = 44,
    ProfileRandomBox = 45,
    UserTitle = 46,
    LobbyDecoBackground = 47
}
public enum SpotKeyBoardInputTrigger
{
    None = 0,
    UseBurstSkillNum1 = 1,
    UseBurstSkillNum2 = 2,
    UseBurstSkillNum3 = 3,
    UseBurstSkillNum4 = 4,
    UseBurstSkillNum5 = 5,
    ChangeFocusCharacter1 = 6,
    ChangeFocusCharacter2 = 7,
    ChangeFocusCharacter3 = 8,
    ChangeFocusCharacter4 = 9,
    ChangeFocusCharacter5 = 10,
    ChangeAutoAim = 11,
    ChangeAutoSkill = 12,
    ChangeForceCover = 13
}
public enum SpootTutorialTextLocation
{
    None = 0,
    Top = 1,
    Middle = 2,
    Bottom = 3
}
public enum TutorialFunctionType
{
    None = 0,
    ChangeStep1BurstSkill = 1
}
public enum SpotTutorialCloseValue
{
    None = 0,
    BurstSkillTouch = 1,
    UseBurstSkill = 2,
    OnChangedFocusCharacter = 3,
    DragAim = 4,
    KillMonster = 5,
    TargetIncount = 6,
    AttackedPlayer = 7,
    UseMonsterSkill = 8,
    OnCoveredMode = 9,
    OffCoveredMode = 10,
    UseLockOn = 11
}
public enum SpotTutorialCloseType
{
    Touch = 0,
    Event = 1,
    Time = 2
}
public enum SpotTutorialTriggerValue
{
    None = 0,
    OnReloadStart = 1,
    TargetIncount = 2,
    TargetSpawn = 3,
    OnUseBurstSkill = 4,
    OnStep2BurstSkill = 5,
    OnStep3BurstSkill = 6,
    Zoom = 7,
    OnFullBurst = 8,
    KillMonster = 9,
    OnDestroyMonsterPart = 10,
    LaunchMonsterProjectile = 11,
    OnCancelUI = 12,
    OnBarrier = 13,
    AttackedPlayer = 14,
    MonsterSpawn = 15,
    UseBurstSkill = 16,
    OnChoiceSkillUI = 17
}
public enum SpotTutorialTriggerType
{
    None = 0,
    Time = 1,
    Event = 2
}
public enum HandlerType
{
    None = 0,
    MissionDaily = 1,
    MissionWeekly = 2,
    Achievement = 3,
    Jukebox = 4,
    SubQuest = 5,
    Ranking = 6
}
public enum Trigger
{
    None = 0,
    UserLevel = 1,
    CampaignClear = 2,
    ChapterClear = 3,
    CampaignStart = 4,
    TowerAllStart = 5,
    TowerBasicClear = 6,
    CharacterLevel = 7,
    CharacterGrade = 8,
    CharacterCore = 9,
    CharacterAttractiveLevel = 10,
    MainShopBuy = 11,
    ShopGuildBuy = 12,
    GachaCharacter = 13,
    OutpostBattleReward = 14,
    OutpostFastBattleReward = 15,
    PointRewardDaily = 16,
    PointRewardWeekly = 17,
    ObtainCharacter = 18,
    OutpostBuilding = 19,
    SendFriendShipPoint = 20,
    SendDispatch = 21,
    MainQuestClear = 22,
    ObtainJukeboxTheme = 23,
    SubQuestClear = 24,
    CampaignGroupClear = 25,
    NpcTalk = 26,
    TowerElysionClear = 27,
    TowerMissilisClear = 28,
    TowerTetraClear = 29,
    TowerOverspecClear = 30,
    AchieveRanking1st = 31,
    AchieveRanking5th = 32,
    AchieveRanking10th = 33,
    EventPoint = 34,
    HardChapterClear = 35,
    ObtainCharacterSSR = 36,
    GachaCompany = 37,
    ObtainCharacterNew = 38,
    WinArena = 39,
    SpecialArenaTier = 40,
    PointRewardAchievement = 41,
    ObtainCharacterPilgrim = 42,
    ShopDisassembleBuy = 43,
    CharacterCounsel = 44,
    CharacterAttractivePresent = 45,
    ObtainEquipItemT3T4 = 46,
    ObtainEquipItemT5T6 = 47,
    ObtainEquipItemT7T8 = 48,
    ObtainEquipItemT9 = 49,
    PointRewardEvent = 50,
    MissionClearEvent = 51,
    ObtainMemorialItem = 52,
    LostSectorClear = 53,
    ObtainHarmonyCube = 54,
    HarmonyCubeLevel = 55,
    CooperationEventClear = 56,
    SynchroDeviceSlot = 57,
    ObtainEquipItemALL = 58,
    EquipItemLevel = 59,
    CharacterSkillLevel = 60,
    PickupGachaCharacter = 61,
    ObtainSilverMileage = 62,
    ObtainGoldMileage = 63,
    SendDispatchGrade = 64,
    OutpostBattleBoxLevel = 65,
    GetFriendShipPoint = 66,
    MessageClear = 67,
    RecycleResearchLevel = 68,
    GachaPremium = 69,
    CharacterLevelUpCount = 70,
    CharacterGradeUpCount = 71,
    CharacterLevelMax = 72,
    CharacterGradeMax = 73,
    HarmonyCubeLevelMax = 74,
    CharacterSkillLevelMax = 75,
    CharacterAttractiveLevelMax = 76,
    EquipItemLevelMax = 77,
    ObtainEquipItemT2 = 78,
    FieldObjectCollection = 79,
    SimulationRoomStart = 80,
    InterceptStart = 81,
    EquipItemLevelCount = 82,
    SimulationRoomClear = 83,
    InterceptClear = 84,
    DailyEventClear = 85,
    EventStageClear = 86,
    ObtainEventCurrencyMaterialMiraclesnow = 87,
    EventDungeonStageClear = 88,
    EventSortOutClear = 89,
    EventSortOutPointMax = 90,
    EquipItemLevelUpCount = 91,
    CharacterSkillLevelUpCount = 92,
    FirstPaidGacha_Legecy = 93,
    ObtainCharacterCostume = 94,
    SyncroDeviceLevelMax = 95,
    ObtainEventCurrencyMaterial = 96,
    SimulationRoomClearWithoutCondition = 97,
    EventTextAdventureClear = 98,
    RookieArenaPlayCount = 99,
    EventDicePlayCount = 100,
    EventBBQTycoonDailyRewardCheck = 101,
    EventBBQTycoonHighScore = 102,
    ChampionArenaGambleWinAll = 103,
    ChampionArenaGambleLoseAll = 104,
    EventMiniGameCe002PlayCheck = 105,
    EventMiniGameNKSPlayCheck = 106,
    EventSnowfallOasisDailyRewardCheck = 107,
    EventMiniGameCe003RewardCheck = 108,
    EventTowerDefensePlayCheck = 109,
    EventPlaySodaPlayCheck = 110,
    EventIslandAdventureFishingPlayCheck = 111,
    MiniGameDDCompleteDive = 112,
    MiniGameDDCompleteSushi = 113,
    MiniGameDDTotalGold = 114,
    MiniGameDDSushiPreTurnover = 115,
    MiniGameDDTotalFish = 116,
    MiniGameDDPerUnderwaterEncounter = 117,
    MiniGameDDUnlockEmployeeCount = 118,
    MiniGameDDUnlockNikkeCount = 119,
    MiniGameDDGunLevel = 120,
    MiniGameDDIDiverLevel = 121,
    MiniGameDDUnlockSushiCount = 122,
    MiniGameDDSushiLevel = 123,
    MiniGameDDSushiCookScore = 124,
    MiniGameDDSushiPreTurnoverTotalMax = 125,
    MiniGameDDSushiLevelTotalMax = 126,
    MiniGameDDAllAchievement = 127,
    ComebackPollComplete = 128,
    AliceAccessAttractiveScenario = 129,
    AliceEquipCollectionItemLevel = 130,
    AliceEquipCollectionItemSR = 131,
    AliceEquipItemOverload = 132,
    AliceSkill1Level = 133,
    AliceSkillBurstLevel = 134,
    InterceptNormalClearWithCondition = 135,
    InterceptSpecialClearWithCondition = 136,
    SimulationRoomClearCount1Only = 137,
    TacticAcademyFinish9_4 = 138,
    EventMiniGameCe004RewardCheck = 139,
    EventMVGPlayCheck = 140,
    EventDDRRewardCheck = 141,
    EventPirateCafeRewardCheck = 142,
    BuyPackageListTid300109Check = 143,
    EventMiniGameCe005RewardCheck = 144,
    ObtainCharacter5118 = 145,
    ObtainCharacter5119 = 146,
    ObtainCharacter5120 = 147,
    ActiveComeBackUserEvent = 148,
    EnterEventList = 149,
    EnterEventArchive = 150,
    EnterSideStory = 151,
    EnterArcadeMenu = 152,
    EventEBMPlayCheck = 153,
    EventMiniGameCE006PlayCheck = 154,
    ObtainCharacter5094 = 155,
    ObtainCharacter5095 = 156,
    EventBFGCleanUpRewardCheck = 157,
    EventRopeRunningRewardCheck = 158,
    EventMiniGameCE007RewardCheck = 159
}
public enum MessengerMember
{
    None = 0,
    Nikke = 1,
    NPC = 2
}
public enum Squad
{
    None = 0,
    Counters = 1,
    Absolute = 2,
    Scouting = 3,
    InfinityRail = 4,
    External = 5,
    RecallRelease = 6,
    Matis = 7,
    CafeSweety = 8,
    Triangle = 9,
    Talentum = 10,
    LittleCannon = 11,
    Protocol = 12,
    Unlimited = 13,
    ACPU = 14,
    MightyTools = 15,
    MasterHand = 16,
    SiegePerilous = 17,
    Seraphim = 18,
    Wardress = 19,
    MaidForYou = 20,
    Exotic = 21,
    LifeTonic = 22,
    Pioneer = 23,
    Inherit = 24,
    TheClown = 25,
    _777 = 26,
    UnderworldQueen = 27,
    MMR = 28,
    Replace = 29,
    Humanity = 30,
    Company = 31,
    EventHero01 = 32,
    EventHero02 = 33,
    EventHero03 = 34,
    Archive = 35,
    Weissritter = 36,
    HeavyGram = 37,
    HappyZoo = 38,
    RealKindness = 39,
    Heretic = 40,
    A_F_F_ = 41,
    EnikkChild = 42,
    Aegis = 43,
    BotanicGarden = 44,
    PrimaDonna = 45,
    SchoolCircle = 46,
    Ce_01 = 47,
    Overseer = 48,
    Ce002_01 = 49,
    Ce002_02 = 50,
    Akademeia = 51,
    DazzlingPearl = 52,
    Goddess = 53,
    ElectricShock = 54,
    CE003 = 55,
    Rewind = 56,
    CE004 = 57,
    BestSeller = 58,
    OldTales = 59,
    CE005 = 60,
    CookingOil = 61,
    Incubator = 62,
    CE006_01 = 63,
    CE006_02 = 64,
    CE006_03 = 65,
    OverTheHorizon = 66,
    CE007 = 67
}
public enum MessengerRoom
{
    None = 0,
    Nikke = 1,
    Quest = 2,
    Group = 3
}
public enum SpotObjectRank
{
    Soft = 0,
    Medium = 1,
    Hard = 2
}
public enum TeamType
{
    None = 0,
    Default = 1,
    Profile = 2,
    ArenaDefense = 3,
    ArenaOffense = 4,
    TowerBase = 5,
    TowerElysion = 6,
    TowerMissilis = 7,
    TowerTetra = 8,
    TowerOverspec = 9,
    LostSector = 10,
    DummySquad = 11,
    SpecialArenaDefense = 12,
    SpecialArenaOffense = 13,
    ShootingRange = 14,
    InterceptNormal = 15,
    InterceptSpecial = 16,
    UnionRaid = 17,
    SimulationRoom = 18,
    ChampionArena = 19,
    StoryEvent = 20,
    ChallengeModeEvent = 21,
    SoloRaid = 22,
    EventArchive = 23,
    ShootingRangeFire = 24,
    ShootingRangeWind = 25,
    ShootingRangeIron = 26,
    ShootingRangeElectronic = 27,
    ShootingRangeWater = 28,
    SideStory = 29,
    InterceptAnomalous = 30,
    SoloRaidMuseum = 31
}
public enum CorporationTowerType
{
    ELYSION = 1,
    MISSILIS = 2,
    TETRA = 3,
    OVERSPEC = 4,
    ALL = 5
}
public enum ColType
{
    None = 0,
    Break = 1,
    Counter = 2,
    Choice = 3
}
public enum FunctionValueType
{
    None = 0,
    Integer = 1,
    Percent = 2,
    Id = 3
}
public enum StatType
{
    None = 0,
    Atk = 1,
    Hp = 2,
    Defence = 3,
    EnergyResist = 4,
    MetalResist = 5,
    BioResist = 6
}
public enum Condition_type
{
    None = 0,
    Character = 1,
    Costume = 2,
    FavoriteItem = 3
}
public enum Sub_type
{
    None = 0,
    Scenario = 1,
    Event = 2
}
public enum Livewallpaper_type
{
    None = 0,
    Scenario = 1,
    SkillCutScene = 2,
    Event = 3,
    FavoriteItem = 4
}
public enum InteractionObjectIsDestroyable
{
    None = 0,
    Soft = 1,
    Hard = 2
}
public enum FieldInteractionObjectState
{
    None = 0,
    Ignite = 1,
    Hacking = 2
}
public enum BalloonEndType
{
    None = 0,
    QuestEnd = 1,
    Talk = 2
}
public enum BalloonPlayType
{
    None = 0,
    Random = 1
}
public enum ScenarioPlayType
{
    None = 0,
    Ones = 1,
    Always = 2
}
public enum StageType
{
    None = 0,
    Main = 1,
    Sub = 2,
    Emergency = 3,
    EventQuest = 4,
    FavoriteItemQuest = 5
}
public enum ChapterMod
{
    Normal = 0,
    Hard = 1
}
[MemoryPackable]
public partial class OpenConditionData
{
    public ContentsOpenCondition OpenConditionType;
    public int OpenConditionValue;
}

public enum ContentsOpenCondition
{
    None = 0,
    Preparing = 1,
    UserLevel = 2,
    StageClear = 3,
    MainQuest = 4,
    GuildLevel = 5,
    MaxGachaCount = 6,
    MaxGachaPremiumCount = 7,
    PlayTutorialGacha = 8,
    SimulationRoomClear = 9
}
public enum ContentsOpen
{
    None = 0,
    Tower = 1,
    Shop = 2,
    Collection = 3,
    Summon = 4,
    Outpost = 5,
    ArkSector = 6,
    LostSector = 7,
    Guild = 8,
    GuildShop = 9,
    ArenaShop = 10,
    Arena = 11,
    SpecialArena = 12,
    ChampionArena = 13,
    CompanyTower = 14,
    Ranking = 15,
    Album = 16,
    Chatting = 17,
    HarmonyCube = 18,
    TrainingRoom = 19,
    CustomizeGacha = 20,
    ContentsOpen_SynchroDevice = 21,
    ContentsOpen_RecycleRoom = 22,
    ContentsOpen_TacticAcademy = 23,
    Raid = 24,
    InterceptNormalLevel2 = 25,
    InterceptSpecial = 26,
    EmergencyQuest = 27,
    Lobby = 28,
    Mission = 29,
    Spot_BurstGauge = 30,
    Spot_BattleRetreat = 31,
    Spot_AutoControl = 32,
    Friend = 33,
    Mail = 34,
    Messenger = 35,
    Inventory = 36,
    SubMenu = 37,
    Nikke_LevelUp = 38,
    Nikke_GradeUp = 39,
    Nikke_Equip = 40,
    Nikke_Cube = 41,
    Event = 42,
    Spot_GoHome = 43,
    Nikke_SkillLevelUp = 44,
    Library_Costume = 45,
    MyLobby = 46,
    CompanyGacha = 47,
    FriendPointGacha = 48,
    Campaign_Hard = 49,
    OutpostBattle = 50,
    Lobby_OutpostBattle = 51,
    DispatchBoard = 52,
    SubQuest = 53,
    Summon_WishList = 54,
    Shortcut_Counseling = 55,
    Nikke = 56,
    PartySet = 57,
    Shortcut_StageDefeatBtn = 58,
    GachaPremium = 59,
    SimulationRoom = 60,
    UnionRaid = 61,
    InterceptNormalLevel1 = 62,
    CashShop = 63,
    AwakenEquipmentOptionRoll = 64,
    AwakenEquipmentOptionFix = 65,
    Liberate = 66,
    Liberate_Search = 67,
    Solo_Raid = 68,
    GachaPickup = 69,
    GachaCharge = 70,
    GachaStepup = 71,
    SimulationRoomOC = 72,
    SupportCharacter = 73,
    ArenaQuickBattle = 74,
    SpecialArenaQuickBattle = 75,
    SideStory = 76,
    FavoriteItem = 77,
    InterceptAnomalous = 78,
    ShopTrade = 79,
    Arcade = 80,
    SimulationRoomSimple = 81,
    CampaignQuickBattle = 82,
    SoloRaidMuseum = 83
}
public enum ContentsTutorialTextLocation
{
    None = 0,
    Top = 1,
    Middle = 2,
    Bottom = 3
}
public enum ContentsTutorialTriggerValue
{
    None = 0,
    EnterField = 1,
    DiscoverHiddenItem = 2,
    CloseRewardPopup = 3,
    FinishLobbyAnimation = 4,
    FinishGacha = 5,
    FinishPartySetAnimation = 6,
    EncounterMonster = 7,
    EncounterStageClear = 8,
    GetHiddenItem = 9,
    BackButtonTouch = 10,
    SummonButtonTouch = 11,
    GachaButtonTouch = 12,
    ConfirmButtonTouch = 13,
    PartySetTouch = 14,
    PartySetSlotTouch = 15,
    CharacterSelect = 16,
    CharacterSelectCancel = 17,
    TeamPresetTouch = 18,
    FinishEventStageAnimation = 19,
    EnterChapter1 = 20,
    EnterPartySetView = 21,
    ChangeTeamPreset = 22,
    FinishCharacterSelect = 23,
    FinishCharacterSelectCancel = 24,
    StartEventStageAnimation = 25,
    IntroPlayEvent = 26,
    EnterLostSecterStageView = 27,
    EnterCharacterAttractiveView = 28,
    EnterUnitView = 29,
    EnterCharacterDetailView = 30,
    EnterLevelUpPopup = 31,
    EnterCubeDetailView = 32,
    EnterDispatchBoardView = 33,
    EnterOutpost = 34,
    EnterOutpostBattlePopup = 35,
    EnterBuildingListPopup = 36,
    EnterTowerStageSelectView = 37,
    EnterSynchroDeviceView = 38,
    EnterRecycleRoomView = 39,
    EnterAcademyView = 40,
    UnlockWishList = 41,
    UnitButtonTouch = 42,
    LevelUpButtonTouch = 43,
    LevelUp = 44,
    CloseButtonTouch = 45,
    EasyEquipButtonTouch = 46,
    OutpostBattleShortCutTouch = 47,
    ReceiveRewardButtonTouch = 48,
    BuildingSlotTouch = 49,
    BuildingButtonTouch = 50,
    CompleteBuildingTouch = 51,
    OutpostButtonTouch = 52,
    SynchroDeviceTouch = 53,
    BuildingEnterButtonTouch = 54,
    ConstructionComplete = 55,
    EnterBuildingPopup = 56,
    EnterSummonView = 57,
    StartConstruction = 58,
    EnterAlertPopup = 59,
    EnterStageSelectView = 60,
    TouchBattleEntry = 61,
    EnterStageClearView = 62,
    EnterStructureLevelup = 63,
    WishListButtonTouch = 64,
    EnterWishListPopup = 65,
    StartLevelUpBuilding = 66,
    EnterMissionPopup = 67,
    TouchMainMissionTab = 68,
    TouchAllReceiveButton = 69,
    EnterWeakElementPopup = 70,
    EnterEffectiveRangePopup = 71,
    EnterLostSectorField = 72,
    TouchPartySetButton = 73,
    TouchAutoSettingButton = 74,
    TouchExplorationButton = 75,
    TouchSavePartySetButton = 76,
    EnterSimulationRoomTitleView = 77,
    TouchSimulationRoomLevelButton = 78,
    EnterSimulationRoomLevelPopup = 79,
    TouchSimulationRoomStartButton = 80,
    EnterSimulationRoomStageView = 81,
    TouchSimulationEventSlot = 82,
    TouchTemaPresetSlot = 83,
    TouchFastBattleButton = 84,
    EnterBuffSelectPopup = 85,
    TouchBuffSlot = 86,
    TouchConfirmButton = 87,
    TouchArkButton = 88,
    EnterArkView = 89,
    TouchSimulationRoomButton = 90,
    TouchLostSectorButton = 91,
    EnterLostSectorMainView = 92,
    TouchLostSectorStageButton = 93,
    EnterLostSectorStagePopup = 94,
    TouchLostSectorExplorationButton = 95,
    OpenLostSectorHud = 96,
    EnterLostSectorPartySetView = 97,
    EnterSimulationRoomPartySetView = 98,
    EquipSlotTouch = 99,
    EnterEquipInfoPopup = 100,
    EquipLevelupButtonTouch = 101,
    EnterEquipLevelupPopup = 102,
    AutoSelectButtonTouch = 103,
    EquipExpLevelupButtonTouch = 104,
    SynchroDeviceShortCutButtonTouch = 105,
    EnterFieldStart = 106,
    EnterSimulationRoomResultPopup = 107,
    TouchResultPopupConfirmButton = 108,
    TouchLobbyButton = 109,
    TouchAutoSetButton = 110,
    TouchSquadSetSaveButton = 111,
    EnterSkillInfoPopup = 112,
    TouchSkillLevelUpButton = 113,
    EnterSkillLevelUpPopup = 114,
    EnterChapter1FieldStart = 115,
    EnterArenaSelectView = 116,
    TouchRookieArenaButton = 117,
    EnterRookieArenaView = 118,
    TouchArenaSquadSettingButton = 119,
    EnterRookieArenaSquadSettingView = 120,
    TouchDefensePartySetButton = 121,
    TouchSpecialArenaButton = 122,
    EnterSpecialArenaView = 123,
    CommonDialogOpen = 124,
    EnterCooperationEventView = 125,
    AchievementCharacterHurdleLevel = 126,
    AchievementSynchroHurdleLevel = 127,
    LobbyButtonTouch = 128,
    TouchArkMarkerButton = 129,
    TouchGiveUpButton = 130,
    TouchLobbyStartButton = 131,
    TouchCommanderCenterShortCutButton = 132,
    TouchMissionPopupCloseButton = 133,
    ScenarioEnd = 134,
    TouchBuffLegacySlot = 135,
    TouchBuffLegacyConfirmButton = 136,
    CloseContentsOpenPopup = 137,
    TouchSimulationOverClockModeBtn = 138,
    FinishSimulationOverClockModeAnimation = 139,
    EnterSimulationOverClockModeOptionPopup = 140,
    SelectOverClockOption = 141,
    EnterSoloRaidMainView = 142,
    TouchArchiveCategoryBtn = 143,
    OnHintRing = 144,
    EnterCampaignPartySetView = 145,
    EnterCollectionView = 146,
    EnterCollectionSelectPopup = 147,
    EnterCollectionInfoView = 148,
    EnterCollectionManagementUI = 149,
    EnterCollectionCombinePopup = 150,
    EnterCollectionChangeView = 151,
    ScenarioStart = 152,
    TouchSimulationRoomButtonNoEntry = 153,
    FinishContentsOpenAnimation = 154,
    EnterChapter6FieldStart = 155,
    EnterChapter6 = 156,
    EnterCampaignStageSelectView = 157,
    TouchOutpostBattlePopupCloseButton = 158,
    AutoPositionButtonTouch = 159,
    AutoUpgradeButtonTouch = 160,
    HomeButtonTouch = 161
}
public enum ContentsTutorialSubGroup
{
    None = 0,
    Attractive = 1,
    Cube = 2,
    OutpostHUD = 3,
    OutpostBattle = 4,
    Dispatch = 5,
    SynchroDevice = 6,
    RecycleRoom = 7,
    Academy = 8,
    Tower = 9,
    CooperationEvent = 10,
    Nikke = 11,
    SynchroDeviceLimitLevel = 12,
    OverClock = 13,
    Archive = 14,
    SoloRaid = 15
}
[MemoryPackable]
public partial class Reward_Data
{
    public int RewardPercent;
    public PercentDisplayType PercentDisplayType;
    public RewardType RewardType;
    public int RewardId;
    public int RewardValue;
}

public enum ScenarioType
{
    None = 0,
    FieldTalk = 1,
    Dialog = 2,
    Balloon = 3
}
public enum Category
{
    Campaign_View = 0,
    Outpost_View = 1,
    Ark_View = 2,
    Lobby_Enter = 3,
    Campaign_Enter = 4,
    Outpost_Building_Enter = 5,
    Ark_Marker = 6,
    Campaign_Clear = 7,
    Outpost_Select = 8,
    Tribe_Tower_Clear = 9,
    Tribe_Tower_Enter = 10,
    Tribe_Tower_View = 11,
    Run_Gacha = 12,
    Npc_Talk = 13,
    FieldObject_Collection = 14,
    End = 15,
    LostSector_View = 16,
    LostSector_Clear = 17,
    SimulationRoom_View = 18,
    EventQuest_Stage_Enter = 19,
    EventQuest_Stage_Clear = 20,
    EventQuest_Stage_Group_Clear = 21,
    EventQuest_Popup_Enter = 22,
    Normal_Chapter_View = 23,
    Field_Interaction_Action_Trigger = 24,
    FavoriteItemQuest_Stage_Enter = 25,
    FavoriteItemQuest_Stage_Clear = 26,
    FavoriteItemQuest_Stage_Group_Clear = 27,
    SimulationRoom_Select = 28
}
public enum CameraFocusType
{
    None = 0,
    Squard1 = 1,
    Squard2 = 2,
    Squard3 = 3,
    Squard4 = 4,
    Squard5 = 5,
    Target = 6
}
public enum PortraitPositionType
{
    Left = 0,
    Right = 1
}
public enum DialogPositionType
{
    Top = 0,
    Middle = 1,
    Bottom = 2
}
public enum ScenarioFadeType
{
    None = 0,
    Black = 1,
    White = 2,
    Black_without_dialogue = 3,
    White_without_dialogue = 4
}
public enum FilterType
{
    None = 0,
    Red = 1,
    Grey = 2,
    Black = 3,
    Blur_High = 4,
    Blur_Middle = 5,
    Blur_Low = 6,
    Vignetting = 7
}
[MemoryPackable]
public partial class ScenarioEffectData
{
    public string? PlayEffectId;
    public string? StopEffectId;
    public string? SetEffectPosition;
    public bool IsEffectMovable;
}

[MemoryPackable]
public partial class ScenarioCharacterData
{
    public string? ShowCharId;
    public string? HideCharId;
    public string? SetCharPosition;
    public string? SetCharAnim;
}
